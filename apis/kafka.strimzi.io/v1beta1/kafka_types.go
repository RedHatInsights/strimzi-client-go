// Code generated by schema-generate. DO NOT EDIT.

package v1beta1

import (
	"bytes"
	"database/sql"
	"errors"
	"fmt"
	jsoniter "github.com/json-iterator/go"
	"reflect"
)

func ValueTypeToString(valueType jsoniter.ValueType) string {
	switch valueType {
	case jsoniter.StringValue:
		return "string"
	case jsoniter.NumberValue:
		return "number"
	case jsoniter.NilValue:
		return "nil"
	case jsoniter.BoolValue:
		return "bool"
	case jsoniter.ArrayValue:
		return "array"
	case jsoniter.ObjectValue:
		return "object"
	default:
		return "invalid"
	}
}

type commaTracker struct {
	stream *jsoniter.Stream
	started bool
}

func (t *commaTracker) More() {
	if t.started {
		t.stream.WriteMore()
	} else {
		t.started = true
	}
}

type isEmptyChecker interface {
	IsEmpty() bool
}

// IsEmpty reports whether v is zero struct
// Does not support cycle pointers for performance, so as json
func IsEmpty(v interface{}) bool {
	if i, ok := v.(isEmptyChecker); ok {
		return i.IsEmpty()
	}
	rv := reflect.ValueOf(v)
	return !rv.IsValid() || rv.IsZero()
}

var (
	jsonNullValue = []byte("null")
)

// NewEmptyBool creates a non-empty EmptyBool
func NewEmptyBool(value bool) EmptyBool {
	return EmptyBool{value, true}
}

// EmptyBool is bool or nothing
type EmptyBool struct {
	Bool bool
	Valid bool // Valid is true if Bool is not empty
}

func (t EmptyBool) IsEmpty() bool {
	return !t.Valid
}

func (t EmptyBool) MarshalJSON() ([]byte, error) {
	if t.Valid {
		return jsoniter.Marshal(t.Bool)
	}
	return []byte("\"\""), nil
}

func (t *EmptyBool) Set(value bool) {
	t.Bool = value
	t.Valid = true
}

func (t *EmptyBool) Unset() {
	t.Bool = false
	t.Valid = false
}

func (t EmptyBool) MarshalJSONStream(stream *jsoniter.Stream) {
	if t.Valid {
		stream.WriteBool(t.Bool)
	} else {
		stream.WriteBool(false)
	}
}

func (t *EmptyBool) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	t.Bool = iter.ReadBool()
	t.Valid = iter.Error == nil
}

func (t *EmptyBool) UnmarshalJSON(data []byte) error {
	if err := jsoniter.Unmarshal(data, &t.Bool); err != nil {
		return err
	}
	t.Valid = true
	return nil
}

// NewEmptyFloat64 creates a non-empty EmptyFloat64
func NewEmptyFloat64(value float64) EmptyFloat64 {
	return EmptyFloat64{value, true}
}

// EmptyFloat64 is float64 or nothing
type EmptyFloat64 struct {
	Float64 float64
	Valid bool // Valid is true if Float64 is not empty
}

func (t EmptyFloat64) IsEmpty() bool {
	return !t.Valid
}

func (t EmptyFloat64) MarshalJSON() ([]byte, error) {
	if t.Valid {
		return jsoniter.Marshal(t.Float64)
	}
	return []byte("\"\""), nil
}

func (t *EmptyFloat64) Set(value float64) {
	t.Float64 = value
	t.Valid = true
}

func (t *EmptyFloat64) Unset() {
	t.Float64 = 0.0
	t.Valid = false
}

func (t EmptyFloat64) MarshalJSONStream(stream *jsoniter.Stream) {
	if t.Valid {
		stream.WriteFloat64(t.Float64)
	} else {
		stream.WriteFloat64(0.0)
	}
}

func (t *EmptyFloat64) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	t.Float64 = iter.ReadFloat64()
	t.Valid = iter.Error == nil
}

func (t *EmptyFloat64) UnmarshalJSON(data []byte) error {
	if err := jsoniter.Unmarshal(data, &t.Float64); err != nil {
		return err
	}
	t.Valid = true
	return nil
}

// NewEmptyInt creates a non-empty EmptyInt
func NewEmptyInt(value int) EmptyInt {
	return EmptyInt{value, true}
}

// EmptyInt is int or nothing
type EmptyInt struct {
	Int int
	Valid bool // Valid is true if Int is not empty
}

func (t EmptyInt) IsEmpty() bool {
	return !t.Valid
}

func (t EmptyInt) MarshalJSON() ([]byte, error) {
	if t.Valid {
		return jsoniter.Marshal(t.Int)
	}
	return []byte("\"\""), nil
}

func (t *EmptyInt) Set(value int) {
	t.Int = value
	t.Valid = true
}

func (t *EmptyInt) Unset() {
	t.Int = 0
	t.Valid = false
}

func (t EmptyInt) MarshalJSONStream(stream *jsoniter.Stream) {
	if t.Valid {
		stream.WriteInt(t.Int)
	} else {
		stream.WriteInt(0)
	}
}

func (t *EmptyInt) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	t.Int = iter.ReadInt()
	t.Valid = iter.Error == nil
}

func (t *EmptyInt) UnmarshalJSON(data []byte) error {
	if err := jsoniter.Unmarshal(data, &t.Int); err != nil {
		return err
	}
	t.Valid = true
	return nil
}

// NewEmptyString creates a non-empty EmptyString
func NewEmptyString(value string) EmptyString {
	return EmptyString{value, true}
}

// EmptyString is string or nothing
type EmptyString struct {
	String string
	Valid bool // Valid is true if String is not empty
}

func (t EmptyString) IsEmpty() bool {
	return !t.Valid
}

func (t EmptyString) MarshalJSON() ([]byte, error) {
	if t.Valid {
		return jsoniter.Marshal(t.String)
	}
	return []byte("\"\""), nil
}

func (t *EmptyString) Set(value string) {
	t.String = value
	t.Valid = true
}

func (t *EmptyString) Unset() {
	t.String = ""
	t.Valid = false
}

func (t EmptyString) MarshalJSONStream(stream *jsoniter.Stream) {
	if t.Valid {
		stream.WriteString(t.String)
	} else {
		stream.WriteString("")
	}
}

func (t *EmptyString) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	t.String = iter.ReadString()
	t.Valid = iter.Error == nil
}

func (t *EmptyString) UnmarshalJSON(data []byte) error {
	if err := jsoniter.Unmarshal(data, &t.String); err != nil {
		return err
	}
	t.Valid = true
	return nil
}

// OneOfStringNull is a 'string' or a 'null', and can be emptied
type OneOfStringNull struct {
	currentType jsoniter.ValueType
	stringValue string
}

// NewOneOfStringNull creates a empty OneOfStringNull
func NewOneOfStringNull() OneOfStringNull {
	return OneOfStringNull{jsoniter.InvalidValue, ""}
}

// NewOneOfStringNullString creates a OneOfStringNull of type string
func NewOneOfStringNullString(value string) OneOfStringNull {
	return OneOfStringNull{jsoniter.StringValue, value}
}

// NewOneOfStringNullNull creates a OneOfStringNull of type null
func NewOneOfStringNullNull() OneOfStringNull {
	return OneOfStringNull{jsoniter.NilValue, ""}
}

// IsEmpty returns true if the value is empty
func (value *OneOfStringNull) IsEmpty() bool {
	return value.currentType == jsoniter.InvalidValue
}

// IsNull returns true if the value is 'null'
func (value *OneOfStringNull) IsNull() bool {
	return value.currentType == jsoniter.NilValue
}

// IsString returns true if the value is a string
func (value *OneOfStringNull) IsString() bool {
	return value.currentType == jsoniter.StringValue
}

// StringValue returns the current value if IsString() is true, "" otherwise
func (value *OneOfStringNull) StringValue() string {
	if value.currentType == jsoniter.StringValue {
		return value.stringValue
	}
	return ""
}

// NullString returns the current value as a sql.NullString
func (value *OneOfStringNull) NullString() sql.NullString {
	return sql.NullString{
		Valid:  value.currentType == jsoniter.StringValue,
		String: value.stringValue,
	}
}

// MarshalJSONStream serializes to a jsoniter Stream
func (value OneOfStringNull) MarshalJSONStream(stream *jsoniter.Stream) {
	if value.currentType == jsoniter.StringValue {
		stream.WriteString(value.stringValue)
	} else {
		stream.WriteNil()
	}
}

// MarshalJSON serialize to json
func (value OneOfStringNull) MarshalJSON() ([]byte, error) {
	switch value.currentType {
	case jsoniter.InvalidValue:
		return jsonNullValue, nil
	case jsoniter.NilValue:
		return jsonNullValue, nil
	case jsoniter.StringValue:
		return jsoniter.Marshal(value.stringValue)
	}
	return nil, fmt.Errorf(
		"OneOfStringNull unsupported type: %s",
		ValueTypeToString(value.currentType))
}

func (value *OneOfStringNull) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	switch t := iter.WhatIsNext(); t {
	case jsoniter.NilValue:
		iter.ReadNil()
		value.currentType = jsoniter.NilValue
	case jsoniter.StringValue:
		value.currentType = jsoniter.StringValue
		value.stringValue = iter.ReadString()
	default:
		iter.ReportError("Read", fmt.Sprintf("unexpected value type: %v", t))
	}
}

// UnmarshalJSON unserialize a OneOfStringNull from json
func (value *OneOfStringNull) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, jsonNullValue) {
		value.currentType = jsoniter.NilValue
	} else {
		if err := jsoniter.Unmarshal(data, &value.stringValue); err != nil {
			return err
		}
		value.currentType = jsoniter.StringValue
	}
	return nil
}

// OneOfNumberNull is a 'string' or a 'null', and can be emptied
type OneOfNumberNull struct {
	currentType jsoniter.ValueType
	numberValue float64
}

// NewOneOfNumberNull creates a empty OneOfNumberNull
func NewOneOfNumberNull() OneOfNumberNull {
	return OneOfNumberNull{jsoniter.InvalidValue, 0}
}

// NewOneOfNumberNullNumber creates a OneOfNumberNull of type number
func NewOneOfNumberNullNumber(value float64) OneOfNumberNull {
	return OneOfNumberNull{jsoniter.NumberValue, value}
}

// NewOneOfNumberNullNull creates a OneOfNumberNull of type null
func NewOneOfNumberNullNull() OneOfNumberNull {
	return OneOfNumberNull{jsoniter.NilValue, 0}
}

// IsEmpty returns true if the value is empty
func (value *OneOfNumberNull) IsEmpty() bool {
	return value.currentType == jsoniter.InvalidValue
}

// IsNull returns true if the value is 'null'
func (value *OneOfNumberNull) IsNull() bool {
	return value.currentType == jsoniter.NilValue
}

// IsNumber returns true if the value is a number
func (value *OneOfNumberNull) IsNumber() bool {
	return value.currentType == jsoniter.NumberValue
}

// NumberValue returns the current value if IsNumber() is true, 0 otherwise
func (value *OneOfNumberNull) NumberValue() float64 {
	if value.currentType == jsoniter.NumberValue {
		return value.numberValue
	}
	return 0
}

// MarshalJSON serialize to json
func (value OneOfNumberNull) MarshalJSON() ([]byte, error) {
	switch value.currentType {
	case jsoniter.InvalidValue:
		return jsonNullValue, nil
	case jsoniter.NilValue:
		return jsonNullValue, nil
	case jsoniter.NumberValue:
		return jsoniter.Marshal(value.numberValue)
	}
	return nil, fmt.Errorf(
		"OneOfNumberNull unsupported type: %s",
		ValueTypeToString(value.currentType))
}

// UnmarshalJSON unserialize a OneOfNumberNull from json
func (value *OneOfNumberNull) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, jsonNullValue) {
		value.currentType = jsoniter.NilValue
	} else {
		if err := jsoniter.Unmarshal(data, &value.numberValue); err != nil {
			return err
		}
		value.currentType = jsoniter.NumberValue
	}
	return nil
}

// OneOfBoolNull is a 'bool' or a 'null', and can be emptied
type OneOfBoolNull struct {
	currentType jsoniter.ValueType
	boolValue   bool
}

// NewOneOfBoolNull creates a empty OneOfBoolNull
func NewOneOfBoolNull() OneOfBoolNull {
	return OneOfBoolNull{jsoniter.InvalidValue, false}
}

// NewOneOfBoolNullBool creates a OneOfBoolNull of type number
func NewOneOfBoolNullBool(value bool) OneOfBoolNull {
	return OneOfBoolNull{jsoniter.BoolValue, value}
}

// NewOneOfBoolNullNull creates a OneOfBoolNull of type null
func NewOneOfBoolNullNull() OneOfBoolNull {
	return OneOfBoolNull{jsoniter.NilValue, false}
}

// IsEmpty returns true if the value is empty
func (value *OneOfBoolNull) IsEmpty() bool {
	return value.currentType == jsoniter.InvalidValue
}

// IsNull returns true if the value is 'null'
func (value *OneOfBoolNull) IsNull() bool {
	return value.currentType == jsoniter.NilValue
}

// IsBool returns true if the value is a bool
func (value *OneOfBoolNull) IsBool() bool {
	return value.currentType == jsoniter.BoolValue
}

// BoolValue returns the current value if IsBool() is true, false otherwise
func (value *OneOfBoolNull) BoolValue() bool {
	if value.currentType == jsoniter.BoolValue {
		return value.boolValue
	}
	return false
}

// MarshalJSON serialize to json
func (value OneOfBoolNull) MarshalJSON() ([]byte, error) {
	switch value.currentType {
	case jsoniter.InvalidValue:
		return jsonNullValue, nil
	case jsoniter.NilValue:
		return jsonNullValue, nil
	case jsoniter.BoolValue:
		return jsoniter.Marshal(value.boolValue)
	}
	return nil, fmt.Errorf(
		"OneOfBoolNull unsupported type: %s",
		ValueTypeToString(value.currentType))
}

// UnmarshalJSON unserialize a OneOfBoolNull from json
func (value *OneOfBoolNull) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, jsonNullValue) {
		value.currentType = jsoniter.NilValue
	} else {
		if err := jsoniter.Unmarshal(data, &value.boolValue); err != nil {
			return err
		}
		value.currentType = jsoniter.BoolValue
	}
	return nil
}

type ListenersTypeEnum = int

const (
	ListenersTypeEnumNotSet ListenersTypeEnum = iota
	ListenersTypeEnum[]*ListenersItems
	ListenersTypeEnumListeners
)

type ListenersType struct {
	Type ListenersTypeEnum

	value interface{}
}

func (o ListenersType) IsNotSet() bool {
	return o.Type == ListenersTypeEnumNotSet
}

func (o ListenersType) Is[]*ListenersItems() bool {
	return o.Type == ListenersTypeEnum[]*ListenersItems
}
func (o ListenersType) []*ListenersItems() []*ListenersItems {
	return o.value.([]*ListenersItems)
}

func (o *ListenersType) Set[]*ListenersItems(v []*ListenersItems) {
	o.value = v
	o.Type = ListenersTypeEnum[]*ListenersItems
}

func (o ListenersType) IsListeners() bool {
	return o.Type == ListenersTypeEnumListeners
}
func (o ListenersType) Listeners() *Listeners {
	return o.value.(*Listeners)
}

func (o *ListenersType) SetListeners(v *Listeners) {
	o.value = v
	o.Type = ListenersTypeEnumListeners
}

func (o ListenersType) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	o.MarshalJSONStream(stream)
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (o ListenersType) MarshalJSONStream(stream *jsoniter.Stream) {
	switch o.Type {
	case ListenersTypeEnum[]*ListenersItems:
		stream.WriteVal(o.value)
	case ListenersTypeEnumListeners:
		stream.WriteVal(o.value)
	}
}

func (o *ListenersType) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	o.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (o *ListenersType) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	switch t := iter.WhatIsNext(); t {
	}
}

// AlternativeNames ...
type AlternativeNames []string

// Brokers ...
type Brokers []*BrokersItems

// Except ...
type Except []string

// Listeners ...
type Listeners []*ListenersItems

// LoadBalancerSourceRanges ...
type LoadBalancerSourceRanges []string

// MatchExpressions ...
type MatchExpressions []*MatchExpressionsItems

// NetworkPolicyPeers ...
type NetworkPolicyPeers []*NetworkPolicyPeersItems

// TlsTrustedCertificates ...
type TlsTrustedCertificates []*TlsTrustedCertificatesItems

// Values ...
type Values []string

// AddressesItems 
type AddressesItems struct {
	// Host The DNS name or IP address of the Kafka bootstrap service.
	Host string `json:"host,omitempty"`

	// Port The port of the Kafka bootstrap service.
	Port int `json:"port,omitempty"`

}

// Affinity The pod's affinity rules.
type Affinity struct {
	// NodeAffinity 
	NodeAffinity *NodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity 
	PodAffinity *PodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity 
	PodAntiAffinity *PodAntiAffinity `json:"podAntiAffinity,omitempty"`

}

// Annotations Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type Annotations struct {
}

// ApiService Template for Cruise Control API `Service`.
type ApiService struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// Authentication Authentication configuration for this listener.
type Authentication struct {
	// AccessTokenIsJwt Configure whether the access token is treated as JWT. This must be set to `false` if the authorization server returns opaque tokens. Defaults to `true`.
	AccessTokenIsJwt bool `json:"accessTokenIsJwt,omitempty"`

	// CheckAccessTokenType Configure whether the access token type check is performed or not. This should be set to `false` if the authorization server does not include 'typ' claim in JWT token. Defaults to `true`.
	CheckAccessTokenType bool `json:"checkAccessTokenType,omitempty"`

	// CheckIssuer Enable or disable issuer checking. By default issuer is checked using the value configured by `validIssuerUri`. Default value is `true`.
	CheckIssuer bool `json:"checkIssuer,omitempty"`

	// ClientId OAuth Client ID which the Kafka broker can use to authenticate against the authorization server and use the introspect endpoint URI.
	ClientId string `json:"clientId,omitempty"`

	// ClientSecret Link to Kubernetes Secret containing the OAuth client secret which the Kafka broker can use to authenticate against the authorization server and use the introspect endpoint URI.
	ClientSecret *ClientSecret `json:"clientSecret,omitempty"`

	// DisableTlsHostnameVerification Enable or disable TLS hostname verification. Default value is `false`.
	DisableTlsHostnameVerification bool `json:"disableTlsHostnameVerification,omitempty"`

	// EnableECDSA Enable or disable ECDSA support by installing BouncyCastle crypto provider. Default value is `false`.
	EnableECDSA bool `json:"enableECDSA,omitempty"`

	// FallbackUserNameClaim The fallback username claim to be used for the user id if the claim specified by `userNameClaim` is not present. This is useful when `client_credentials` authentication only results in the client id being provided in another claim. It only takes effect if `userNameClaim` is set.
	FallbackUserNameClaim string `json:"fallbackUserNameClaim,omitempty"`

	// FallbackUserNamePrefix The prefix to use with the value of `fallbackUserNameClaim` to construct the user id. This only takes effect if `fallbackUserNameClaim` is true, and the value is present for the claim. Mapping usernames and client ids into the same user id space is useful in preventing name collisions.
	FallbackUserNamePrefix string `json:"fallbackUserNamePrefix,omitempty"`

	// IntrospectionEndpointUri URI of the token introspection endpoint which can be used to validate opaque non-JWT tokens.
	IntrospectionEndpointUri string `json:"introspectionEndpointUri,omitempty"`

	// JwksEndpointUri URI of the JWKS certificate endpoint, which can be used for local JWT validation.
	JwksEndpointUri string `json:"jwksEndpointUri,omitempty"`

	// JwksExpirySeconds Configures how often are the JWKS certificates considered valid. The expiry interval has to be at least 60 seconds longer then the refresh interval specified in `jwksRefreshSeconds`. Defaults to 360 seconds.
	JwksExpirySeconds int `json:"jwksExpirySeconds,omitempty"`

	// JwksMinRefreshPauseSeconds The minimum pause between two consecutive refreshes. When an unknown signing key is encountered the refresh is scheduled immediately, but will always wait for this minimum pause. Defaults to 1 second.
	JwksMinRefreshPauseSeconds int `json:"jwksMinRefreshPauseSeconds,omitempty"`

	// JwksRefreshSeconds Configures how often are the JWKS certificates refreshed. The refresh interval has to be at least 60 seconds shorter then the expiry interval specified in `jwksExpirySeconds`. Defaults to 300 seconds.
	JwksRefreshSeconds int `json:"jwksRefreshSeconds,omitempty"`

	// MaxSecondsWithoutReauthentication Maximum number of seconds the authenticated session remains valid without re-authentication. This enables Apache Kafka re-authentication feature, and causes sessions to expire when the access token expires. If the access token expires before max time or if max time is reached, the client has to re-authenticate, otherwise the server will drop the connection. Not set by default - the authenticated session does not expire when the access token expires.
	MaxSecondsWithoutReauthentication int `json:"maxSecondsWithoutReauthentication,omitempty"`

	// TlsTrustedCertificates Trusted certificates for TLS connection to the OAuth server.
	TlsTrustedCertificates []*TlsTrustedCertificatesItems `json:"tlsTrustedCertificates,omitempty"`

	// Type Authentication type. `oauth` type uses SASL OAUTHBEARER Authentication. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `tls` type uses TLS Client Authentication. `tls` type is supported only on TLS listeners.
	Type string `json:"type"`

	// UserInfoEndpointUri URI of the User Info Endpoint to use as a fallback to obtaining the user id when the Introspection Endpoint does not return information that can be used for the user id. 
	UserInfoEndpointUri string `json:"userInfoEndpointUri,omitempty"`

	// UserNameClaim Name of the claim from the JWT authentication token, Introspection Endpoint response or User Info Endpoint response which will be used to extract the user id. Defaults to `sub`.
	UserNameClaim string `json:"userNameClaim,omitempty"`

	// ValidIssuerUri URI of the token issuer used for authentication.
	ValidIssuerUri string `json:"validIssuerUri,omitempty"`

	// ValidTokenType Valid value for the `token_type` attribute returned by the Introspection Endpoint. No default value, and not checked by default.
	ValidTokenType string `json:"validTokenType,omitempty"`

}

// Authorization Authorization configuration for Kafka brokers.
type Authorization struct {
	// AllowOnError Defines whether a Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent, for example, when it is temporarily unavailable). Defaults to `false` - all actions will be denied.
	AllowOnError bool `json:"allowOnError,omitempty"`

	// ClientId OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
	ClientId string `json:"clientId,omitempty"`

	// DelegateToKafkaAcls Whether authorization decision should be delegated to the 'Simple' authorizer if DENIED by Keycloak Authorization Services policies. Default value is `false`.
	DelegateToKafkaAcls bool `json:"delegateToKafkaAcls,omitempty"`

	// DisableTlsHostnameVerification Enable or disable TLS hostname verification. Default value is `false`.
	DisableTlsHostnameVerification bool `json:"disableTlsHostnameVerification,omitempty"`

	// ExpireAfterMs The expiration of the records kept in the local cache to avoid querying the Open Policy Agent for every request. Defines how often the cached authorization decisions are reloaded from the Open Policy Agent server. In milliseconds. Defaults to `3600000`.
	ExpireAfterMs int `json:"expireAfterMs,omitempty"`

	// GrantsRefreshPeriodSeconds The time between two consecutive grants refresh runs in seconds. The default value is 60.
	GrantsRefreshPeriodSeconds int `json:"grantsRefreshPeriodSeconds,omitempty"`

	// GrantsRefreshPoolSize The number of threads to use to refresh grants for active sessions. The more threads, the more parallelism, so the sooner the job completes. However, using more threads places a heavier load on the authorization server. The default value is 5.
	GrantsRefreshPoolSize int `json:"grantsRefreshPoolSize,omitempty"`

	// InitialCacheCapacity Initial capacity of the local cache used by the authorizer to avoid querying the Open Policy Agent for every request Defaults to `5000`.
	InitialCacheCapacity int `json:"initialCacheCapacity,omitempty"`

	// MaximumCacheSize Maximum capacity of the local cache used by the authorizer to avoid querying the Open Policy Agent for every request. Defaults to `50000`.
	MaximumCacheSize int `json:"maximumCacheSize,omitempty"`

	// SuperUsers List of super users. Should contain list of user principals which should get unlimited access rights.
	SuperUsers []string `json:"superUsers,omitempty"`

	// TlsTrustedCertificates Trusted certificates for TLS connection to the OAuth server.
	TlsTrustedCertificates []*TlsTrustedCertificatesItems `json:"tlsTrustedCertificates,omitempty"`

	// TokenEndpointUri Authorization server token endpoint URI.
	TokenEndpointUri string `json:"tokenEndpointUri,omitempty"`

	// Type Authorization type. Currently, the supported types are `simple`, `keycloak`, and `opa`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization. `keycloak` authorization type uses Keycloak Authorization Services for authorization. `opa` authorization type uses Open Policy Agent based authorization.
	Type string `json:"type"`

	// Url The URL used to connect to the Open Policy Agent server. The URL has to include the policy which will be queried by the authorizer. This option is required.
	Url string `json:"url,omitempty"`

}

// Bootstrap External bootstrap service configuration.
type Bootstrap struct {
	// Address Additional address name for the bootstrap service. The address will be added to the list of subject alternative names of the TLS certificates.
	Address string `json:"address,omitempty"`

	// DnsAnnotations Annotations that will be added to the `Service` resource. You can use this field to configure DNS providers such as External DNS.
	DnsAnnotations *DnsAnnotations `json:"dnsAnnotations,omitempty"`

	// NodePort Node port for the bootstrap service.
	NodePort int `json:"nodePort,omitempty"`

}

// BootstrapService Template for Kafka bootstrap `Service`.
type BootstrapService struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// BrokerCapacity The Cruise Control `brokerCapacity` configuration.
type BrokerCapacity struct {
	// CpuUtilization Broker capacity for CPU resource utilization as a percentage (0 - 100).
	CpuUtilization int `json:"cpuUtilization,omitempty"`

	// Disk Broker capacity for disk in bytes, for example, 100Gi.
	Disk string `json:"disk,omitempty"`

	// InboundNetwork Broker capacity for inbound network throughput in bytes per second, for example, 10000KB/s.
	InboundNetwork string `json:"inboundNetwork,omitempty"`

	// OutboundNetwork Broker capacity for outbound network throughput in bytes per second, for example 10000KB/s.
	OutboundNetwork string `json:"outboundNetwork,omitempty"`

}

// BrokerCertChainAndKey Reference to the `Secret` which holds the certificate and private key pair. The certificate can optionally contain the whole chain.
type BrokerCertChainAndKey struct {
	// Certificate The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// Key The name of the private key in the Secret.
	Key string `json:"key"`

	// SecretName The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`

}

// BrokersItems 
type BrokersItems struct {
	// AdvertisedHost The host name which will be used in the brokers' `advertised.brokers`.
	AdvertisedHost string `json:"advertisedHost,omitempty"`

	// AdvertisedPort The port number which will be used in the brokers' `advertised.brokers`.
	AdvertisedPort int `json:"advertisedPort,omitempty"`

	// Broker Id of the kafka broker (broker identifier).
	Broker int `json:"broker,omitempty"`

	// DnsAnnotations Annotations that will be added to the `Service` resources for individual brokers. You can use this field to configure DNS providers such as External DNS.
	DnsAnnotations *DnsAnnotations `json:"dnsAnnotations,omitempty"`

	// NodePort Node port for the broker service.
	NodePort int `json:"nodePort,omitempty"`

}

// BrokersService Template for Kafka broker `Service`.
type BrokersService struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// Capabilities 
type Capabilities struct {
	// Add 
	Add []string `json:"add,omitempty"`

	// Drop 
	Drop []string `json:"drop,omitempty"`

}

// ClientSecret Link to Kubernetes Secret containing the OAuth client secret which the Kafka broker can use to authenticate against the authorization server and use the introspect endpoint URI.
type ClientSecret struct {
	// Key The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key"`

	// SecretName The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName"`

}

// ClientService Template for ZooKeeper client `Service`.
type ClientService struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// ClientsCa Configuration of the clients certificate authority.
type ClientsCa struct {
	// CertificateExpirationPolicy How should CA certificate expiration be handled when `generateCertificateAuthority=true`. The default is for a new CA certificate to be generated reusing the existing private key.
	CertificateExpirationPolicy string `json:"certificateExpirationPolicy,omitempty"`

	// GenerateCertificateAuthority If true then Certificate Authority certificates will be generated automatically. Otherwise the user will need to provide a Secret with the CA certificate. Default is true.
	GenerateCertificateAuthority bool `json:"generateCertificateAuthority,omitempty"`

	// GenerateSecretOwnerReference If true then the Certificate Authority certificates secrets owner reference is set to the Kafka object. Otherwise no owner reference is set so deleting the Kafka object won't delete the secrets. Default is true.
	GenerateSecretOwnerReference bool `json:"generateSecretOwnerReference,omitempty"`

	// RenewalDays The number of days in the certificate renewal period. This is the number of days before the a certificate expires during which renewal actions may be performed. When `generateCertificateAuthority` is true, this will cause the generation of a new certificate. When `generateCertificateAuthority` is true, this will cause extra logging at WARN level about the pending certificate expiry. Default is 30.
	RenewalDays int `json:"renewalDays,omitempty"`

	// ValidityDays The number of days generated certificates should be valid for. The default is 365.
	ValidityDays int `json:"validityDays,omitempty"`

}

// ClusterCa Configuration of the cluster certificate authority.
type ClusterCa struct {
	// CertificateExpirationPolicy How should CA certificate expiration be handled when `generateCertificateAuthority=true`. The default is for a new CA certificate to be generated reusing the existing private key.
	CertificateExpirationPolicy string `json:"certificateExpirationPolicy,omitempty"`

	// GenerateCertificateAuthority If true then Certificate Authority certificates will be generated automatically. Otherwise the user will need to provide a Secret with the CA certificate. Default is true.
	GenerateCertificateAuthority bool `json:"generateCertificateAuthority,omitempty"`

	// GenerateSecretOwnerReference If true then the Certificate Authority certificates secrets owner reference is set to the Kafka object. Otherwise no owner reference is set so deleting the Kafka object won't delete the secrets. Default is true.
	GenerateSecretOwnerReference bool `json:"generateSecretOwnerReference,omitempty"`

	// RenewalDays The number of days in the certificate renewal period. This is the number of days before the a certificate expires during which renewal actions may be performed. When `generateCertificateAuthority` is true, this will cause the generation of a new certificate. When `generateCertificateAuthority` is true, this will cause extra logging at WARN level about the pending certificate expiry. Default is 30.
	RenewalDays int `json:"renewalDays,omitempty"`

	// ValidityDays The number of days generated certificates should be valid for. The default is 365.
	ValidityDays int `json:"validityDays,omitempty"`

}

// ClusterCaCert Template for Secret with Kafka Cluster certificate public key.
type ClusterCaCert struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// ConditionsItems 
type ConditionsItems struct {
	// LastTransitionTime Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime string `json:"lastTransitionTime,omitempty"`

	// Message Human-readable message indicating details about the condition's last transition.
	Message string `json:"message,omitempty"`

	// Reason The reason for the condition's last transition (a single word in CamelCase).
	Reason string `json:"reason,omitempty"`

	// Status The status of the condition, either True, False or Unknown.
	Status string `json:"status,omitempty"`

	// Type The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type string `json:"type,omitempty"`

}

// Config The ZooKeeper broker config. Properties with the following prefixes cannot be set: server., dataDir, dataLogDir, clientPort, authProvider, quorum.auth, requireClientAuthScheme, snapshot.trust.empty, standaloneEnabled, reconfigEnabled, 4lw.commands.whitelist, secureClientPort, ssl., serverCnxnFactory, sslQuorum (with the exception of: ssl.protocol, ssl.quorum.protocol, ssl.enabledProtocols, ssl.quorum.enabledProtocols, ssl.ciphersuites, ssl.quorum.ciphersuites, ssl.hostnameVerification, ssl.quorum.hostnameVerification).
type Config struct {
}

// ConfigMapKeyRef Reference to the key in the ConfigMap containing the metrics configuration.
type ConfigMapKeyRef struct {
	// Key 
	Key string `json:"key,omitempty"`

	// Name 
	Name string `json:"name,omitempty"`

	// Optional 
	Optional bool `json:"optional,omitempty"`

}

// Configuration Configuration of TLS listener.
type Configuration struct {
	// BrokerCertChainAndKey Reference to the `Secret` which holds the certificate and private key pair. The certificate can optionally contain the whole chain.
	BrokerCertChainAndKey *BrokerCertChainAndKey `json:"brokerCertChainAndKey,omitempty"`

}

// Container Template for the Kafka Exporter container.
type Container struct {
	// Env Environment variables which should be applied to the container.
	Env []*EnvItems `json:"env,omitempty"`

	// SecurityContext Security context for the container.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

}

// CruiseControl Configuration for Cruise Control deployment. Deploys a Cruise Control instance when specified.
type CruiseControl struct {
	// BrokerCapacity The Cruise Control `brokerCapacity` configuration.
	BrokerCapacity *BrokerCapacity `json:"brokerCapacity,omitempty"`

	// Config The Cruise Control configuration. For a full list of configuration options refer to https://github.com/linkedin/cruise-control/wiki/Configurations. Note that properties with the following prefixes cannot be set: bootstrap.servers, client.id, zookeeper., network., security., failed.brokers.zk.path,webserver.http., webserver.api.urlprefix, webserver.session.path, webserver.accesslog., two.step., request.reason.required,metric.reporter.sampler.bootstrap.servers, metric.reporter.topic, partition.metric.sample.store.topic, broker.metric.sample.store.topic,capacity.config.file, self.healing., anomaly.detection., ssl. (with the exception of: ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols, webserver.http.cors.enabled,webserver.http.cors.origin, webserver.http.cors.exposeheaders).
	Config *Config `json:"config,omitempty"`

	// Image The docker image for the pods.
	Image string `json:"image,omitempty"`

	// JvmOptions JVM Options for the Cruise Control container.
	JvmOptions *JvmOptions `json:"jvmOptions,omitempty"`

	// LivenessProbe Pod liveness checking for the Cruise Control container.
	LivenessProbe *LivenessProbe `json:"livenessProbe,omitempty"`

	// Logging Logging configuration (log4j1) for Cruise Control.
	Logging *Logging `json:"logging,omitempty"`

	// Metrics The Prometheus JMX Exporter configuration. See https://github.com/prometheus/jmx_exporter for details of the structure of this configuration.
	Metrics *Metrics `json:"metrics,omitempty"`

	// MetricsConfig Metrics configuration.
	MetricsConfig *MetricsConfig `json:"metricsConfig,omitempty"`

	// ReadinessProbe Pod readiness checking for the Cruise Control container.
	ReadinessProbe *ReadinessProbe `json:"readinessProbe,omitempty"`

	// Resources CPU and memory resources to reserve for the Cruise Control container.
	Resources *Resources `json:"resources,omitempty"`

	// Template Template to specify how Cruise Control resources, `Deployments` and `Pods`, are generated.
	Template *Template `json:"template,omitempty"`

	// TlsSidecar TLS sidecar configuration.
	TlsSidecar *TlsSidecar `json:"tlsSidecar,omitempty"`

}

// CruiseControlContainer Template for the Cruise Control container.
type CruiseControlContainer struct {
	// Env Environment variables which should be applied to the container.
	Env []*EnvItems `json:"env,omitempty"`

	// SecurityContext Security context for the container.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

}

// Deployment Template for Kafka Exporter `Deployment`.
type Deployment struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// DnsAnnotations Annotations that will be added to the `Service` resources for individual brokers. You can use this field to configure DNS providers such as External DNS.
type DnsAnnotations struct {
}

// EntityOperator Configuration of the Entity Operator.
type EntityOperator struct {
	// Affinity The pod's affinity rules.
	Affinity *Affinity `json:"affinity,omitempty"`

	// Template Template for Entity Operator resources. The template allows users to specify how is the `Deployment` and `Pods` generated.
	Template *Template `json:"template,omitempty"`

	// TlsSidecar TLS sidecar configuration.
	TlsSidecar *TlsSidecar `json:"tlsSidecar,omitempty"`

	// Tolerations The pod's tolerations.
	Tolerations []*TolerationsItems `json:"tolerations,omitempty"`

	// TopicOperator Configuration of the Topic Operator.
	TopicOperator *TopicOperator `json:"topicOperator,omitempty"`

	// UserOperator Configuration of the User Operator.
	UserOperator *UserOperator `json:"userOperator,omitempty"`

}

// EnvItems 
type EnvItems struct {
	// Name The environment variable key.
	Name string `json:"name,omitempty"`

	// Value The environment variable value.
	Value string `json:"value,omitempty"`

}

// External Configures external listener on port 9094.
type External struct {
	// Authentication Authentication configuration for Kafka brokers.
	Authentication *Authentication `json:"authentication,omitempty"`

	// Class Configures the `Ingress` class that defines which `Ingress` controller will be used. If not set, the `Ingress` class is set to `nginx`.
	Class string `json:"class,omitempty"`

	// Configuration External listener configuration.
	Configuration *Configuration `json:"configuration,omitempty"`

	// NetworkPolicyPeers List of peers which should be able to connect to this listener. Peers in this list are combined using a logical OR operation. If this field is empty or missing, all connections will be allowed for this listener. If this field is present and contains at least one item, the listener only allows the traffic which matches at least one item in this list.
	NetworkPolicyPeers []*NetworkPolicyPeersItems `json:"networkPolicyPeers,omitempty"`

	// Overrides Overrides for external bootstrap and broker services and externally advertised addresses.
	Overrides *Overrides `json:"overrides,omitempty"`

	// Tls Enables TLS encryption on the listener. By default set to `true` for enabled TLS encryption.
	Tls bool `json:"tls,omitempty"`

	// Type Type of the external listener. Currently the supported types are `route`, `loadbalancer`, and `nodeport`. 
// 
// * `route` type uses OpenShift Routes to expose Kafka.* `loadbalancer` type uses LoadBalancer type services to expose Kafka.* `nodeport` type uses NodePort type services to expose Kafka..
	Type string `json:"type"`

}

// ExternalBootstrapIngress Template for Kafka external bootstrap `Ingress`.
type ExternalBootstrapIngress struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// ExternalBootstrapRoute Template for Kafka external bootstrap `Route`.
type ExternalBootstrapRoute struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// ExternalBootstrapService Template for Kafka external bootstrap `Service`.
type ExternalBootstrapService struct {
	// ExternalTrafficPolicy Specifies whether the service routes external traffic to node-local or cluster-wide endpoints. `Cluster` may cause a second hop to another node and obscures the client source IP. `Local` avoids a second hop for LoadBalancer and Nodeport type services and preserves the client source IP (when supported by the infrastructure). If unspecified, Kubernetes will use `Cluster` as the default.
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty"`

	// LoadBalancerSourceRanges A list of CIDR ranges (for example `10.0.0.0/8` or `130.211.204.1/32`) from which clients can connect to load balancer type listeners. If supported by the platform, traffic through the loadbalancer is restricted to the specified CIDR ranges. This field is applicable only for loadbalancer type services and is ignored if the cloud provider does not support the feature. For more information, see https://v1-17.docs.kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/. 
	LoadBalancerSourceRanges []string `json:"loadBalancerSourceRanges,omitempty"`

	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// HostAliasesItems 
type HostAliasesItems struct {
	// Hostnames 
	Hostnames []string `json:"hostnames,omitempty"`

	// Ip 
	Ip string `json:"ip,omitempty"`

}

// ImagePullSecretsItems 
type ImagePullSecretsItems struct {
	// Name 
	Name string `json:"name,omitempty"`

}

// InitContainer Template for the Kafka init container.
type InitContainer struct {
	// Env Environment variables which should be applied to the container.
	Env []*EnvItems `json:"env,omitempty"`

	// SecurityContext Security context for the container.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

}

// IpBlock 
type IpBlock struct {
	// Cidr 
	Cidr string `json:"cidr,omitempty"`

	// Except 
	Except []string `json:"except,omitempty"`

}

// JavaSystemPropertiesItems 
type JavaSystemPropertiesItems struct {
	// Name The system property name.
	Name string `json:"name,omitempty"`

	// Value The system property value.
	Value string `json:"value,omitempty"`

}

// JmxOptions JMX Options for Kafka brokers.
type JmxOptions struct {
	// Authentication Authentication configuration for connecting to the Kafka JMX port.
	Authentication *Authentication `json:"authentication,omitempty"`

}

// JmxTrans Configuration for JmxTrans. When the property is present a JmxTrans deployment is created for gathering JMX metrics from each Kafka broker. For more information see https://github.com/jmxtrans/jmxtrans[JmxTrans GitHub].
type JmxTrans struct {
	// Image The image to use for the JmxTrans.
	Image string `json:"image,omitempty"`

	// KafkaQueries Queries to send to the Kafka brokers to define what data should be read from each broker. For more information on these properties see, xref:type-JmxTransQueryTemplate-reference[`JmxTransQueryTemplate` schema reference].
	KafkaQueries []*KafkaQueriesItems `json:"kafkaQueries"`

	// LogLevel Sets the logging level of the JmxTrans deployment.For more information see, https://github.com/jmxtrans/jmxtrans-agent/wiki/Troubleshooting[JmxTrans Logging Level].
	LogLevel string `json:"logLevel,omitempty"`

	// OutputDefinitions Defines the output hosts that will be referenced later on. For more information on these properties see, xref:type-JmxTransOutputDefinitionTemplate-reference[`JmxTransOutputDefinitionTemplate` schema reference].
	OutputDefinitions []*OutputDefinitionsItems `json:"outputDefinitions"`

	// Resources CPU and memory resources to reserve.
	Resources *Resources `json:"resources,omitempty"`

	// Template Template for JmxTrans resources.
	Template *Template `json:"template,omitempty"`

}

// JvmOptions JVM Options for pods.
type JvmOptions struct {
	// GcLoggingEnabled Specifies whether the Garbage Collection logging is enabled. The default is false.
	GcLoggingEnabled bool `json:"gcLoggingEnabled,omitempty"`

	// JavaSystemProperties A map of additional system properties which will be passed using the `-D` option to the JVM.
	JavaSystemProperties []*JavaSystemPropertiesItems `json:"javaSystemProperties,omitempty"`

	// XX A map of -XX options to the JVM.
	XX *XX `json:"-XX,omitempty"`

	// Xms -Xms option to to the JVM.
	Xms string `json:"-Xms,omitempty"`

	// Xmx -Xmx option to to the JVM.
	Xmx string `json:"-Xmx,omitempty"`

}

// Kafka 
type Kafka struct {
	// Spec The specification of the Kafka and ZooKeeper clusters, and Topic Operator.
	Spec *Spec `json:"spec,omitempty"`

	// Status The status of the Kafka and ZooKeeper clusters, and Topic Operator.
	Status *Status `json:"status,omitempty"`

}

// KafkaContainer Template for the Kafka broker container.
type KafkaContainer struct {
	// Env Environment variables which should be applied to the container.
	Env []*EnvItems `json:"env,omitempty"`

	// SecurityContext Security context for the container.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

}

// KafkaExporter Configuration of the Kafka Exporter. Kafka Exporter can provide additional metrics, for example lag of consumer group at topic/partition.
type KafkaExporter struct {
	// EnableSaramaLogging Enable Sarama logging, a Go client library used by the Kafka Exporter.
	EnableSaramaLogging bool `json:"enableSaramaLogging,omitempty"`

	// GroupRegex Regular expression to specify which consumer groups to collect. Default value is `.*`.
	GroupRegex string `json:"groupRegex,omitempty"`

	// Image The docker image for the pods.
	Image string `json:"image,omitempty"`

	// LivenessProbe Pod liveness check.
	LivenessProbe *LivenessProbe `json:"livenessProbe,omitempty"`

	// Logging Only log messages with the given severity or above. Valid levels: [`debug`, `info`, `warn`, `error`, `fatal`]. Default log level is `info`.
	Logging string `json:"logging,omitempty"`

	// ReadinessProbe Pod readiness check.
	ReadinessProbe *ReadinessProbe `json:"readinessProbe,omitempty"`

	// Resources CPU and memory resources to reserve.
	Resources *Resources `json:"resources,omitempty"`

	// Template Customization of deployment templates and pods.
	Template *Template `json:"template,omitempty"`

	// TopicRegex Regular expression to specify which topics to collect. Default value is `.*`.
	TopicRegex string `json:"topicRegex,omitempty"`

}

// KafkaQueriesItems 
type KafkaQueriesItems struct {
	// Attributes Determine which attributes of the targeted MBean should be included.
	Attributes []string `json:"attributes"`

	// Outputs List of the names of output definitions specified in the spec.kafka.jmxTrans.outputDefinitions that have defined where JMX metrics are pushed to, and in which data format.
	Outputs []string `json:"outputs"`

	// TargetMBean If using wildcards instead of a specific MBean then the data is gathered from multiple MBeans. Otherwise if specifying an MBean then data is gathered from that specified MBean.
	TargetMBean string `json:"targetMBean"`

}

// LabelSelector 
type LabelSelector struct {
	// MatchExpressions 
	MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`

	// MatchLabels 
	MatchLabels *MatchLabels `json:"matchLabels,omitempty"`

}

// Labels Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type Labels struct {
}

// Limits 
type Limits struct {
}

// Listeners 
type Listeners struct {
	// External Configures external listener on port 9094.
	External *External `json:"external,omitempty"`

	// Plain Configures plain listener on port 9092.
	Plain *Plain `json:"plain,omitempty"`

	// Tls Configures TLS listener on port 9093.
	Tls *Tls `json:"tls,omitempty"`

}

// ListenersItems 
type ListenersItems struct {
	// Addresses A list of the addresses for this listener.
	Addresses []*AddressesItems `json:"addresses,omitempty"`

	// BootstrapServers A comma-separated list of `host:port` pairs for connecting to the Kafka cluster using this listener.
	BootstrapServers string `json:"bootstrapServers,omitempty"`

	// Certificates A list of TLS certificates which can be used to verify the identity of the server when connecting to the given listener. Set only for `tls` and `external` listeners.
	Certificates []string `json:"certificates,omitempty"`

	// Type The type of the listener. Can be one of the following three types: `plain`, `tls`, and `external`.
	Type string `json:"type,omitempty"`

}

// LivenessProbe Pod liveness checking.
type LivenessProbe struct {
	// FailureThreshold Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold int `json:"failureThreshold,omitempty"`

	// InitialDelaySeconds The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds int `json:"initialDelaySeconds,omitempty"`

	// PeriodSeconds How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds int `json:"periodSeconds,omitempty"`

	// SuccessThreshold Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold int `json:"successThreshold,omitempty"`

	// TimeoutSeconds The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds int `json:"timeoutSeconds,omitempty"`

}

// Loggers A Map from logger name to logger level.
type Loggers struct {
}

// Logging Logging configuration for ZooKeeper.
type Logging struct {
	// Loggers A Map from logger name to logger level.
	Loggers *Loggers `json:"loggers,omitempty"`

	// Name The name of the `ConfigMap` from which to get the logging configuration.
	Name string `json:"name,omitempty"`

	// Type Logging type, must be either 'inline' or 'external'.
	Type string `json:"type"`

}

// MatchExpressionsItems 
type MatchExpressionsItems struct {
	// Key 
	Key string `json:"key,omitempty"`

	// Operator 
	Operator string `json:"operator,omitempty"`

	// Values 
	Values []string `json:"values,omitempty"`

}

// MatchFieldsItems 
type MatchFieldsItems struct {
	// Key 
	Key string `json:"key,omitempty"`

	// Operator 
	Operator string `json:"operator,omitempty"`

	// Values 
	Values []string `json:"values,omitempty"`

}

// MatchLabels 
type MatchLabels struct {
}

// Metadata Metadata applied to the resource.
type Metadata struct {
	// Annotations Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *Annotations `json:"annotations,omitempty"`

	// Labels Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *Labels `json:"labels,omitempty"`

}

// Metrics The Prometheus JMX Exporter configuration. See https://github.com/prometheus/jmx_exporter for details of the structure of this configuration.
type Metrics struct {
}

// MetricsConfig Metrics configuration.
type MetricsConfig struct {
	// Type Metrics type. Only 'jmxPrometheusExporter' supported currently.
	Type string `json:"type"`

	// ValueFrom ConfigMap where the Prometheus JMX Exporter configuration is stored. For details of the structure of this configuration, see the {JMXExporter}.
	ValueFrom *ValueFrom `json:"valueFrom"`

}

// NamespaceSelector 
type NamespaceSelector struct {
	// MatchExpressions 
	MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`

	// MatchLabels 
	MatchLabels *MatchLabels `json:"matchLabels,omitempty"`

}

// NetworkPolicyPeersItems 
type NetworkPolicyPeersItems struct {
	// IpBlock 
	IpBlock *IpBlock `json:"ipBlock,omitempty"`

	// NamespaceSelector 
	NamespaceSelector *NamespaceSelector `json:"namespaceSelector,omitempty"`

	// PodSelector 
	PodSelector *PodSelector `json:"podSelector,omitempty"`

}

// NodeAffinity 
type NodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution 
	PreferredDuringSchedulingIgnoredDuringExecution []*PreferredDuringSchedulingIgnoredDuringExecutionItems `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution 
	RequiredDuringSchedulingIgnoredDuringExecution *RequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`

}

// NodeSelectorTermsItems 
type NodeSelectorTermsItems struct {
	// MatchExpressions 
	MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`

	// MatchFields 
	MatchFields []*MatchFieldsItems `json:"matchFields,omitempty"`

}

// NodesService Template for ZooKeeper nodes `Service`.
type NodesService struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// OutputDefinitionsItems 
type OutputDefinitionsItems struct {
	// FlushDelayInSeconds How many seconds the JmxTrans waits before pushing a new set of data out.
	FlushDelayInSeconds int `json:"flushDelayInSeconds,omitempty"`

	// Host The DNS/hostname of the remote host that the data is pushed to.
	Host string `json:"host,omitempty"`

	// Name Template for setting the name of the output definition. This is used to identify where to send the results of queries should be sent.
	Name string `json:"name"`

	// OutputType Template for setting the format of the data that will be pushed.For more information see https://github.com/jmxtrans/jmxtrans/wiki/OutputWriters[JmxTrans OutputWriters].
	OutputType string `json:"outputType"`

	// Port The port of the remote host that the data is pushed to.
	Port int `json:"port,omitempty"`

	// TypeNames Template for filtering data to be included in response to a wildcard query. For more information see https://github.com/jmxtrans/jmxtrans/wiki/Queries[JmxTrans queries].
	TypeNames []string `json:"typeNames,omitempty"`

}

// Overrides Overrides for external bootstrap and broker services and externally advertised addresses.
type Overrides struct {
	// Bootstrap External bootstrap service configuration.
	Bootstrap *Bootstrap `json:"bootstrap,omitempty"`

	// Brokers External broker services configuration.
	Brokers []*BrokersItems `json:"brokers,omitempty"`

}

// OverridesItems 
type OverridesItems struct {
	// Broker Id of the kafka broker (broker identifier).
	Broker int `json:"broker,omitempty"`

	// Class The storage class to use for dynamic volume allocation for this broker.
	Class string `json:"class,omitempty"`

}

// PerPodIngress Template for Kafka per-pod `Ingress` used for access from outside of Kubernetes.
type PerPodIngress struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// PerPodRoute Template for Kafka per-pod `Routes` used for access from outside of OpenShift.
type PerPodRoute struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// PerPodService Template for Kafka per-pod `Services` used for access from outside of Kubernetes.
type PerPodService struct {
	// ExternalTrafficPolicy Specifies whether the service routes external traffic to node-local or cluster-wide endpoints. `Cluster` may cause a second hop to another node and obscures the client source IP. `Local` avoids a second hop for LoadBalancer and Nodeport type services and preserves the client source IP (when supported by the infrastructure). If unspecified, Kubernetes will use `Cluster` as the default.
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty"`

	// LoadBalancerSourceRanges A list of CIDR ranges (for example `10.0.0.0/8` or `130.211.204.1/32`) from which clients can connect to load balancer type listeners. If supported by the platform, traffic through the loadbalancer is restricted to the specified CIDR ranges. This field is applicable only for loadbalancer type services and is ignored if the cloud provider does not support the feature. For more information, see https://v1-17.docs.kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/. 
	LoadBalancerSourceRanges []string `json:"loadBalancerSourceRanges,omitempty"`

	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// PersistentVolumeClaim Template for all ZooKeeper `PersistentVolumeClaims`.
type PersistentVolumeClaim struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// Plain Configures plain listener on port 9092.
type Plain struct {
	// Authentication Authentication configuration for this listener. Since this listener does not use TLS transport you cannot configure an authentication with `type: tls`.
	Authentication *Authentication `json:"authentication,omitempty"`

	// NetworkPolicyPeers List of peers which should be able to connect to this listener. Peers in this list are combined using a logical OR operation. If this field is empty or missing, all connections will be allowed for this listener. If this field is present and contains at least one item, the listener only allows the traffic which matches at least one item in this list.
	NetworkPolicyPeers []*NetworkPolicyPeersItems `json:"networkPolicyPeers,omitempty"`

}

// Pod Template for ZooKeeper `Pods`.
type Pod struct {
	// Affinity The pod's affinity rules.
	Affinity *Affinity `json:"affinity,omitempty"`

	// HostAliases The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.
	HostAliases []*HostAliasesItems `json:"hostAliases,omitempty"`

	// ImagePullSecrets List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []*ImagePullSecretsItems `json:"imagePullSecrets,omitempty"`

	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// PriorityClassName The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.
	PriorityClassName string `json:"priorityClassName,omitempty"`

	// SchedulerName The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.
	SchedulerName string `json:"schedulerName,omitempty"`

	// SecurityContext Configures pod-level security attributes and common container settings.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

	// TerminationGracePeriodSeconds The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
	TerminationGracePeriodSeconds int `json:"terminationGracePeriodSeconds,omitempty"`

	// Tolerations The pod's tolerations.
	Tolerations []*TolerationsItems `json:"tolerations,omitempty"`

	// TopologySpreadConstraints The pod's topology spread constraints.
	TopologySpreadConstraints []*TopologySpreadConstraintsItems `json:"topologySpreadConstraints,omitempty"`

}

// PodAffinity 
type PodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution 
	PreferredDuringSchedulingIgnoredDuringExecution []*PreferredDuringSchedulingIgnoredDuringExecutionItems `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution 
	RequiredDuringSchedulingIgnoredDuringExecution []*RequiredDuringSchedulingIgnoredDuringExecutionItems `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`

}

// PodAffinityTerm 
type PodAffinityTerm struct {
	// LabelSelector 
	LabelSelector *LabelSelector `json:"labelSelector,omitempty"`

	// Namespaces 
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey 
	TopologyKey string `json:"topologyKey,omitempty"`

}

// PodAntiAffinity 
type PodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution 
	PreferredDuringSchedulingIgnoredDuringExecution []*PreferredDuringSchedulingIgnoredDuringExecutionItems `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution 
	RequiredDuringSchedulingIgnoredDuringExecution []*RequiredDuringSchedulingIgnoredDuringExecutionItems `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`

}

// PodDisruptionBudget Template for ZooKeeper `PodDisruptionBudget`.
type PodDisruptionBudget struct {
	// MaxUnavailable Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.
	MaxUnavailable int `json:"maxUnavailable,omitempty"`

	// Metadata Metadata to apply to the `PodDistruptionBugetTemplate` resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// PodSelector 
type PodSelector struct {
	// MatchExpressions 
	MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`

	// MatchLabels 
	MatchLabels *MatchLabels `json:"matchLabels,omitempty"`

}

// Preference 
type Preference struct {
	// MatchExpressions 
	MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`

	// MatchFields 
	MatchFields []*MatchFieldsItems `json:"matchFields,omitempty"`

}

// PreferredDuringSchedulingIgnoredDuringExecutionItems 
type PreferredDuringSchedulingIgnoredDuringExecutionItems struct {
	// PodAffinityTerm 
	PodAffinityTerm *PodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight 
	Weight int `json:"weight,omitempty"`

}

// Rack Configuration of the `broker.rack` broker config.
type Rack struct {
	// TopologyKey A key that matches labels assigned to the Kubernetes cluster nodes. The value of the label is used to set the broker's `broker.rack` config and `client.rack` in Kafka Connect.
	TopologyKey string `json:"topologyKey"`

}

// ReadinessProbe Pod readiness checking.
type ReadinessProbe struct {
	// FailureThreshold Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold int `json:"failureThreshold,omitempty"`

	// InitialDelaySeconds The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds int `json:"initialDelaySeconds,omitempty"`

	// PeriodSeconds How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds int `json:"periodSeconds,omitempty"`

	// SuccessThreshold Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold int `json:"successThreshold,omitempty"`

	// TimeoutSeconds The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds int `json:"timeoutSeconds,omitempty"`

}

// Requests 
type Requests struct {
}

// RequiredDuringSchedulingIgnoredDuringExecution 
type RequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms 
	NodeSelectorTerms []*NodeSelectorTermsItems `json:"nodeSelectorTerms,omitempty"`

}

// RequiredDuringSchedulingIgnoredDuringExecutionItems 
type RequiredDuringSchedulingIgnoredDuringExecutionItems struct {
	// LabelSelector 
	LabelSelector *LabelSelector `json:"labelSelector,omitempty"`

	// Namespaces 
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey 
	TopologyKey string `json:"topologyKey,omitempty"`

}

// Resources CPU and memory resources to reserve.
type Resources struct {
	// Limits 
	Limits *Limits `json:"limits,omitempty"`

	// Requests 
	Requests *Requests `json:"requests,omitempty"`

}

// SeLinuxOptions 
type SeLinuxOptions struct {
	// Level 
	Level string `json:"level,omitempty"`

	// Role 
	Role string `json:"role,omitempty"`

	// Type 
	Type string `json:"type,omitempty"`

	// User 
	User string `json:"user,omitempty"`

}

// SeccompProfile 
type SeccompProfile struct {
	// LocalhostProfile 
	LocalhostProfile string `json:"localhostProfile,omitempty"`

	// Type 
	Type string `json:"type,omitempty"`

}

// SecurityContext Security context for the container.
type SecurityContext struct {
	// AllowPrivilegeEscalation 
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities 
	Capabilities *Capabilities `json:"capabilities,omitempty"`

	// Privileged 
	Privileged bool `json:"privileged,omitempty"`

	// ProcMount 
	ProcMount string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem 
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup 
	RunAsGroup int `json:"runAsGroup,omitempty"`

	// RunAsNonRoot 
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser 
	RunAsUser int `json:"runAsUser,omitempty"`

	// SeLinuxOptions 
	SeLinuxOptions *SeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile 
	SeccompProfile *SeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions 
	WindowsOptions *WindowsOptions `json:"windowsOptions,omitempty"`

}

// Selector Specifies a specific persistent volume to use. It contains key:value pairs representing labels for selecting such a volume.
type Selector struct {
}

// Service Template for Kafka Exporter `Service`.
type Service struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// Spec The specification of the Kafka and ZooKeeper clusters, and Topic Operator.
type Spec struct {
	// ClientsCa Configuration of the clients certificate authority.
	ClientsCa *ClientsCa `json:"clientsCa,omitempty"`

	// ClusterCa Configuration of the cluster certificate authority.
	ClusterCa *ClusterCa `json:"clusterCa,omitempty"`

	// CruiseControl Configuration for Cruise Control deployment. Deploys a Cruise Control instance when specified.
	CruiseControl *CruiseControl `json:"cruiseControl,omitempty"`

	// EntityOperator Configuration of the Entity Operator.
	EntityOperator *EntityOperator `json:"entityOperator,omitempty"`

	// JmxTrans Configuration for JmxTrans. When the property is present a JmxTrans deployment is created for gathering JMX metrics from each Kafka broker. For more information see https://github.com/jmxtrans/jmxtrans[JmxTrans GitHub].
	JmxTrans *JmxTrans `json:"jmxTrans,omitempty"`

	// Kafka Configuration of the Kafka cluster.
	Kafka *Kafka `json:"kafka"`

	// KafkaExporter Configuration of the Kafka Exporter. Kafka Exporter can provide additional metrics, for example lag of consumer group at topic/partition.
	KafkaExporter *KafkaExporter `json:"kafkaExporter,omitempty"`

	// MaintenanceTimeWindows A list of time windows for maintenance tasks (that is, certificates renewal). Each time window is defined by a cron expression.
	MaintenanceTimeWindows []string `json:"maintenanceTimeWindows,omitempty"`

	// TopicOperator Configuration of the Topic Operator.
	TopicOperator *TopicOperator `json:"topicOperator,omitempty"`

	// Zookeeper Configuration of the ZooKeeper cluster.
	Zookeeper *Zookeeper `json:"zookeeper"`

}

// Statefulset Template for ZooKeeper `StatefulSet`.
type Statefulset struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// PodManagementPolicy PodManagementPolicy which will be used for this StatefulSet. Valid values are `Parallel` and `OrderedReady`. Defaults to `Parallel`.
	PodManagementPolicy string `json:"podManagementPolicy,omitempty"`

}

// Status The status of the Kafka and ZooKeeper clusters, and Topic Operator.
type Status struct {
	// ClusterId Kafka cluster Id.
	ClusterId string `json:"clusterId,omitempty"`

	// Conditions List of status conditions.
	Conditions []*ConditionsItems `json:"conditions,omitempty"`

	// Listeners Addresses of the internal and external listeners.
	Listeners []*ListenersItems `json:"listeners,omitempty"`

	// ObservedGeneration The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration int `json:"observedGeneration,omitempty"`

}

// Storage Storage configuration (disk). Cannot be updated.
type Storage struct {
	// Class The storage class to use for dynamic volume allocation.
	Class string `json:"class,omitempty"`

	// DeleteClaim Specifies if the persistent volume claim has to be deleted when the cluster is un-deployed.
	DeleteClaim bool `json:"deleteClaim,omitempty"`

	// Id Storage identification number. It is mandatory only for storage volumes defined in a storage of type 'jbod'.
	Id int `json:"id,omitempty"`

	// Overrides Overrides for individual brokers. The `overrides` field allows to specify a different configuration for different brokers.
	Overrides []*OverridesItems `json:"overrides,omitempty"`

	// Selector Specifies a specific persistent volume to use. It contains key:value pairs representing labels for selecting such a volume.
	Selector *Selector `json:"selector,omitempty"`

	// Size When type=persistent-claim, defines the size of the persistent volume claim (i.e 1Gi). Mandatory when type=persistent-claim.
	Size string `json:"size,omitempty"`

	// SizeLimit When type=ephemeral, defines the total amount of local storage required for this EmptyDir volume (for example 1Gi).
	SizeLimit string `json:"sizeLimit,omitempty"`

	// Type Storage type, must be either 'ephemeral' or 'persistent-claim'.
	Type string `json:"type"`

}

// SysctlsItems 
type SysctlsItems struct {
	// Name 
	Name string `json:"name,omitempty"`

	// Value 
	Value string `json:"value,omitempty"`

}

// Template Template for ZooKeeper cluster resources. The template allows users to specify how are the `StatefulSet`, `Pods` and `Services` generated.
type Template struct {
	// ClientService Template for ZooKeeper client `Service`.
	ClientService *ClientService `json:"clientService,omitempty"`

	// NodesService Template for ZooKeeper nodes `Service`.
	NodesService *NodesService `json:"nodesService,omitempty"`

	// PersistentVolumeClaim Template for all ZooKeeper `PersistentVolumeClaims`.
	PersistentVolumeClaim *PersistentVolumeClaim `json:"persistentVolumeClaim,omitempty"`

	// Pod Template for ZooKeeper `Pods`.
	Pod *Pod `json:"pod,omitempty"`

	// PodDisruptionBudget Template for ZooKeeper `PodDisruptionBudget`.
	PodDisruptionBudget *PodDisruptionBudget `json:"podDisruptionBudget,omitempty"`

	// Statefulset Template for ZooKeeper `StatefulSet`.
	Statefulset *Statefulset `json:"statefulset,omitempty"`

	// TlsSidecarContainer Template for the Zookeeper server TLS sidecar container. The TLS sidecar is not used anymore and this option will be ignored.
	TlsSidecarContainer *TlsSidecarContainer `json:"tlsSidecarContainer,omitempty"`

	// ZookeeperContainer Template for the ZooKeeper container.
	ZookeeperContainer *ZookeeperContainer `json:"zookeeperContainer,omitempty"`

}

// Tls Configures TLS listener on port 9093.
type Tls struct {
	// Authentication Authentication configuration for this listener.
	Authentication *Authentication `json:"authentication,omitempty"`

	// Configuration Configuration of TLS listener.
	Configuration *Configuration `json:"configuration,omitempty"`

	// NetworkPolicyPeers List of peers which should be able to connect to this listener. Peers in this list are combined using a logical OR operation. If this field is empty or missing, all connections will be allowed for this listener. If this field is present and contains at least one item, the listener only allows the traffic which matches at least one item in this list.
	NetworkPolicyPeers []*NetworkPolicyPeersItems `json:"networkPolicyPeers,omitempty"`

}

// TlsSidecar TLS sidecar configuration. The TLS sidecar is not used anymore and this option will be ignored.
type TlsSidecar struct {
	// Image The docker image for the container.
	Image string `json:"image,omitempty"`

	// LivenessProbe Pod liveness checking.
	LivenessProbe *LivenessProbe `json:"livenessProbe,omitempty"`

	// LogLevel The log level for the TLS sidecar. Default value is `notice`.
	LogLevel string `json:"logLevel,omitempty"`

	// ReadinessProbe Pod readiness checking.
	ReadinessProbe *ReadinessProbe `json:"readinessProbe,omitempty"`

	// Resources CPU and memory resources to reserve.
	Resources *Resources `json:"resources,omitempty"`

}

// TlsSidecarContainer Template for the Zookeeper server TLS sidecar container. The TLS sidecar is not used anymore and this option will be ignored.
type TlsSidecarContainer struct {
	// Env Environment variables which should be applied to the container.
	Env []*EnvItems `json:"env,omitempty"`

	// SecurityContext Security context for the container.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

}

// TlsTrustedCertificatesItems 
type TlsTrustedCertificatesItems struct {
	// Certificate The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// SecretName The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`

}

// TolerationsItems 
type TolerationsItems struct {
	// Effect 
	Effect string `json:"effect,omitempty"`

	// Key 
	Key string `json:"key,omitempty"`

	// Operator 
	Operator string `json:"operator,omitempty"`

	// TolerationSeconds 
	TolerationSeconds int `json:"tolerationSeconds,omitempty"`

	// Value 
	Value string `json:"value,omitempty"`

}

// TopicOperator Configuration of the Topic Operator.
type TopicOperator struct {
	// Affinity Pod affinity rules.
	Affinity *Affinity `json:"affinity,omitempty"`

	// Image The image to use for the Topic Operator.
	Image string `json:"image,omitempty"`

	// JvmOptions JVM Options for pods.
	JvmOptions *JvmOptions `json:"jvmOptions,omitempty"`

	// LivenessProbe Pod liveness checking.
	LivenessProbe *LivenessProbe `json:"livenessProbe,omitempty"`

	// Logging Logging configuration.
	Logging *Logging `json:"logging,omitempty"`

	// ReadinessProbe Pod readiness checking.
	ReadinessProbe *ReadinessProbe `json:"readinessProbe,omitempty"`

	// ReconciliationIntervalSeconds Interval between periodic reconciliations.
	ReconciliationIntervalSeconds int `json:"reconciliationIntervalSeconds,omitempty"`

	// Resources CPU and memory resources to reserve.
	Resources *Resources `json:"resources,omitempty"`

	// TlsSidecar TLS sidecar configuration.
	TlsSidecar *TlsSidecar `json:"tlsSidecar,omitempty"`

	// TopicMetadataMaxAttempts The number of attempts at getting topic metadata.
	TopicMetadataMaxAttempts int `json:"topicMetadataMaxAttempts,omitempty"`

	// WatchedNamespace The namespace the Topic Operator should watch.
	WatchedNamespace string `json:"watchedNamespace,omitempty"`

	// ZookeeperSessionTimeoutSeconds Timeout for the ZooKeeper session.
	ZookeeperSessionTimeoutSeconds int `json:"zookeeperSessionTimeoutSeconds,omitempty"`

}

// TopicOperatorContainer Template for the Entity Topic Operator container.
type TopicOperatorContainer struct {
	// Env Environment variables which should be applied to the container.
	Env []*EnvItems `json:"env,omitempty"`

	// SecurityContext Security context for the container.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

}

// TopologySpreadConstraintsItems 
type TopologySpreadConstraintsItems struct {
	// LabelSelector 
	LabelSelector *LabelSelector `json:"labelSelector,omitempty"`

	// MaxSkew 
	MaxSkew int `json:"maxSkew,omitempty"`

	// TopologyKey 
	TopologyKey string `json:"topologyKey,omitempty"`

	// WhenUnsatisfiable 
	WhenUnsatisfiable string `json:"whenUnsatisfiable,omitempty"`

}

// UserOperator Configuration of the User Operator.
type UserOperator struct {
	// Image The image to use for the User Operator.
	Image string `json:"image,omitempty"`

	// JvmOptions JVM Options for pods.
	JvmOptions *JvmOptions `json:"jvmOptions,omitempty"`

	// LivenessProbe Pod liveness checking.
	LivenessProbe *LivenessProbe `json:"livenessProbe,omitempty"`

	// Logging Logging configuration.
	Logging *Logging `json:"logging,omitempty"`

	// ReadinessProbe Pod readiness checking.
	ReadinessProbe *ReadinessProbe `json:"readinessProbe,omitempty"`

	// ReconciliationIntervalSeconds Interval between periodic reconciliations.
	ReconciliationIntervalSeconds int `json:"reconciliationIntervalSeconds,omitempty"`

	// Resources CPU and memory resources to reserve.
	Resources *Resources `json:"resources,omitempty"`

	// SecretPrefix The prefix that will be added to the KafkaUser name to be used as the Secret name.
	SecretPrefix string `json:"secretPrefix,omitempty"`

	// WatchedNamespace The namespace the User Operator should watch.
	WatchedNamespace string `json:"watchedNamespace,omitempty"`

	// ZookeeperSessionTimeoutSeconds Timeout for the ZooKeeper session.
	ZookeeperSessionTimeoutSeconds int `json:"zookeeperSessionTimeoutSeconds,omitempty"`

}

// UserOperatorContainer Template for the Entity User Operator container.
type UserOperatorContainer struct {
	// Env Environment variables which should be applied to the container.
	Env []*EnvItems `json:"env,omitempty"`

	// SecurityContext Security context for the container.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

}

// ValueFrom ConfigMap where the Prometheus JMX Exporter configuration is stored. For details of the structure of this configuration, see the {JMXExporter}.
type ValueFrom struct {
	// ConfigMapKeyRef Reference to the key in the ConfigMap containing the metrics configuration.
	ConfigMapKeyRef *ConfigMapKeyRef `json:"configMapKeyRef,omitempty"`

}

// VolumesItems 
type VolumesItems struct {
	// Class The storage class to use for dynamic volume allocation.
	Class string `json:"class,omitempty"`

	// DeleteClaim Specifies if the persistent volume claim has to be deleted when the cluster is un-deployed.
	DeleteClaim bool `json:"deleteClaim,omitempty"`

	// Id Storage identification number. It is mandatory only for storage volumes defined in a storage of type 'jbod'.
	Id int `json:"id,omitempty"`

	// Overrides Overrides for individual brokers. The `overrides` field allows to specify a different configuration for different brokers.
	Overrides []*OverridesItems `json:"overrides,omitempty"`

	// Selector Specifies a specific persistent volume to use. It contains key:value pairs representing labels for selecting such a volume.
	Selector *Selector `json:"selector,omitempty"`

	// Size When type=persistent-claim, defines the size of the persistent volume claim (i.e 1Gi). Mandatory when type=persistent-claim.
	Size string `json:"size,omitempty"`

	// SizeLimit When type=ephemeral, defines the total amount of local storage required for this EmptyDir volume (for example 1Gi).
	SizeLimit string `json:"sizeLimit,omitempty"`

	// Type Storage type, must be either 'ephemeral' or 'persistent-claim'.
	Type string `json:"type"`

}

// WindowsOptions 
type WindowsOptions struct {
	// GmsaCredentialSpec 
	GmsaCredentialSpec string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName 
	GmsaCredentialSpecName string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName 
	RunAsUserName string `json:"runAsUserName,omitempty"`

}

// XX A map of -XX options to the JVM.
type XX struct {
}

// Zookeeper Configuration of the ZooKeeper cluster.
type Zookeeper struct {
	// Affinity The pod's affinity rules.
	Affinity *Affinity `json:"affinity,omitempty"`

	// Config The ZooKeeper broker config. Properties with the following prefixes cannot be set: server., dataDir, dataLogDir, clientPort, authProvider, quorum.auth, requireClientAuthScheme, snapshot.trust.empty, standaloneEnabled, reconfigEnabled, 4lw.commands.whitelist, secureClientPort, ssl., serverCnxnFactory, sslQuorum (with the exception of: ssl.protocol, ssl.quorum.protocol, ssl.enabledProtocols, ssl.quorum.enabledProtocols, ssl.ciphersuites, ssl.quorum.ciphersuites, ssl.hostnameVerification, ssl.quorum.hostnameVerification).
	Config *Config `json:"config,omitempty"`

	// Image The docker image for the pods.
	Image string `json:"image,omitempty"`

	// JvmOptions JVM Options for pods.
	JvmOptions *JvmOptions `json:"jvmOptions,omitempty"`

	// LivenessProbe Pod liveness checking.
	LivenessProbe *LivenessProbe `json:"livenessProbe,omitempty"`

	// Logging Logging configuration for ZooKeeper.
	Logging *Logging `json:"logging,omitempty"`

	// Metrics The Prometheus JMX Exporter configuration. See https://github.com/prometheus/jmx_exporter for details of the structure of this configuration.
	Metrics *Metrics `json:"metrics,omitempty"`

	// MetricsConfig Metrics configuration.
	MetricsConfig *MetricsConfig `json:"metricsConfig,omitempty"`

	// ReadinessProbe Pod readiness checking.
	ReadinessProbe *ReadinessProbe `json:"readinessProbe,omitempty"`

	// Replicas The number of pods in the cluster.
	Replicas int `json:"replicas"`

	// Resources CPU and memory resources to reserve.
	Resources *Resources `json:"resources,omitempty"`

	// Storage Storage configuration (disk). Cannot be updated.
	Storage *Storage `json:"storage"`

	// Template Template for ZooKeeper cluster resources. The template allows users to specify how are the `StatefulSet`, `Pods` and `Services` generated.
	Template *Template `json:"template,omitempty"`

	// TlsSidecar TLS sidecar configuration. The TLS sidecar is not used anymore and this option will be ignored.
	TlsSidecar *TlsSidecar `json:"tlsSidecar,omitempty"`

	// Tolerations The pod's tolerations.
	Tolerations []*TolerationsItems `json:"tolerations,omitempty"`

}

// ZookeeperContainer Template for the ZooKeeper container.
type ZookeeperContainer struct {
	// Env Environment variables which should be applied to the container.
	Env []*EnvItems `json:"env,omitempty"`

	// SecurityContext Security context for the container.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

}






// MarshalJSON serializes to JSON
func (s *Authentication) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Authentication) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the AccessTokenIsJwt field
	if !IsEmpty(s.AccessTokenIsJwt) {
	ct.More()
	stream.WriteObjectField("accessTokenIsJwt")
	stream.WriteVal(s.AccessTokenIsJwt)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the CheckAccessTokenType field
	if !IsEmpty(s.CheckAccessTokenType) {
	ct.More()
	stream.WriteObjectField("checkAccessTokenType")
	stream.WriteVal(s.CheckAccessTokenType)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the CheckIssuer field
	if !IsEmpty(s.CheckIssuer) {
	ct.More()
	stream.WriteObjectField("checkIssuer")
	stream.WriteVal(s.CheckIssuer)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the ClientId field
	if !IsEmpty(s.ClientId) {
	ct.More()
	stream.WriteObjectField("clientId")
	stream.WriteString(s.ClientId)
	}

	// Marshal the ClientSecret field
	if !IsEmpty(s.ClientSecret) {
	ct.More()
	stream.WriteObjectField("clientSecret")
	stream.WriteVal(s.ClientSecret)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the DisableTlsHostnameVerification field
	if !IsEmpty(s.DisableTlsHostnameVerification) {
	ct.More()
	stream.WriteObjectField("disableTlsHostnameVerification")
	stream.WriteVal(s.DisableTlsHostnameVerification)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the EnableECDSA field
	if !IsEmpty(s.EnableECDSA) {
	ct.More()
	stream.WriteObjectField("enableECDSA")
	stream.WriteVal(s.EnableECDSA)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the FallbackUserNameClaim field
	if !IsEmpty(s.FallbackUserNameClaim) {
	ct.More()
	stream.WriteObjectField("fallbackUserNameClaim")
	stream.WriteString(s.FallbackUserNameClaim)
	}

	// Marshal the FallbackUserNamePrefix field
	if !IsEmpty(s.FallbackUserNamePrefix) {
	ct.More()
	stream.WriteObjectField("fallbackUserNamePrefix")
	stream.WriteString(s.FallbackUserNamePrefix)
	}

	// Marshal the IntrospectionEndpointUri field
	if !IsEmpty(s.IntrospectionEndpointUri) {
	ct.More()
	stream.WriteObjectField("introspectionEndpointUri")
	stream.WriteString(s.IntrospectionEndpointUri)
	}

	// Marshal the JwksEndpointUri field
	if !IsEmpty(s.JwksEndpointUri) {
	ct.More()
	stream.WriteObjectField("jwksEndpointUri")
	stream.WriteString(s.JwksEndpointUri)
	}

	// Marshal the JwksExpirySeconds field
	if !IsEmpty(s.JwksExpirySeconds) {
	ct.More()
	stream.WriteObjectField("jwksExpirySeconds")
	stream.WriteVal(s.JwksExpirySeconds)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the JwksMinRefreshPauseSeconds field
	if !IsEmpty(s.JwksMinRefreshPauseSeconds) {
	ct.More()
	stream.WriteObjectField("jwksMinRefreshPauseSeconds")
	stream.WriteVal(s.JwksMinRefreshPauseSeconds)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the JwksRefreshSeconds field
	if !IsEmpty(s.JwksRefreshSeconds) {
	ct.More()
	stream.WriteObjectField("jwksRefreshSeconds")
	stream.WriteVal(s.JwksRefreshSeconds)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the MaxSecondsWithoutReauthentication field
	if !IsEmpty(s.MaxSecondsWithoutReauthentication) {
	ct.More()
	stream.WriteObjectField("maxSecondsWithoutReauthentication")
	stream.WriteVal(s.MaxSecondsWithoutReauthentication)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the TlsTrustedCertificates field
	if !IsEmpty(s.TlsTrustedCertificates) {
	ct.More()
	stream.WriteObjectField("tlsTrustedCertificates")
	stream.WriteVal(s.TlsTrustedCertificates)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Type field
	ct.More()
	stream.WriteObjectField("type")
	stream.WriteString(s.Type)

	// Marshal the UserInfoEndpointUri field
	if !IsEmpty(s.UserInfoEndpointUri) {
	ct.More()
	stream.WriteObjectField("userInfoEndpointUri")
	stream.WriteString(s.UserInfoEndpointUri)
	}

	// Marshal the UserNameClaim field
	if !IsEmpty(s.UserNameClaim) {
	ct.More()
	stream.WriteObjectField("userNameClaim")
	stream.WriteString(s.UserNameClaim)
	}

	// Marshal the ValidIssuerUri field
	if !IsEmpty(s.ValidIssuerUri) {
	ct.More()
	stream.WriteObjectField("validIssuerUri")
	stream.WriteString(s.ValidIssuerUri)
	}

	// Marshal the ValidTokenType field
	if !IsEmpty(s.ValidTokenType) {
	ct.More()
	stream.WriteObjectField("validTokenType")
	stream.WriteString(s.ValidTokenType)
	}
	stream.WriteObjectEnd()
}

func (s *Authentication) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Authentication) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TypeReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "accessTokenIsJwt":
			s.AccessTokenIsJwt = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "checkAccessTokenType":
			s.CheckAccessTokenType = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "checkIssuer":
			s.CheckIssuer = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "clientId":
			s.ClientId = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "clientSecret":
			iter.ReadVal(&s.ClientSecret)
			if iter.Error != nil {
				return
			}
		case "disableTlsHostnameVerification":
			s.DisableTlsHostnameVerification = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "enableECDSA":
			s.EnableECDSA = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "fallbackUserNameClaim":
			s.FallbackUserNameClaim = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "fallbackUserNamePrefix":
			s.FallbackUserNamePrefix = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "introspectionEndpointUri":
			s.IntrospectionEndpointUri = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "jwksEndpointUri":
			s.JwksEndpointUri = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "jwksExpirySeconds":
			iter.ReadVal(&s.JwksExpirySeconds)
			if iter.Error != nil {
				return
			}
		case "jwksMinRefreshPauseSeconds":
			iter.ReadVal(&s.JwksMinRefreshPauseSeconds)
			if iter.Error != nil {
				return
			}
		case "jwksRefreshSeconds":
			iter.ReadVal(&s.JwksRefreshSeconds)
			if iter.Error != nil {
				return
			}
		case "maxSecondsWithoutReauthentication":
			iter.ReadVal(&s.MaxSecondsWithoutReauthentication)
			if iter.Error != nil {
				return
			}
		case "tlsTrustedCertificates":
			iter.ReadVal(&s.TlsTrustedCertificates)
			if iter.Error != nil {
				return
			}
		case "type":
			s.Type = iter.ReadString()
			if iter.Error != nil {
				return
			}
			TypeReceived = true
		case "userInfoEndpointUri":
			s.UserInfoEndpointUri = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "userNameClaim":
			s.UserNameClaim = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "validIssuerUri":
			s.ValidIssuerUri = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "validTokenType":
			s.ValidTokenType = iter.ReadString()
			if iter.Error != nil {
				return
			}
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TypeReceived {
		iter.ReportError("validating Authentication", "\"type\" is required but was not present")
	}
}


// MarshalJSON serializes to JSON
func (s *Authorization) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Authorization) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the AllowOnError field
	if !IsEmpty(s.AllowOnError) {
	ct.More()
	stream.WriteObjectField("allowOnError")
	stream.WriteVal(s.AllowOnError)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the ClientId field
	if !IsEmpty(s.ClientId) {
	ct.More()
	stream.WriteObjectField("clientId")
	stream.WriteString(s.ClientId)
	}

	// Marshal the DelegateToKafkaAcls field
	if !IsEmpty(s.DelegateToKafkaAcls) {
	ct.More()
	stream.WriteObjectField("delegateToKafkaAcls")
	stream.WriteVal(s.DelegateToKafkaAcls)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the DisableTlsHostnameVerification field
	if !IsEmpty(s.DisableTlsHostnameVerification) {
	ct.More()
	stream.WriteObjectField("disableTlsHostnameVerification")
	stream.WriteVal(s.DisableTlsHostnameVerification)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the ExpireAfterMs field
	if !IsEmpty(s.ExpireAfterMs) {
	ct.More()
	stream.WriteObjectField("expireAfterMs")
	stream.WriteVal(s.ExpireAfterMs)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the GrantsRefreshPeriodSeconds field
	if !IsEmpty(s.GrantsRefreshPeriodSeconds) {
	ct.More()
	stream.WriteObjectField("grantsRefreshPeriodSeconds")
	stream.WriteVal(s.GrantsRefreshPeriodSeconds)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the GrantsRefreshPoolSize field
	if !IsEmpty(s.GrantsRefreshPoolSize) {
	ct.More()
	stream.WriteObjectField("grantsRefreshPoolSize")
	stream.WriteVal(s.GrantsRefreshPoolSize)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the InitialCacheCapacity field
	if !IsEmpty(s.InitialCacheCapacity) {
	ct.More()
	stream.WriteObjectField("initialCacheCapacity")
	stream.WriteVal(s.InitialCacheCapacity)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the MaximumCacheSize field
	if !IsEmpty(s.MaximumCacheSize) {
	ct.More()
	stream.WriteObjectField("maximumCacheSize")
	stream.WriteVal(s.MaximumCacheSize)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the SuperUsers field
	if !IsEmpty(s.SuperUsers) {
	ct.More()
	stream.WriteObjectField("superUsers")
	stream.WriteVal(s.SuperUsers)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the TlsTrustedCertificates field
	if !IsEmpty(s.TlsTrustedCertificates) {
	ct.More()
	stream.WriteObjectField("tlsTrustedCertificates")
	stream.WriteVal(s.TlsTrustedCertificates)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the TokenEndpointUri field
	if !IsEmpty(s.TokenEndpointUri) {
	ct.More()
	stream.WriteObjectField("tokenEndpointUri")
	stream.WriteString(s.TokenEndpointUri)
	}

	// Marshal the Type field
	ct.More()
	stream.WriteObjectField("type")
	stream.WriteString(s.Type)

	// Marshal the Url field
	if !IsEmpty(s.Url) {
	ct.More()
	stream.WriteObjectField("url")
	stream.WriteString(s.Url)
	}
	stream.WriteObjectEnd()
}

func (s *Authorization) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Authorization) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TypeReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "allowOnError":
			s.AllowOnError = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "clientId":
			s.ClientId = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "delegateToKafkaAcls":
			s.DelegateToKafkaAcls = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "disableTlsHostnameVerification":
			s.DisableTlsHostnameVerification = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "expireAfterMs":
			iter.ReadVal(&s.ExpireAfterMs)
			if iter.Error != nil {
				return
			}
		case "grantsRefreshPeriodSeconds":
			iter.ReadVal(&s.GrantsRefreshPeriodSeconds)
			if iter.Error != nil {
				return
			}
		case "grantsRefreshPoolSize":
			iter.ReadVal(&s.GrantsRefreshPoolSize)
			if iter.Error != nil {
				return
			}
		case "initialCacheCapacity":
			iter.ReadVal(&s.InitialCacheCapacity)
			if iter.Error != nil {
				return
			}
		case "maximumCacheSize":
			iter.ReadVal(&s.MaximumCacheSize)
			if iter.Error != nil {
				return
			}
		case "superUsers":
			iter.ReadVal(&s.SuperUsers)
			if iter.Error != nil {
				return
			}
		case "tlsTrustedCertificates":
			iter.ReadVal(&s.TlsTrustedCertificates)
			if iter.Error != nil {
				return
			}
		case "tokenEndpointUri":
			s.TokenEndpointUri = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "type":
			s.Type = iter.ReadString()
			if iter.Error != nil {
				return
			}
			TypeReceived = true
		case "url":
			s.Url = iter.ReadString()
			if iter.Error != nil {
				return
			}
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TypeReceived {
		iter.ReportError("validating Authorization", "\"type\" is required but was not present")
	}
}





// MarshalJSON serializes to JSON
func (s *BrokerCertChainAndKey) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s BrokerCertChainAndKey) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Certificate field
	ct.More()
	stream.WriteObjectField("certificate")
	stream.WriteString(s.Certificate)

	// Marshal the Key field
	ct.More()
	stream.WriteObjectField("key")
	stream.WriteString(s.Key)

	// Marshal the SecretName field
	ct.More()
	stream.WriteObjectField("secretName")
	stream.WriteString(s.SecretName)
	stream.WriteObjectEnd()
}

func (s *BrokerCertChainAndKey) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *BrokerCertChainAndKey) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	CertificateReceived := false
	KeyReceived := false
	SecretNameReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "certificate":
			s.Certificate = iter.ReadString()
			if iter.Error != nil {
				return
			}
			CertificateReceived = true
		case "key":
			s.Key = iter.ReadString()
			if iter.Error != nil {
				return
			}
			KeyReceived = true
		case "secretName":
			s.SecretName = iter.ReadString()
			if iter.Error != nil {
				return
			}
			SecretNameReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !CertificateReceived {
		iter.ReportError("validating BrokerCertChainAndKey", "\"certificate\" is required but was not present")
	}

	if !KeyReceived {
		iter.ReportError("validating BrokerCertChainAndKey", "\"key\" is required but was not present")
	}

	if !SecretNameReceived {
		iter.ReportError("validating BrokerCertChainAndKey", "\"secretName\" is required but was not present")
	}
}





// MarshalJSON serializes to JSON
func (s *ClientSecret) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s ClientSecret) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Key field
	ct.More()
	stream.WriteObjectField("key")
	stream.WriteString(s.Key)

	// Marshal the SecretName field
	ct.More()
	stream.WriteObjectField("secretName")
	stream.WriteString(s.SecretName)
	stream.WriteObjectEnd()
}

func (s *ClientSecret) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *ClientSecret) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	KeyReceived := false
	SecretNameReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "key":
			s.Key = iter.ReadString()
			if iter.Error != nil {
				return
			}
			KeyReceived = true
		case "secretName":
			s.SecretName = iter.ReadString()
			if iter.Error != nil {
				return
			}
			SecretNameReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !KeyReceived {
		iter.ReportError("validating ClientSecret", "\"key\" is required but was not present")
	}

	if !SecretNameReceived {
		iter.ReportError("validating ClientSecret", "\"secretName\" is required but was not present")
	}
}

















// MarshalJSON serializes to JSON
func (s *External) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s External) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Authentication field
	if !IsEmpty(s.Authentication) {
	ct.More()
	stream.WriteObjectField("authentication")
	stream.WriteVal(s.Authentication)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Class field
	if !IsEmpty(s.Class) {
	ct.More()
	stream.WriteObjectField("class")
	stream.WriteString(s.Class)
	}

	// Marshal the Configuration field
	if !IsEmpty(s.Configuration) {
	ct.More()
	stream.WriteObjectField("configuration")
	stream.WriteVal(s.Configuration)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the NetworkPolicyPeers field
	if !IsEmpty(s.NetworkPolicyPeers) {
	ct.More()
	stream.WriteObjectField("networkPolicyPeers")
	stream.WriteVal(s.NetworkPolicyPeers)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Overrides field
	if !IsEmpty(s.Overrides) {
	ct.More()
	stream.WriteObjectField("overrides")
	stream.WriteVal(s.Overrides)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Tls field
	if !IsEmpty(s.Tls) {
	ct.More()
	stream.WriteObjectField("tls")
	stream.WriteVal(s.Tls)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Type field
	ct.More()
	stream.WriteObjectField("type")
	stream.WriteString(s.Type)
	stream.WriteObjectEnd()
}

func (s *External) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *External) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TypeReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "authentication":
			iter.ReadVal(&s.Authentication)
			if iter.Error != nil {
				return
			}
		case "class":
			s.Class = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "configuration":
			iter.ReadVal(&s.Configuration)
			if iter.Error != nil {
				return
			}
		case "networkPolicyPeers":
			iter.ReadVal(&s.NetworkPolicyPeers)
			if iter.Error != nil {
				return
			}
		case "overrides":
			iter.ReadVal(&s.Overrides)
			if iter.Error != nil {
				return
			}
		case "tls":
			s.Tls = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "type":
			s.Type = iter.ReadString()
			if iter.Error != nil {
				return
			}
			TypeReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TypeReceived {
		iter.ReportError("validating External", "\"type\" is required but was not present")
	}
}











// MarshalJSON serializes to JSON
func (s *JmxTrans) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s JmxTrans) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Image field
	if !IsEmpty(s.Image) {
	ct.More()
	stream.WriteObjectField("image")
	stream.WriteString(s.Image)
	}

	// Marshal the KafkaQueries field
	ct.More()
	stream.WriteObjectField("kafkaQueries")
	stream.WriteVal(s.KafkaQueries)
	if stream.Error != nil {
		return
	}

	// Marshal the LogLevel field
	if !IsEmpty(s.LogLevel) {
	ct.More()
	stream.WriteObjectField("logLevel")
	stream.WriteString(s.LogLevel)
	}

	// Marshal the OutputDefinitions field
	ct.More()
	stream.WriteObjectField("outputDefinitions")
	stream.WriteVal(s.OutputDefinitions)
	if stream.Error != nil {
		return
	}

	// Marshal the Resources field
	if !IsEmpty(s.Resources) {
	ct.More()
	stream.WriteObjectField("resources")
	stream.WriteVal(s.Resources)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Template field
	if !IsEmpty(s.Template) {
	ct.More()
	stream.WriteObjectField("template")
	stream.WriteVal(s.Template)
	if stream.Error != nil {
		return
	}
	}
	stream.WriteObjectEnd()
}

func (s *JmxTrans) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *JmxTrans) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	KafkaQueriesReceived := false
	OutputDefinitionsReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "image":
			s.Image = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "kafkaQueries":
			iter.ReadVal(&s.KafkaQueries)
			if iter.Error != nil {
				return
			}
			KafkaQueriesReceived = true
		case "logLevel":
			s.LogLevel = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "outputDefinitions":
			iter.ReadVal(&s.OutputDefinitions)
			if iter.Error != nil {
				return
			}
			OutputDefinitionsReceived = true
		case "resources":
			iter.ReadVal(&s.Resources)
			if iter.Error != nil {
				return
			}
		case "template":
			iter.ReadVal(&s.Template)
			if iter.Error != nil {
				return
			}
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !KafkaQueriesReceived {
		iter.ReportError("validating JmxTrans", "\"kafkaQueries\" is required but was not present")
	}

	if !OutputDefinitionsReceived {
		iter.ReportError("validating JmxTrans", "\"outputDefinitions\" is required but was not present")
	}
}






// MarshalJSON serializes to JSON
func (s *KafkaQueriesItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s KafkaQueriesItems) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Attributes field
	ct.More()
	stream.WriteObjectField("attributes")
	stream.WriteVal(s.Attributes)
	if stream.Error != nil {
		return
	}

	// Marshal the Outputs field
	ct.More()
	stream.WriteObjectField("outputs")
	stream.WriteVal(s.Outputs)
	if stream.Error != nil {
		return
	}

	// Marshal the TargetMBean field
	ct.More()
	stream.WriteObjectField("targetMBean")
	stream.WriteString(s.TargetMBean)
	stream.WriteObjectEnd()
}

func (s *KafkaQueriesItems) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *KafkaQueriesItems) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	AttributesReceived := false
	OutputsReceived := false
	TargetMBeanReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "attributes":
			iter.ReadVal(&s.Attributes)
			if iter.Error != nil {
				return
			}
			AttributesReceived = true
		case "outputs":
			iter.ReadVal(&s.Outputs)
			if iter.Error != nil {
				return
			}
			OutputsReceived = true
		case "targetMBean":
			s.TargetMBean = iter.ReadString()
			if iter.Error != nil {
				return
			}
			TargetMBeanReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !AttributesReceived {
		iter.ReportError("validating KafkaQueriesItems", "\"attributes\" is required but was not present")
	}

	if !OutputsReceived {
		iter.ReportError("validating KafkaQueriesItems", "\"outputs\" is required but was not present")
	}

	if !TargetMBeanReceived {
		iter.ReportError("validating KafkaQueriesItems", "\"targetMBean\" is required but was not present")
	}
}









// MarshalJSON serializes to JSON
func (s *Logging) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Logging) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Loggers field
	if !IsEmpty(s.Loggers) {
	ct.More()
	stream.WriteObjectField("loggers")
	stream.WriteVal(s.Loggers)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Name field
	if !IsEmpty(s.Name) {
	ct.More()
	stream.WriteObjectField("name")
	stream.WriteString(s.Name)
	}

	// Marshal the Type field
	ct.More()
	stream.WriteObjectField("type")
	stream.WriteString(s.Type)
	stream.WriteObjectEnd()
}

func (s *Logging) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Logging) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TypeReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "loggers":
			iter.ReadVal(&s.Loggers)
			if iter.Error != nil {
				return
			}
		case "name":
			s.Name = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "type":
			s.Type = iter.ReadString()
			if iter.Error != nil {
				return
			}
			TypeReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TypeReceived {
		iter.ReportError("validating Logging", "\"type\" is required but was not present")
	}
}







// MarshalJSON serializes to JSON
func (s *MetricsConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s MetricsConfig) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Type field
	ct.More()
	stream.WriteObjectField("type")
	stream.WriteString(s.Type)

	// Marshal the ValueFrom field

	// ValueFrom is required
	if s.ValueFrom == nil {
		stream.Error = errors.New("ValueFrom (valueFrom) is a required")
		return
	}
	ct.More()
	stream.WriteObjectField("valueFrom")
	stream.WriteVal(s.ValueFrom)
	if stream.Error != nil {
		return
	}
	stream.WriteObjectEnd()
}

func (s *MetricsConfig) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *MetricsConfig) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TypeReceived := false
	ValueFromReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "type":
			s.Type = iter.ReadString()
			if s.Type != "jmxPrometheusExporter" {
				iter.ReportError(
					"type",
					fmt.Sprintf("Expected %s, got \"%s\"", "jmxPrometheusExporter", s.Type),
				)
			}
			if iter.Error != nil {
				return
			}
			TypeReceived = true
		case "valueFrom":
			iter.ReadVal(&s.ValueFrom)
			if iter.Error != nil {
				return
			}
			ValueFromReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TypeReceived {
		iter.ReportError("validating MetricsConfig", "\"type\" is required but was not present")
	}

	if !ValueFromReceived {
		iter.ReportError("validating MetricsConfig", "\"valueFrom\" is required but was not present")
	}
}







// MarshalJSON serializes to JSON
func (s *OutputDefinitionsItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s OutputDefinitionsItems) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the FlushDelayInSeconds field
	if !IsEmpty(s.FlushDelayInSeconds) {
	ct.More()
	stream.WriteObjectField("flushDelayInSeconds")
	stream.WriteVal(s.FlushDelayInSeconds)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Host field
	if !IsEmpty(s.Host) {
	ct.More()
	stream.WriteObjectField("host")
	stream.WriteString(s.Host)
	}

	// Marshal the Name field
	ct.More()
	stream.WriteObjectField("name")
	stream.WriteString(s.Name)

	// Marshal the OutputType field
	ct.More()
	stream.WriteObjectField("outputType")
	stream.WriteString(s.OutputType)

	// Marshal the Port field
	if !IsEmpty(s.Port) {
	ct.More()
	stream.WriteObjectField("port")
	stream.WriteVal(s.Port)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the TypeNames field
	if !IsEmpty(s.TypeNames) {
	ct.More()
	stream.WriteObjectField("typeNames")
	stream.WriteVal(s.TypeNames)
	if stream.Error != nil {
		return
	}
	}
	stream.WriteObjectEnd()
}

func (s *OutputDefinitionsItems) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *OutputDefinitionsItems) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	NameReceived := false
	OutputTypeReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "flushDelayInSeconds":
			iter.ReadVal(&s.FlushDelayInSeconds)
			if iter.Error != nil {
				return
			}
		case "host":
			s.Host = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "name":
			s.Name = iter.ReadString()
			if iter.Error != nil {
				return
			}
			NameReceived = true
		case "outputType":
			s.OutputType = iter.ReadString()
			if iter.Error != nil {
				return
			}
			OutputTypeReceived = true
		case "port":
			iter.ReadVal(&s.Port)
			if iter.Error != nil {
				return
			}
		case "typeNames":
			iter.ReadVal(&s.TypeNames)
			if iter.Error != nil {
				return
			}
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !NameReceived {
		iter.ReportError("validating OutputDefinitionsItems", "\"name\" is required but was not present")
	}

	if !OutputTypeReceived {
		iter.ReportError("validating OutputDefinitionsItems", "\"outputType\" is required but was not present")
	}
}

















// MarshalJSON serializes to JSON
func (s *Rack) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Rack) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the TopologyKey field
	ct.More()
	stream.WriteObjectField("topologyKey")
	stream.WriteString(s.TopologyKey)
	stream.WriteObjectEnd()
}

func (s *Rack) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Rack) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TopologyKeyReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "topologyKey":
			s.TopologyKey = iter.ReadString()
			if iter.Error != nil {
				return
			}
			TopologyKeyReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TopologyKeyReceived {
		iter.ReportError("validating Rack", "\"topologyKey\" is required but was not present")
	}
}












// MarshalJSON serializes to JSON
func (s *Spec) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Spec) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the ClientsCa field
	if !IsEmpty(s.ClientsCa) {
	ct.More()
	stream.WriteObjectField("clientsCa")
	stream.WriteVal(s.ClientsCa)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the ClusterCa field
	if !IsEmpty(s.ClusterCa) {
	ct.More()
	stream.WriteObjectField("clusterCa")
	stream.WriteVal(s.ClusterCa)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the CruiseControl field
	if !IsEmpty(s.CruiseControl) {
	ct.More()
	stream.WriteObjectField("cruiseControl")
	stream.WriteVal(s.CruiseControl)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the EntityOperator field
	if !IsEmpty(s.EntityOperator) {
	ct.More()
	stream.WriteObjectField("entityOperator")
	stream.WriteVal(s.EntityOperator)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the JmxTrans field
	if !IsEmpty(s.JmxTrans) {
	ct.More()
	stream.WriteObjectField("jmxTrans")
	stream.WriteVal(s.JmxTrans)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Kafka field

	// Kafka is required
	if s.Kafka == nil {
		stream.Error = errors.New("Kafka (kafka) is a required")
		return
	}
	ct.More()
	stream.WriteObjectField("kafka")
	stream.WriteVal(s.Kafka)
	if stream.Error != nil {
		return
	}

	// Marshal the KafkaExporter field
	if !IsEmpty(s.KafkaExporter) {
	ct.More()
	stream.WriteObjectField("kafkaExporter")
	stream.WriteVal(s.KafkaExporter)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the MaintenanceTimeWindows field
	if !IsEmpty(s.MaintenanceTimeWindows) {
	ct.More()
	stream.WriteObjectField("maintenanceTimeWindows")
	stream.WriteVal(s.MaintenanceTimeWindows)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the TopicOperator field
	if !IsEmpty(s.TopicOperator) {
	ct.More()
	stream.WriteObjectField("topicOperator")
	stream.WriteVal(s.TopicOperator)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Zookeeper field

	// Zookeeper is required
	if s.Zookeeper == nil {
		stream.Error = errors.New("Zookeeper (zookeeper) is a required")
		return
	}
	ct.More()
	stream.WriteObjectField("zookeeper")
	stream.WriteVal(s.Zookeeper)
	if stream.Error != nil {
		return
	}
	stream.WriteObjectEnd()
}

func (s *Spec) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Spec) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	KafkaReceived := false
	ZookeeperReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "clientsCa":
			iter.ReadVal(&s.ClientsCa)
			if iter.Error != nil {
				return
			}
		case "clusterCa":
			iter.ReadVal(&s.ClusterCa)
			if iter.Error != nil {
				return
			}
		case "cruiseControl":
			iter.ReadVal(&s.CruiseControl)
			if iter.Error != nil {
				return
			}
		case "entityOperator":
			iter.ReadVal(&s.EntityOperator)
			if iter.Error != nil {
				return
			}
		case "jmxTrans":
			iter.ReadVal(&s.JmxTrans)
			if iter.Error != nil {
				return
			}
		case "kafka":
			iter.ReadVal(&s.Kafka)
			if iter.Error != nil {
				return
			}
			KafkaReceived = true
		case "kafkaExporter":
			iter.ReadVal(&s.KafkaExporter)
			if iter.Error != nil {
				return
			}
		case "maintenanceTimeWindows":
			iter.ReadVal(&s.MaintenanceTimeWindows)
			if iter.Error != nil {
				return
			}
		case "topicOperator":
			iter.ReadVal(&s.TopicOperator)
			if iter.Error != nil {
				return
			}
		case "zookeeper":
			iter.ReadVal(&s.Zookeeper)
			if iter.Error != nil {
				return
			}
			ZookeeperReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !KafkaReceived {
		iter.ReportError("validating Spec", "\"kafka\" is required but was not present")
	}

	if !ZookeeperReceived {
		iter.ReportError("validating Spec", "\"zookeeper\" is required but was not present")
	}
}




// MarshalJSON serializes to JSON
func (s *Storage) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Storage) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Class field
	if !IsEmpty(s.Class) {
	ct.More()
	stream.WriteObjectField("class")
	stream.WriteString(s.Class)
	}

	// Marshal the DeleteClaim field
	if !IsEmpty(s.DeleteClaim) {
	ct.More()
	stream.WriteObjectField("deleteClaim")
	stream.WriteVal(s.DeleteClaim)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Id field
	if !IsEmpty(s.Id) {
	ct.More()
	stream.WriteObjectField("id")
	stream.WriteVal(s.Id)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Overrides field
	if !IsEmpty(s.Overrides) {
	ct.More()
	stream.WriteObjectField("overrides")
	stream.WriteVal(s.Overrides)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Selector field
	if !IsEmpty(s.Selector) {
	ct.More()
	stream.WriteObjectField("selector")
	stream.WriteVal(s.Selector)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Size field
	if !IsEmpty(s.Size) {
	ct.More()
	stream.WriteObjectField("size")
	stream.WriteString(s.Size)
	}

	// Marshal the SizeLimit field
	if !IsEmpty(s.SizeLimit) {
	ct.More()
	stream.WriteObjectField("sizeLimit")
	stream.WriteString(s.SizeLimit)
	}

	// Marshal the Type field
	ct.More()
	stream.WriteObjectField("type")
	stream.WriteString(s.Type)
	stream.WriteObjectEnd()
}

func (s *Storage) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Storage) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TypeReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "class":
			s.Class = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "deleteClaim":
			s.DeleteClaim = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "id":
			iter.ReadVal(&s.Id)
			if iter.Error != nil {
				return
			}
		case "overrides":
			iter.ReadVal(&s.Overrides)
			if iter.Error != nil {
				return
			}
		case "selector":
			iter.ReadVal(&s.Selector)
			if iter.Error != nil {
				return
			}
		case "size":
			s.Size = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "sizeLimit":
			s.SizeLimit = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "type":
			s.Type = iter.ReadString()
			if iter.Error != nil {
				return
			}
			TypeReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TypeReceived {
		iter.ReportError("validating Storage", "\"type\" is required but was not present")
	}
}







// MarshalJSON serializes to JSON
func (s *TlsTrustedCertificatesItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s TlsTrustedCertificatesItems) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Certificate field
	ct.More()
	stream.WriteObjectField("certificate")
	stream.WriteString(s.Certificate)

	// Marshal the SecretName field
	ct.More()
	stream.WriteObjectField("secretName")
	stream.WriteString(s.SecretName)
	stream.WriteObjectEnd()
}

func (s *TlsTrustedCertificatesItems) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *TlsTrustedCertificatesItems) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	CertificateReceived := false
	SecretNameReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "certificate":
			s.Certificate = iter.ReadString()
			if iter.Error != nil {
				return
			}
			CertificateReceived = true
		case "secretName":
			s.SecretName = iter.ReadString()
			if iter.Error != nil {
				return
			}
			SecretNameReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !CertificateReceived {
		iter.ReportError("validating TlsTrustedCertificatesItems", "\"certificate\" is required but was not present")
	}

	if !SecretNameReceived {
		iter.ReportError("validating TlsTrustedCertificatesItems", "\"secretName\" is required but was not present")
	}
}









// MarshalJSON serializes to JSON
func (s *VolumesItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s VolumesItems) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Class field
	if !IsEmpty(s.Class) {
	ct.More()
	stream.WriteObjectField("class")
	stream.WriteString(s.Class)
	}

	// Marshal the DeleteClaim field
	if !IsEmpty(s.DeleteClaim) {
	ct.More()
	stream.WriteObjectField("deleteClaim")
	stream.WriteVal(s.DeleteClaim)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Id field
	if !IsEmpty(s.Id) {
	ct.More()
	stream.WriteObjectField("id")
	stream.WriteVal(s.Id)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Overrides field
	if !IsEmpty(s.Overrides) {
	ct.More()
	stream.WriteObjectField("overrides")
	stream.WriteVal(s.Overrides)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Selector field
	if !IsEmpty(s.Selector) {
	ct.More()
	stream.WriteObjectField("selector")
	stream.WriteVal(s.Selector)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Size field
	if !IsEmpty(s.Size) {
	ct.More()
	stream.WriteObjectField("size")
	stream.WriteString(s.Size)
	}

	// Marshal the SizeLimit field
	if !IsEmpty(s.SizeLimit) {
	ct.More()
	stream.WriteObjectField("sizeLimit")
	stream.WriteString(s.SizeLimit)
	}

	// Marshal the Type field
	ct.More()
	stream.WriteObjectField("type")
	stream.WriteString(s.Type)
	stream.WriteObjectEnd()
}

func (s *VolumesItems) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *VolumesItems) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TypeReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "class":
			s.Class = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "deleteClaim":
			s.DeleteClaim = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "id":
			iter.ReadVal(&s.Id)
			if iter.Error != nil {
				return
			}
		case "overrides":
			iter.ReadVal(&s.Overrides)
			if iter.Error != nil {
				return
			}
		case "selector":
			iter.ReadVal(&s.Selector)
			if iter.Error != nil {
				return
			}
		case "size":
			s.Size = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "sizeLimit":
			s.SizeLimit = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "type":
			s.Type = iter.ReadString()
			if iter.Error != nil {
				return
			}
			TypeReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TypeReceived {
		iter.ReportError("validating VolumesItems", "\"type\" is required but was not present")
	}
}




// MarshalJSON serializes to JSON
func (s *Zookeeper) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Zookeeper) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Affinity field
	if !IsEmpty(s.Affinity) {
	ct.More()
	stream.WriteObjectField("affinity")
	stream.WriteVal(s.Affinity)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Config field
	if !IsEmpty(s.Config) {
	ct.More()
	stream.WriteObjectField("config")
	stream.WriteVal(s.Config)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Image field
	if !IsEmpty(s.Image) {
	ct.More()
	stream.WriteObjectField("image")
	stream.WriteString(s.Image)
	}

	// Marshal the JvmOptions field
	if !IsEmpty(s.JvmOptions) {
	ct.More()
	stream.WriteObjectField("jvmOptions")
	stream.WriteVal(s.JvmOptions)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the LivenessProbe field
	if !IsEmpty(s.LivenessProbe) {
	ct.More()
	stream.WriteObjectField("livenessProbe")
	stream.WriteVal(s.LivenessProbe)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Logging field
	if !IsEmpty(s.Logging) {
	ct.More()
	stream.WriteObjectField("logging")
	stream.WriteVal(s.Logging)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Metrics field
	if !IsEmpty(s.Metrics) {
	ct.More()
	stream.WriteObjectField("metrics")
	stream.WriteVal(s.Metrics)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the MetricsConfig field
	if !IsEmpty(s.MetricsConfig) {
	ct.More()
	stream.WriteObjectField("metricsConfig")
	stream.WriteVal(s.MetricsConfig)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the ReadinessProbe field
	if !IsEmpty(s.ReadinessProbe) {
	ct.More()
	stream.WriteObjectField("readinessProbe")
	stream.WriteVal(s.ReadinessProbe)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Replicas field
	ct.More()
	stream.WriteObjectField("replicas")
	stream.WriteVal(s.Replicas)
	if stream.Error != nil {
		return
	}

	// Marshal the Resources field
	if !IsEmpty(s.Resources) {
	ct.More()
	stream.WriteObjectField("resources")
	stream.WriteVal(s.Resources)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Storage field

	// Storage is required
	if s.Storage == nil {
		stream.Error = errors.New("Storage (storage) is a required")
		return
	}
	ct.More()
	stream.WriteObjectField("storage")
	stream.WriteVal(s.Storage)
	if stream.Error != nil {
		return
	}

	// Marshal the Template field
	if !IsEmpty(s.Template) {
	ct.More()
	stream.WriteObjectField("template")
	stream.WriteVal(s.Template)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the TlsSidecar field
	if !IsEmpty(s.TlsSidecar) {
	ct.More()
	stream.WriteObjectField("tlsSidecar")
	stream.WriteVal(s.TlsSidecar)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Tolerations field
	if !IsEmpty(s.Tolerations) {
	ct.More()
	stream.WriteObjectField("tolerations")
	stream.WriteVal(s.Tolerations)
	if stream.Error != nil {
		return
	}
	}
	stream.WriteObjectEnd()
}

func (s *Zookeeper) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Zookeeper) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	ReplicasReceived := false
	StorageReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "affinity":
			iter.ReadVal(&s.Affinity)
			if iter.Error != nil {
				return
			}
		case "config":
			iter.ReadVal(&s.Config)
			if iter.Error != nil {
				return
			}
		case "image":
			s.Image = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "jvmOptions":
			iter.ReadVal(&s.JvmOptions)
			if iter.Error != nil {
				return
			}
		case "livenessProbe":
			iter.ReadVal(&s.LivenessProbe)
			if iter.Error != nil {
				return
			}
		case "logging":
			iter.ReadVal(&s.Logging)
			if iter.Error != nil {
				return
			}
		case "metrics":
			iter.ReadVal(&s.Metrics)
			if iter.Error != nil {
				return
			}
		case "metricsConfig":
			iter.ReadVal(&s.MetricsConfig)
			if iter.Error != nil {
				return
			}
		case "readinessProbe":
			iter.ReadVal(&s.ReadinessProbe)
			if iter.Error != nil {
				return
			}
		case "replicas":
			iter.ReadVal(&s.Replicas)
			if iter.Error != nil {
				return
			}
			ReplicasReceived = true
		case "resources":
			iter.ReadVal(&s.Resources)
			if iter.Error != nil {
				return
			}
		case "storage":
			iter.ReadVal(&s.Storage)
			if iter.Error != nil {
				return
			}
			StorageReceived = true
		case "template":
			iter.ReadVal(&s.Template)
			if iter.Error != nil {
				return
			}
		case "tlsSidecar":
			iter.ReadVal(&s.TlsSidecar)
			if iter.Error != nil {
				return
			}
		case "tolerations":
			iter.ReadVal(&s.Tolerations)
			if iter.Error != nil {
				return
			}
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !ReplicasReceived {
		iter.ReportError("validating Zookeeper", "\"replicas\" is required but was not present")
	}

	if !StorageReceived {
		iter.ReportError("validating Zookeeper", "\"storage\" is required but was not present")
	}
}
