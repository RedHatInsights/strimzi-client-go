// Partially generated by github.com/atombender/go-jsonschema

package v1beta1

import (
	"encoding/json"
	"fmt"
	"reflect"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// Kafka
type Kafka struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// The specification of the Kafka and ZooKeeper clusters, and Topic Operator.
	Spec *KafkaSpec `json:"spec,omitempty"`

	// The status of the Kafka and ZooKeeper clusters, and Topic Operator.
	Status *KafkaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KafkaList contains a list of instances.
type KafkaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`

	// A list of Kafka objects.
	Items []Kafka `json:"items,omitempty"`
}

func init() {
	SchemeBuilder.Register(&Kafka{}, &KafkaList{})
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy, v)
	}
	*j = KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpec) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["kafka"]; !ok || v == nil {
		return fmt.Errorf("field kafka: required")
	}
	if v, ok := raw["zookeeper"]; !ok || v == nil {
		return fmt.Errorf("field zookeeper: required")
	}
	type Plain KafkaSpec
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpec(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecClientsCaCertificateExpirationPolicy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecClientsCaCertificateExpirationPolicy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecClientsCaCertificateExpirationPolicy, v)
	}
	*j = KafkaSpecClientsCaCertificateExpirationPolicy(v)
	return nil
}

const KafkaSpecClientsCaCertificateExpirationPolicyRenewCertificate KafkaSpecClientsCaCertificateExpirationPolicy = "renew-certificate"
const KafkaSpecClientsCaCertificateExpirationPolicyReplaceKey KafkaSpecClientsCaCertificateExpirationPolicy = "replace-key"

// Configuration of the clients certificate authority.
type KafkaSpecClientsCa struct {
	// How should CA certificate expiration be handled when
	// `generateCertificateAuthority=true`. The default is for a new CA certificate to
	// be generated reusing the existing private key.
	CertificateExpirationPolicy *KafkaSpecClientsCaCertificateExpirationPolicy `json:"certificateExpirationPolicy,omitempty"`

	// If true then Certificate Authority certificates will be generated
	// automatically. Otherwise the user will need to provide a Secret with the CA
	// certificate. Default is true.
	GenerateCertificateAuthority *bool `json:"generateCertificateAuthority,omitempty"`

	// If true then the Certificate Authority certificates secrets owner reference is
	// set to the Kafka object. Otherwise no owner reference is set so deleting the
	// Kafka object won't delete the secrets. Default is true.
	GenerateSecretOwnerReference *bool `json:"generateSecretOwnerReference,omitempty"`

	// The number of days in the certificate renewal period. This is the number of
	// days before the a certificate expires during which renewal actions may be
	// performed. When `generateCertificateAuthority` is true, this will cause the
	// generation of a new certificate. When `generateCertificateAuthority` is true,
	// this will cause extra logging at WARN level about the pending certificate
	// expiry. Default is 30.
	RenewalDays *int32 `json:"renewalDays,omitempty"`

	// The number of days generated certificates should be valid for. The default is
	// 365.
	ValidityDays *int32 `json:"validityDays,omitempty"`
}

type KafkaSpecClusterCaCertificateExpirationPolicy string

// The specification of the Kafka and ZooKeeper clusters, and Topic Operator.
type KafkaSpec struct {
	// Configuration of the clients certificate authority.
	ClientsCa *KafkaSpecClientsCa `json:"clientsCa,omitempty"`

	// Configuration of the cluster certificate authority.
	ClusterCa *KafkaSpecClusterCa `json:"clusterCa,omitempty"`

	// Configuration for Cruise Control deployment. Deploys a Cruise Control instance
	// when specified.
	CruiseControl *KafkaSpecCruiseControl `json:"cruiseControl,omitempty"`

	// Configuration of the Entity Operator.
	EntityOperator *KafkaSpecEntityOperator `json:"entityOperator,omitempty"`

	// Configuration for JmxTrans. When the property is present a JmxTrans deployment
	// is created for gathering JMX metrics from each Kafka broker. For more
	// information see https://github.com/jmxtrans/jmxtrans[JmxTrans GitHub].
	JmxTrans *KafkaSpecJmxTrans `json:"jmxTrans,omitempty"`

	// Configuration of the Kafka cluster.
	Kafka KafkaSpecKafka `json:"kafka"`

	// Configuration of the Kafka Exporter. Kafka Exporter can provide additional
	// metrics, for example lag of consumer group at topic/partition.
	KafkaExporter *KafkaSpecKafkaExporter `json:"kafkaExporter,omitempty"`

	// A list of time windows for maintenance tasks (that is, certificates renewal).
	// Each time window is defined by a cron expression.
	MaintenanceTimeWindows []string `json:"maintenanceTimeWindows,omitempty"`

	// Configuration of the Topic Operator.
	TopicOperator *KafkaSpecTopicOperator `json:"topicOperator,omitempty"`

	// Configuration of the ZooKeeper cluster.
	Zookeeper KafkaSpecZookeeper `json:"zookeeper"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecClusterCaCertificateExpirationPolicy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecClusterCaCertificateExpirationPolicy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecClusterCaCertificateExpirationPolicy, v)
	}
	*j = KafkaSpecClusterCaCertificateExpirationPolicy(v)
	return nil
}

const KafkaSpecClusterCaCertificateExpirationPolicyRenewCertificate KafkaSpecClusterCaCertificateExpirationPolicy = "renew-certificate"
const KafkaSpecClusterCaCertificateExpirationPolicyReplaceKey KafkaSpecClusterCaCertificateExpirationPolicy = "replace-key"

// Configuration of the cluster certificate authority.
type KafkaSpecClusterCa struct {
	// How should CA certificate expiration be handled when
	// `generateCertificateAuthority=true`. The default is for a new CA certificate to
	// be generated reusing the existing private key.
	CertificateExpirationPolicy *KafkaSpecClusterCaCertificateExpirationPolicy `json:"certificateExpirationPolicy,omitempty"`

	// If true then Certificate Authority certificates will be generated
	// automatically. Otherwise the user will need to provide a Secret with the CA
	// certificate. Default is true.
	GenerateCertificateAuthority *bool `json:"generateCertificateAuthority,omitempty"`

	// If true then the Certificate Authority certificates secrets owner reference is
	// set to the Kafka object. Otherwise no owner reference is set so deleting the
	// Kafka object won't delete the secrets. Default is true.
	GenerateSecretOwnerReference *bool `json:"generateSecretOwnerReference,omitempty"`

	// The number of days in the certificate renewal period. This is the number of
	// days before the a certificate expires during which renewal actions may be
	// performed. When `generateCertificateAuthority` is true, this will cause the
	// generation of a new certificate. When `generateCertificateAuthority` is true,
	// this will cause extra logging at WARN level about the pending certificate
	// expiry. Default is 30.
	RenewalDays *int32 `json:"renewalDays,omitempty"`

	// The number of days generated certificates should be valid for. The default is
	// 365.
	ValidityDays *int32 `json:"validityDays,omitempty"`
}

// The Cruise Control `brokerCapacity` configuration.
type KafkaSpecCruiseControlBrokerCapacity struct {
	// Broker capacity for CPU resource utilization as a percentage (0 - 100).
	CpuUtilization *int32 `json:"cpuUtilization,omitempty"`

	// Broker capacity for disk in bytes, for example, 100Gi.
	Disk *string `json:"disk,omitempty"`

	// Broker capacity for inbound network throughput in bytes per second, for
	// example, 10000KB/s.
	InboundNetwork *string `json:"inboundNetwork,omitempty"`

	// Broker capacity for outbound network throughput in bytes per second, for
	// example 10000KB/s.
	OutboundNetwork *string `json:"outboundNetwork,omitempty"`
}

// The Cruise Control configuration. For a full list of configuration options refer
// to https://github.com/linkedin/cruise-control/wiki/Configurations. Note that
// properties with the following prefixes cannot be set: bootstrap.servers,
// client.id, zookeeper., network., security.,
// failed.brokers.zk.path,webserver.http., webserver.api.urlprefix,
// webserver.session.path, webserver.accesslog., two.step.,
// request.reason.required,metric.reporter.sampler.bootstrap.servers,
// metric.reporter.topic, partition.metric.sample.store.topic,
// broker.metric.sample.store.topic,capacity.config.file, self.healing.,
// anomaly.detection., ssl. (with the exception of: ssl.cipher.suites,
// ssl.protocol, ssl.enabled.protocols,
// webserver.http.cors.enabled,webserver.http.cors.origin,
// webserver.http.cors.exposeheaders).
type KafkaSpecCruiseControlConfig map[string]string

// A map of -XX options to the JVM.
type KafkaSpecCruiseControlJvmOptionsXX map[string]string

type KafkaSpecCruiseControlJvmOptionsJavaSystemPropertiesElem struct {
	// The system property name.
	Name *string `json:"name,omitempty"`

	// The system property value.
	Value *string `json:"value,omitempty"`
}

// JVM Options for the Cruise Control container.
type KafkaSpecCruiseControlJvmOptions struct {
	// A map of -XX options to the JVM.
	XX KafkaSpecCruiseControlJvmOptionsXX `json:"-XX,omitempty"`

	// -Xms option to to the JVM.
	Xms *string `json:"-Xms,omitempty"`

	// -Xmx option to to the JVM.
	Xmx *string `json:"-Xmx,omitempty"`

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	GcLoggingEnabled *bool `json:"gcLoggingEnabled,omitempty"`

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	JavaSystemProperties []KafkaSpecCruiseControlJvmOptionsJavaSystemPropertiesElem `json:"javaSystemProperties,omitempty"`
}

// Pod liveness checking for the Cruise Control container.
type KafkaSpecCruiseControlLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// A Map from logger name to logger level.
type KafkaSpecCruiseControlLoggingLoggers map[string]string

type KafkaSpecCruiseControlLoggingType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecZookeeper) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["replicas"]; !ok || v == nil {
		return fmt.Errorf("field replicas: required")
	}
	if v, ok := raw["storage"]; !ok || v == nil {
		return fmt.Errorf("field storage: required")
	}
	type Plain KafkaSpecZookeeper
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecZookeeper(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecCruiseControlLoggingType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecCruiseControlLoggingType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecCruiseControlLoggingType, v)
	}
	*j = KafkaSpecCruiseControlLoggingType(v)
	return nil
}

const KafkaSpecCruiseControlLoggingTypeInline KafkaSpecCruiseControlLoggingType = "inline"
const KafkaSpecCruiseControlLoggingTypeExternal KafkaSpecCruiseControlLoggingType = "external"

// Logging configuration (log4j1) for Cruise Control.
type KafkaSpecCruiseControlLogging struct {
	// A Map from logger name to logger level.
	Loggers KafkaSpecCruiseControlLoggingLoggers `json:"loggers,omitempty"`

	// The name of the `ConfigMap` from which to get the logging configuration.
	Name *string `json:"name,omitempty"`

	// Logging type, must be either 'inline' or 'external'.
	Type KafkaSpecCruiseControlLoggingType `json:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecCruiseControlLogging) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaSpecCruiseControlLogging
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecCruiseControlLogging(plain)
	return nil
}

// The Prometheus JMX Exporter configuration. See
// https://github.com/prometheus/jmx_exporter for details of the structure of this
// configuration.
type KafkaSpecCruiseControlMetrics map[string]string

type KafkaSpecCruiseControlMetricsConfigType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecZookeeperTlsSidecarLogLevel) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecZookeeperTlsSidecarLogLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecZookeeperTlsSidecarLogLevel, v)
	}
	*j = KafkaSpecZookeeperTlsSidecarLogLevel(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecCruiseControlMetricsConfigType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecCruiseControlMetricsConfigType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecCruiseControlMetricsConfigType, v)
	}
	*j = KafkaSpecCruiseControlMetricsConfigType(v)
	return nil
}

const KafkaSpecCruiseControlMetricsConfigTypeJmxPrometheusExporter KafkaSpecCruiseControlMetricsConfigType = "jmxPrometheusExporter"

// Reference to the key in the ConfigMap containing the metrics configuration.
type KafkaSpecCruiseControlMetricsConfigValueFromConfigMapKeyRef struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty"`
}

// ConfigMap where the Prometheus JMX Exporter configuration is stored. For details
// of the structure of this configuration, see the {JMXExporter}.
type KafkaSpecCruiseControlMetricsConfigValueFrom struct {
	// Reference to the key in the ConfigMap containing the metrics configuration.
	ConfigMapKeyRef *KafkaSpecCruiseControlMetricsConfigValueFromConfigMapKeyRef `json:"configMapKeyRef,omitempty"`
}

// Metrics configuration.
type KafkaSpecCruiseControlMetricsConfig struct {
	// Metrics type. Only 'jmxPrometheusExporter' supported currently.
	Type KafkaSpecCruiseControlMetricsConfigType `json:"type"`

	// ConfigMap where the Prometheus JMX Exporter configuration is stored. For
	// details of the structure of this configuration, see the {JMXExporter}.
	ValueFrom KafkaSpecCruiseControlMetricsConfigValueFrom `json:"valueFrom"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecCruiseControlMetricsConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	if v, ok := raw["valueFrom"]; !ok || v == nil {
		return fmt.Errorf("field valueFrom: required")
	}
	type Plain KafkaSpecCruiseControlMetricsConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecCruiseControlMetricsConfig(plain)
	return nil
}

// Pod readiness checking for the Cruise Control container.
type KafkaSpecCruiseControlReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

type KafkaSpecCruiseControlResourcesLimits map[string]string

type KafkaSpecCruiseControlResourcesRequests map[string]string

// CPU and memory resources to reserve for the Cruise Control container.
type KafkaSpecCruiseControlResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits KafkaSpecCruiseControlResourcesLimits `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests KafkaSpecCruiseControlResourcesRequests `json:"requests,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecCruiseControlTemplateApiServiceMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecCruiseControlTemplateApiServiceMetadataLabels map[string]string

// Metadata applied to the resource.
type KafkaSpecCruiseControlTemplateApiServiceMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecCruiseControlTemplateApiServiceMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecCruiseControlTemplateApiServiceMetadataLabels `json:"labels,omitempty"`
}

// Template for Cruise Control API `Service`.
type KafkaSpecCruiseControlTemplateApiService struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecCruiseControlTemplateApiServiceMetadata `json:"metadata,omitempty"`
}

type KafkaSpecCruiseControlTemplateCruiseControlContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

type KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Security context for the container.
type KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

// Template for the Cruise Control container.
type KafkaSpecCruiseControlTemplateCruiseControlContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaSpecCruiseControlTemplateCruiseControlContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContext `json:"securityContext,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecCruiseControlTemplateDeploymentMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecCruiseControlTemplateDeploymentMetadataLabels map[string]string

// Metadata applied to the resource.
type KafkaSpecCruiseControlTemplateDeploymentMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecCruiseControlTemplateDeploymentMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecCruiseControlTemplateDeploymentMetadataLabels `json:"labels,omitempty"`
}

// Template for Cruise Control `Deployment`.
type KafkaSpecCruiseControlTemplateDeployment struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecCruiseControlTemplateDeploymentMetadata `json:"metadata,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// The pod's affinity rules.
type KafkaSpecCruiseControlTemplatePodAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaSpecCruiseControlTemplatePodAffinityNodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaSpecCruiseControlTemplatePodAffinityPodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodHostAliasesElem struct {
	// Hostnames corresponds to the JSON schema field "hostnames".
	Hostnames []string `json:"hostnames,omitempty"`

	// Ip corresponds to the JSON schema field "ip".
	Ip *string `json:"ip,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodImagePullSecretsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecCruiseControlTemplatePodMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecCruiseControlTemplatePodMetadataLabels map[string]string

// Metadata applied to the resource.
type KafkaSpecCruiseControlTemplatePodMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecCruiseControlTemplatePodMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecCruiseControlTemplatePodMetadataLabels `json:"labels,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodSecurityContextSysctlsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Configures pod-level security attributes and common container settings.
type KafkaSpecCruiseControlTemplatePodSecurityContext struct {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	FsGroup *int32 `json:"fsGroup,omitempty"`

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecCruiseControlTemplatePodSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecCruiseControlTemplatePodSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	SupplementalGroups []int32 `json:"supplementalGroups,omitempty"`

	// Sysctls corresponds to the JSON schema field "sysctls".
	Sysctls []KafkaSpecCruiseControlTemplatePodSecurityContextSysctlsElem `json:"sysctls,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecCruiseControlTemplatePodSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels map[string]string

type KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelector `json:"labelSelector,omitempty"`

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	MaxSkew *int32 `json:"maxSkew,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	WhenUnsatisfiable *string `json:"whenUnsatisfiable,omitempty"`
}

// Template for Cruise Control `Pods`.
type KafkaSpecCruiseControlTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecCruiseControlTemplatePodAffinity `json:"affinity,omitempty"`

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the pod's hosts file if specified.
	HostAliases []KafkaSpecCruiseControlTemplatePodHostAliasesElem `json:"hostAliases,omitempty"`

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []KafkaSpecCruiseControlTemplatePodImagePullSecretsElem `json:"imagePullSecrets,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaSpecCruiseControlTemplatePodMetadata `json:"metadata,omitempty"`

	// The name of the priority class used to assign priority to the pods. For more
	// information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `json:"priorityClassName,omitempty"`

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	SchedulerName *string `json:"schedulerName,omitempty"`

	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaSpecCruiseControlTemplatePodSecurityContext `json:"securityContext,omitempty"`

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	TerminationGracePeriodSeconds *int32 `json:"terminationGracePeriodSeconds,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaSpecCruiseControlTemplatePodTolerationsElem `json:"tolerations,omitempty"`

	// The pod's topology spread constraints.
	TopologySpreadConstraints []KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElem `json:"topologySpreadConstraints,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadataLabels map[string]string

// Metadata to apply to the `PodDistruptionBugetTemplate` resource.
type KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadataLabels `json:"labels,omitempty"`
}

// Template for Cruise Control `PodDisruptionBudget`.
type KafkaSpecCruiseControlTemplatePodDisruptionBudget struct {
	// Maximum number of unavailable pods to allow automatic Pod eviction. A Pod
	// eviction is allowed when the `maxUnavailable` number of pods or fewer are
	// unavailable after the eviction. Setting this value to 0 prevents all voluntary
	// evictions, so the pods must be evicted manually. Defaults to 1.
	MaxUnavailable *int32 `json:"maxUnavailable,omitempty"`

	// Metadata to apply to the `PodDistruptionBugetTemplate` resource.
	Metadata *KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadata `json:"metadata,omitempty"`
}

type KafkaSpecCruiseControlTemplateTlsSidecarContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

type KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Security context for the container.
type KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

// Template for the Cruise Control TLS sidecar container.
type KafkaSpecCruiseControlTemplateTlsSidecarContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaSpecCruiseControlTemplateTlsSidecarContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContext `json:"securityContext,omitempty"`
}

// Template to specify how Cruise Control resources, `Deployments` and `Pods`, are
// generated.
type KafkaSpecCruiseControlTemplate struct {
	// Template for Cruise Control API `Service`.
	ApiService *KafkaSpecCruiseControlTemplateApiService `json:"apiService,omitempty"`

	// Template for the Cruise Control container.
	CruiseControlContainer *KafkaSpecCruiseControlTemplateCruiseControlContainer `json:"cruiseControlContainer,omitempty"`

	// Template for Cruise Control `Deployment`.
	Deployment *KafkaSpecCruiseControlTemplateDeployment `json:"deployment,omitempty"`

	// Template for Cruise Control `Pods`.
	Pod *KafkaSpecCruiseControlTemplatePod `json:"pod,omitempty"`

	// Template for Cruise Control `PodDisruptionBudget`.
	PodDisruptionBudget *KafkaSpecCruiseControlTemplatePodDisruptionBudget `json:"podDisruptionBudget,omitempty"`

	// Template for the Cruise Control TLS sidecar container.
	TlsSidecarContainer *KafkaSpecCruiseControlTemplateTlsSidecarContainer `json:"tlsSidecarContainer,omitempty"`
}

// Pod liveness checking.
type KafkaSpecCruiseControlTlsSidecarLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

type KafkaSpecCruiseControlTlsSidecarLogLevel string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy, v)
	}
	*j = KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecCruiseControlTlsSidecarLogLevel) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecCruiseControlTlsSidecarLogLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecCruiseControlTlsSidecarLogLevel, v)
	}
	*j = KafkaSpecCruiseControlTlsSidecarLogLevel(v)
	return nil
}

const KafkaSpecCruiseControlTlsSidecarLogLevelEmerg KafkaSpecCruiseControlTlsSidecarLogLevel = "emerg"
const KafkaSpecCruiseControlTlsSidecarLogLevelAlert KafkaSpecCruiseControlTlsSidecarLogLevel = "alert"
const KafkaSpecCruiseControlTlsSidecarLogLevelCrit KafkaSpecCruiseControlTlsSidecarLogLevel = "crit"

type KafkaSpecClientsCaCertificateExpirationPolicy string

const KafkaSpecCruiseControlTlsSidecarLogLevelWarning KafkaSpecCruiseControlTlsSidecarLogLevel = "warning"
const KafkaSpecCruiseControlTlsSidecarLogLevelNotice KafkaSpecCruiseControlTlsSidecarLogLevel = "notice"
const KafkaSpecCruiseControlTlsSidecarLogLevelInfo KafkaSpecCruiseControlTlsSidecarLogLevel = "info"
const KafkaSpecCruiseControlTlsSidecarLogLevelDebug KafkaSpecCruiseControlTlsSidecarLogLevel = "debug"

// Pod readiness checking.
type KafkaSpecCruiseControlTlsSidecarReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

type KafkaSpecCruiseControlTlsSidecarResourcesLimits map[string]string

type KafkaSpecCruiseControlTlsSidecarResourcesRequests map[string]string

// CPU and memory resources to reserve.
type KafkaSpecCruiseControlTlsSidecarResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits KafkaSpecCruiseControlTlsSidecarResourcesLimits `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests KafkaSpecCruiseControlTlsSidecarResourcesRequests `json:"requests,omitempty"`
}

// TLS sidecar configuration.
type KafkaSpecCruiseControlTlsSidecar struct {
	// The docker image for the container.
	Image *string `json:"image,omitempty"`

	// Pod liveness checking.
	LivenessProbe *KafkaSpecCruiseControlTlsSidecarLivenessProbe `json:"livenessProbe,omitempty"`

	// The log level for the TLS sidecar. Default value is `notice`.
	LogLevel *KafkaSpecCruiseControlTlsSidecarLogLevel `json:"logLevel,omitempty"`

	// Pod readiness checking.
	ReadinessProbe *KafkaSpecCruiseControlTlsSidecarReadinessProbe `json:"readinessProbe,omitempty"`

	// CPU and memory resources to reserve.
	Resources *KafkaSpecCruiseControlTlsSidecarResources `json:"resources,omitempty"`
}

// Configuration for Cruise Control deployment. Deploys a Cruise Control instance
// when specified.
type KafkaSpecCruiseControl struct {
	// The Cruise Control `brokerCapacity` configuration.
	BrokerCapacity *KafkaSpecCruiseControlBrokerCapacity `json:"brokerCapacity,omitempty"`

	// The Cruise Control configuration. For a full list of configuration options
	// refer to https://github.com/linkedin/cruise-control/wiki/Configurations. Note
	// that properties with the following prefixes cannot be set: bootstrap.servers,
	// client.id, zookeeper., network., security.,
	// failed.brokers.zk.path,webserver.http., webserver.api.urlprefix,
	// webserver.session.path, webserver.accesslog., two.step.,
	// request.reason.required,metric.reporter.sampler.bootstrap.servers,
	// metric.reporter.topic, partition.metric.sample.store.topic,
	// broker.metric.sample.store.topic,capacity.config.file, self.healing.,
	// anomaly.detection., ssl. (with the exception of: ssl.cipher.suites,
	// ssl.protocol, ssl.enabled.protocols,
	// webserver.http.cors.enabled,webserver.http.cors.origin,
	// webserver.http.cors.exposeheaders).
	Config KafkaSpecCruiseControlConfig `json:"config,omitempty"`

	// The docker image for the pods.
	Image *string `json:"image,omitempty"`

	// JVM Options for the Cruise Control container.
	JvmOptions *KafkaSpecCruiseControlJvmOptions `json:"jvmOptions,omitempty"`

	// Pod liveness checking for the Cruise Control container.
	LivenessProbe *KafkaSpecCruiseControlLivenessProbe `json:"livenessProbe,omitempty"`

	// Logging configuration (log4j1) for Cruise Control.
	Logging *KafkaSpecCruiseControlLogging `json:"logging,omitempty"`

	// The Prometheus JMX Exporter configuration. See
	// https://github.com/prometheus/jmx_exporter for details of the structure of this
	// configuration.
	Metrics KafkaSpecCruiseControlMetrics `json:"metrics,omitempty"`

	// Metrics configuration.
	MetricsConfig *KafkaSpecCruiseControlMetricsConfig `json:"metricsConfig,omitempty"`

	// Pod readiness checking for the Cruise Control container.
	ReadinessProbe *KafkaSpecCruiseControlReadinessProbe `json:"readinessProbe,omitempty"`

	// CPU and memory resources to reserve for the Cruise Control container.
	Resources *KafkaSpecCruiseControlResources `json:"resources,omitempty"`

	// Template to specify how Cruise Control resources, `Deployments` and `Pods`, are
	// generated.
	Template *KafkaSpecCruiseControlTemplate `json:"template,omitempty"`

	// TLS sidecar configuration.
	TlsSidecar *KafkaSpecCruiseControlTlsSidecar `json:"tlsSidecar,omitempty"`
}

type KafkaSpecEntityOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecEntityOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecEntityOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecEntityOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaSpecEntityOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecEntityOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecEntityOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecEntityOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecEntityOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaSpecEntityOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty"`
}

type KafkaSpecEntityOperatorAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecEntityOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecEntityOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecEntityOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecEntityOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecEntityOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecEntityOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecEntityOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecEntityOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecEntityOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecEntityOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecEntityOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecEntityOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecEntityOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecEntityOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecEntityOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecEntityOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecEntityOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecEntityOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecEntityOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecEntityOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecEntityOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecEntityOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecEntityOperatorAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecEntityOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecEntityOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// The pod's affinity rules.
type KafkaSpecEntityOperatorAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaSpecEntityOperatorAffinityNodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaSpecEntityOperatorAffinityPodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaSpecEntityOperatorAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecEntityOperatorTemplateDeploymentMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecEntityOperatorTemplateDeploymentMetadataLabels map[string]string

// Metadata applied to the resource.
type KafkaSpecEntityOperatorTemplateDeploymentMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecEntityOperatorTemplateDeploymentMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecEntityOperatorTemplateDeploymentMetadataLabels `json:"labels,omitempty"`
}

// Template for Entity Operator `Deployment`.
type KafkaSpecEntityOperatorTemplateDeployment struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecEntityOperatorTemplateDeploymentMetadata `json:"metadata,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// The pod's affinity rules.
type KafkaSpecEntityOperatorTemplatePodAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaSpecEntityOperatorTemplatePodAffinityPodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodHostAliasesElem struct {
	// Hostnames corresponds to the JSON schema field "hostnames".
	Hostnames []string `json:"hostnames,omitempty"`

	// Ip corresponds to the JSON schema field "ip".
	Ip *string `json:"ip,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodImagePullSecretsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecEntityOperatorTemplatePodMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecEntityOperatorTemplatePodMetadataLabels map[string]string

// Metadata applied to the resource.
type KafkaSpecEntityOperatorTemplatePodMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecEntityOperatorTemplatePodMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecEntityOperatorTemplatePodMetadataLabels `json:"labels,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodSecurityContextSysctlsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Configures pod-level security attributes and common container settings.
type KafkaSpecEntityOperatorTemplatePodSecurityContext struct {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	FsGroup *int32 `json:"fsGroup,omitempty"`

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecEntityOperatorTemplatePodSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecEntityOperatorTemplatePodSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	SupplementalGroups []int32 `json:"supplementalGroups,omitempty"`

	// Sysctls corresponds to the JSON schema field "sysctls".
	Sysctls []KafkaSpecEntityOperatorTemplatePodSecurityContextSysctlsElem `json:"sysctls,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecEntityOperatorTemplatePodSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels map[string]string

type KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelector `json:"labelSelector,omitempty"`

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	MaxSkew *int32 `json:"maxSkew,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	WhenUnsatisfiable *string `json:"whenUnsatisfiable,omitempty"`
}

// Template for Entity Operator `Pods`.
type KafkaSpecEntityOperatorTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecEntityOperatorTemplatePodAffinity `json:"affinity,omitempty"`

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the pod's hosts file if specified.
	HostAliases []KafkaSpecEntityOperatorTemplatePodHostAliasesElem `json:"hostAliases,omitempty"`

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []KafkaSpecEntityOperatorTemplatePodImagePullSecretsElem `json:"imagePullSecrets,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaSpecEntityOperatorTemplatePodMetadata `json:"metadata,omitempty"`

	// The name of the priority class used to assign priority to the pods. For more
	// information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `json:"priorityClassName,omitempty"`

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	SchedulerName *string `json:"schedulerName,omitempty"`

	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaSpecEntityOperatorTemplatePodSecurityContext `json:"securityContext,omitempty"`

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	TerminationGracePeriodSeconds *int32 `json:"terminationGracePeriodSeconds,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaSpecEntityOperatorTemplatePodTolerationsElem `json:"tolerations,omitempty"`

	// The pod's topology spread constraints.
	TopologySpreadConstraints []KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElem `json:"topologySpreadConstraints,omitempty"`
}

type KafkaSpecEntityOperatorTemplateTlsSidecarContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

type KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Security context for the container.
type KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

// Template for the Entity Operator TLS sidecar container.
type KafkaSpecEntityOperatorTemplateTlsSidecarContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaSpecEntityOperatorTemplateTlsSidecarContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContext `json:"securityContext,omitempty"`
}

type KafkaSpecEntityOperatorTemplateTopicOperatorContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

type KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Security context for the container.
type KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

// Template for the Entity Topic Operator container.
type KafkaSpecEntityOperatorTemplateTopicOperatorContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaSpecEntityOperatorTemplateTopicOperatorContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContext `json:"securityContext,omitempty"`
}

type KafkaSpecEntityOperatorTemplateUserOperatorContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

type KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Security context for the container.
type KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

// Template for the Entity User Operator container.
type KafkaSpecEntityOperatorTemplateUserOperatorContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaSpecEntityOperatorTemplateUserOperatorContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContext `json:"securityContext,omitempty"`
}

// Template for Entity Operator resources. The template allows users to specify how
// is the `Deployment` and `Pods` generated.
type KafkaSpecEntityOperatorTemplate struct {
	// Template for Entity Operator `Deployment`.
	Deployment *KafkaSpecEntityOperatorTemplateDeployment `json:"deployment,omitempty"`

	// Template for Entity Operator `Pods`.
	Pod *KafkaSpecEntityOperatorTemplatePod `json:"pod,omitempty"`

	// Template for the Entity Operator TLS sidecar container.
	TlsSidecarContainer *KafkaSpecEntityOperatorTemplateTlsSidecarContainer `json:"tlsSidecarContainer,omitempty"`

	// Template for the Entity Topic Operator container.
	TopicOperatorContainer *KafkaSpecEntityOperatorTemplateTopicOperatorContainer `json:"topicOperatorContainer,omitempty"`

	// Template for the Entity User Operator container.
	UserOperatorContainer *KafkaSpecEntityOperatorTemplateUserOperatorContainer `json:"userOperatorContainer,omitempty"`
}

// Pod liveness checking.
type KafkaSpecEntityOperatorTlsSidecarLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

type KafkaSpecEntityOperatorTlsSidecarLogLevel string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecZookeeperStorage) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaSpecZookeeperStorage
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecZookeeperStorage(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecEntityOperatorTlsSidecarLogLevel) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecEntityOperatorTlsSidecarLogLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecEntityOperatorTlsSidecarLogLevel, v)
	}
	*j = KafkaSpecEntityOperatorTlsSidecarLogLevel(v)
	return nil
}

const KafkaSpecEntityOperatorTlsSidecarLogLevelEmerg KafkaSpecEntityOperatorTlsSidecarLogLevel = "emerg"
const KafkaSpecEntityOperatorTlsSidecarLogLevelAlert KafkaSpecEntityOperatorTlsSidecarLogLevel = "alert"
const KafkaSpecEntityOperatorTlsSidecarLogLevelCrit KafkaSpecEntityOperatorTlsSidecarLogLevel = "crit"
const KafkaSpecEntityOperatorTlsSidecarLogLevelErr KafkaSpecEntityOperatorTlsSidecarLogLevel = "err"
const KafkaSpecEntityOperatorTlsSidecarLogLevelWarning KafkaSpecEntityOperatorTlsSidecarLogLevel = "warning"
const KafkaSpecEntityOperatorTlsSidecarLogLevelNotice KafkaSpecEntityOperatorTlsSidecarLogLevel = "notice"
const KafkaSpecEntityOperatorTlsSidecarLogLevelInfo KafkaSpecEntityOperatorTlsSidecarLogLevel = "info"
const KafkaSpecEntityOperatorTlsSidecarLogLevelDebug KafkaSpecEntityOperatorTlsSidecarLogLevel = "debug"

// Pod readiness checking.
type KafkaSpecEntityOperatorTlsSidecarReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

type KafkaSpecEntityOperatorTlsSidecarResourcesLimits map[string]string

type KafkaSpecEntityOperatorTlsSidecarResourcesRequests map[string]string

// CPU and memory resources to reserve.
type KafkaSpecEntityOperatorTlsSidecarResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits KafkaSpecEntityOperatorTlsSidecarResourcesLimits `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests KafkaSpecEntityOperatorTlsSidecarResourcesRequests `json:"requests,omitempty"`
}

// TLS sidecar configuration.
type KafkaSpecEntityOperatorTlsSidecar struct {
	// The docker image for the container.
	Image *string `json:"image,omitempty"`

	// Pod liveness checking.
	LivenessProbe *KafkaSpecEntityOperatorTlsSidecarLivenessProbe `json:"livenessProbe,omitempty"`

	// The log level for the TLS sidecar. Default value is `notice`.
	LogLevel *KafkaSpecEntityOperatorTlsSidecarLogLevel `json:"logLevel,omitempty"`

	// Pod readiness checking.
	ReadinessProbe *KafkaSpecEntityOperatorTlsSidecarReadinessProbe `json:"readinessProbe,omitempty"`

	// CPU and memory resources to reserve.
	Resources *KafkaSpecEntityOperatorTlsSidecarResources `json:"resources,omitempty"`
}

type KafkaSpecEntityOperatorTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

// A map of -XX options to the JVM.
type KafkaSpecEntityOperatorTopicOperatorJvmOptionsXX map[string]string

type KafkaSpecEntityOperatorTopicOperatorJvmOptionsJavaSystemPropertiesElem struct {
	// The system property name.
	Name *string `json:"name,omitempty"`

	// The system property value.
	Value *string `json:"value,omitempty"`
}

// JVM Options for pods.
type KafkaSpecEntityOperatorTopicOperatorJvmOptions struct {
	// A map of -XX options to the JVM.
	XX KafkaSpecEntityOperatorTopicOperatorJvmOptionsXX `json:"-XX,omitempty"`

	// -Xms option to to the JVM.
	Xms *string `json:"-Xms,omitempty"`

	// -Xmx option to to the JVM.
	Xmx *string `json:"-Xmx,omitempty"`

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	GcLoggingEnabled *bool `json:"gcLoggingEnabled,omitempty"`

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	JavaSystemProperties []KafkaSpecEntityOperatorTopicOperatorJvmOptionsJavaSystemPropertiesElem `json:"javaSystemProperties,omitempty"`
}

// Pod liveness checking.
type KafkaSpecEntityOperatorTopicOperatorLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// A Map from logger name to logger level.
type KafkaSpecEntityOperatorTopicOperatorLoggingLoggers map[string]string

type KafkaSpecEntityOperatorTopicOperatorLoggingType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecZookeeperStorageType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecZookeeperStorageType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecZookeeperStorageType, v)
	}
	*j = KafkaSpecZookeeperStorageType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecEntityOperatorTopicOperatorLoggingType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecEntityOperatorTopicOperatorLoggingType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecEntityOperatorTopicOperatorLoggingType, v)
	}
	*j = KafkaSpecEntityOperatorTopicOperatorLoggingType(v)
	return nil
}

const KafkaSpecEntityOperatorTopicOperatorLoggingTypeInline KafkaSpecEntityOperatorTopicOperatorLoggingType = "inline"
const KafkaSpecEntityOperatorTopicOperatorLoggingTypeExternal KafkaSpecEntityOperatorTopicOperatorLoggingType = "external"

// Logging configuration.
type KafkaSpecEntityOperatorTopicOperatorLogging struct {
	// A Map from logger name to logger level.
	Loggers KafkaSpecEntityOperatorTopicOperatorLoggingLoggers `json:"loggers,omitempty"`

	// The name of the `ConfigMap` from which to get the logging configuration.
	Name *string `json:"name,omitempty"`

	// Logging type, must be either 'inline' or 'external'.
	Type KafkaSpecEntityOperatorTopicOperatorLoggingType `json:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecEntityOperatorTopicOperatorLogging) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaSpecEntityOperatorTopicOperatorLogging
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecEntityOperatorTopicOperatorLogging(plain)
	return nil
}

// Pod readiness checking.
type KafkaSpecEntityOperatorTopicOperatorReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

type KafkaSpecEntityOperatorTopicOperatorResourcesLimits map[string]string

type KafkaSpecEntityOperatorTopicOperatorResourcesRequests map[string]string

// CPU and memory resources to reserve.
type KafkaSpecEntityOperatorTopicOperatorResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits KafkaSpecEntityOperatorTopicOperatorResourcesLimits `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests KafkaSpecEntityOperatorTopicOperatorResourcesRequests `json:"requests,omitempty"`
}

// Configuration of the Topic Operator.
type KafkaSpecEntityOperatorTopicOperator struct {
	// The image to use for the Topic Operator.
	Image *string `json:"image,omitempty"`

	// JVM Options for pods.
	JvmOptions *KafkaSpecEntityOperatorTopicOperatorJvmOptions `json:"jvmOptions,omitempty"`

	// Pod liveness checking.
	LivenessProbe *KafkaSpecEntityOperatorTopicOperatorLivenessProbe `json:"livenessProbe,omitempty"`

	// Logging configuration.
	Logging *KafkaSpecEntityOperatorTopicOperatorLogging `json:"logging,omitempty"`

	// Pod readiness checking.
	ReadinessProbe *KafkaSpecEntityOperatorTopicOperatorReadinessProbe `json:"readinessProbe,omitempty"`

	// Interval between periodic reconciliations.
	ReconciliationIntervalSeconds *int32 `json:"reconciliationIntervalSeconds,omitempty"`

	// CPU and memory resources to reserve.
	Resources *KafkaSpecEntityOperatorTopicOperatorResources `json:"resources,omitempty"`

	// The number of attempts at getting topic metadata.
	TopicMetadataMaxAttempts *int32 `json:"topicMetadataMaxAttempts,omitempty"`

	// The namespace the Topic Operator should watch.
	WatchedNamespace *string `json:"watchedNamespace,omitempty"`

	// Timeout for the ZooKeeper session.
	ZookeeperSessionTimeoutSeconds *int32 `json:"zookeeperSessionTimeoutSeconds,omitempty"`
}

// A map of -XX options to the JVM.
type KafkaSpecEntityOperatorUserOperatorJvmOptionsXX map[string]string

type KafkaSpecEntityOperatorUserOperatorJvmOptionsJavaSystemPropertiesElem struct {
	// The system property name.
	Name *string `json:"name,omitempty"`

	// The system property value.
	Value *string `json:"value,omitempty"`
}

// JVM Options for pods.
type KafkaSpecEntityOperatorUserOperatorJvmOptions struct {
	// A map of -XX options to the JVM.
	XX KafkaSpecEntityOperatorUserOperatorJvmOptionsXX `json:"-XX,omitempty"`

	// -Xms option to to the JVM.
	Xms *string `json:"-Xms,omitempty"`

	// -Xmx option to to the JVM.
	Xmx *string `json:"-Xmx,omitempty"`

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	GcLoggingEnabled *bool `json:"gcLoggingEnabled,omitempty"`

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	JavaSystemProperties []KafkaSpecEntityOperatorUserOperatorJvmOptionsJavaSystemPropertiesElem `json:"javaSystemProperties,omitempty"`
}

// Pod liveness checking.
type KafkaSpecEntityOperatorUserOperatorLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// A Map from logger name to logger level.
type KafkaSpecEntityOperatorUserOperatorLoggingLoggers map[string]string

type KafkaSpecEntityOperatorUserOperatorLoggingType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecEntityOperatorUserOperatorLoggingType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecEntityOperatorUserOperatorLoggingType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecEntityOperatorUserOperatorLoggingType, v)
	}
	*j = KafkaSpecEntityOperatorUserOperatorLoggingType(v)
	return nil
}

const KafkaSpecEntityOperatorUserOperatorLoggingTypeInline KafkaSpecEntityOperatorUserOperatorLoggingType = "inline"
const KafkaSpecEntityOperatorUserOperatorLoggingTypeExternal KafkaSpecEntityOperatorUserOperatorLoggingType = "external"

// Logging configuration.
type KafkaSpecEntityOperatorUserOperatorLogging struct {
	// A Map from logger name to logger level.
	Loggers KafkaSpecEntityOperatorUserOperatorLoggingLoggers `json:"loggers,omitempty"`

	// The name of the `ConfigMap` from which to get the logging configuration.
	Name *string `json:"name,omitempty"`

	// Logging type, must be either 'inline' or 'external'.
	Type KafkaSpecEntityOperatorUserOperatorLoggingType `json:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecEntityOperatorUserOperatorLogging) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaSpecEntityOperatorUserOperatorLogging
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecEntityOperatorUserOperatorLogging(plain)
	return nil
}

// Pod readiness checking.
type KafkaSpecEntityOperatorUserOperatorReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

type KafkaSpecEntityOperatorUserOperatorResourcesLimits map[string]string

type KafkaSpecEntityOperatorUserOperatorResourcesRequests map[string]string

// CPU and memory resources to reserve.
type KafkaSpecEntityOperatorUserOperatorResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits KafkaSpecEntityOperatorUserOperatorResourcesLimits `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests KafkaSpecEntityOperatorUserOperatorResourcesRequests `json:"requests,omitempty"`
}

// Configuration of the User Operator.
type KafkaSpecEntityOperatorUserOperator struct {
	// The image to use for the User Operator.
	Image *string `json:"image,omitempty"`

	// JVM Options for pods.
	JvmOptions *KafkaSpecEntityOperatorUserOperatorJvmOptions `json:"jvmOptions,omitempty"`

	// Pod liveness checking.
	LivenessProbe *KafkaSpecEntityOperatorUserOperatorLivenessProbe `json:"livenessProbe,omitempty"`

	// Logging configuration.
	Logging *KafkaSpecEntityOperatorUserOperatorLogging `json:"logging,omitempty"`

	// Pod readiness checking.
	ReadinessProbe *KafkaSpecEntityOperatorUserOperatorReadinessProbe `json:"readinessProbe,omitempty"`

	// Interval between periodic reconciliations.
	ReconciliationIntervalSeconds *int32 `json:"reconciliationIntervalSeconds,omitempty"`

	// CPU and memory resources to reserve.
	Resources *KafkaSpecEntityOperatorUserOperatorResources `json:"resources,omitempty"`

	// The prefix that will be added to the KafkaUser name to be used as the Secret
	// name.
	SecretPrefix *string `json:"secretPrefix,omitempty"`

	// The namespace the User Operator should watch.
	WatchedNamespace *string `json:"watchedNamespace,omitempty"`

	// Timeout for the ZooKeeper session.
	ZookeeperSessionTimeoutSeconds *int32 `json:"zookeeperSessionTimeoutSeconds,omitempty"`
}

// Configuration of the Entity Operator.
type KafkaSpecEntityOperator struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecEntityOperatorAffinity `json:"affinity,omitempty"`

	// Template for Entity Operator resources. The template allows users to specify
	// how is the `Deployment` and `Pods` generated.
	Template *KafkaSpecEntityOperatorTemplate `json:"template,omitempty"`

	// TLS sidecar configuration.
	TlsSidecar *KafkaSpecEntityOperatorTlsSidecar `json:"tlsSidecar,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaSpecEntityOperatorTolerationsElem `json:"tolerations,omitempty"`

	// Configuration of the Topic Operator.
	TopicOperator *KafkaSpecEntityOperatorTopicOperator `json:"topicOperator,omitempty"`

	// Configuration of the User Operator.
	UserOperator *KafkaSpecEntityOperatorUserOperator `json:"userOperator,omitempty"`
}

type KafkaSpecJmxTransKafkaQueriesElem struct {
	// Determine which attributes of the targeted MBean should be included.
	Attributes []string `json:"attributes"`

	// List of the names of output definitions specified in the
	// spec.kafka.jmxTrans.outputDefinitions that have defined where JMX metrics are
	// pushed to, and in which data format.
	Outputs []string `json:"outputs"`

	// If using wildcards instead of a specific MBean then the data is gathered from
	// multiple MBeans. Otherwise if specifying an MBean then data is gathered from
	// that specified MBean.
	TargetMBean string `json:"targetMBean"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecJmxTransKafkaQueriesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["attributes"]; !ok || v == nil {
		return fmt.Errorf("field attributes: required")
	}
	if v, ok := raw["outputs"]; !ok || v == nil {
		return fmt.Errorf("field outputs: required")
	}
	if v, ok := raw["targetMBean"]; !ok || v == nil {
		return fmt.Errorf("field targetMBean: required")
	}
	type Plain KafkaSpecJmxTransKafkaQueriesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecJmxTransKafkaQueriesElem(plain)
	return nil
}

type KafkaSpecJmxTransOutputDefinitionsElem struct {
	// How many seconds the JmxTrans waits before pushing a new set of data out.
	FlushDelayInSeconds *int32 `json:"flushDelayInSeconds,omitempty"`

	// The DNS/hostname of the remote host that the data is pushed to.
	Host *string `json:"host,omitempty"`

	// Template for setting the name of the output definition. This is used to
	// identify where to send the results of queries should be sent.
	Name string `json:"name"`

	// Template for setting the format of the data that will be pushed.For more
	// information see
	// https://github.com/jmxtrans/jmxtrans/wiki/OutputWriters[JmxTrans
	// OutputWriters].
	OutputType string `json:"outputType"`

	// The port of the remote host that the data is pushed to.
	Port *int32 `json:"port,omitempty"`

	// Template for filtering data to be included in response to a wildcard query. For
	// more information see https://github.com/jmxtrans/jmxtrans/wiki/Queries[JmxTrans
	// queries].
	TypeNames []string `json:"typeNames,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecJmxTransOutputDefinitionsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["outputType"]; !ok || v == nil {
		return fmt.Errorf("field outputType: required")
	}
	type Plain KafkaSpecJmxTransOutputDefinitionsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecJmxTransOutputDefinitionsElem(plain)
	return nil
}

type KafkaSpecJmxTransResourcesLimits map[string]string

type KafkaSpecJmxTransResourcesRequests map[string]string

// CPU and memory resources to reserve.
type KafkaSpecJmxTransResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits KafkaSpecJmxTransResourcesLimits `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests KafkaSpecJmxTransResourcesRequests `json:"requests,omitempty"`
}

type KafkaSpecJmxTransTemplateContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

type KafkaSpecJmxTransTemplateContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaSpecJmxTransTemplateContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecJmxTransTemplateContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecJmxTransTemplateContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Security context for the container.
type KafkaSpecJmxTransTemplateContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaSpecJmxTransTemplateContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecJmxTransTemplateContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecJmxTransTemplateContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecJmxTransTemplateContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

// Template for JmxTrans container.
type KafkaSpecJmxTransTemplateContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaSpecJmxTransTemplateContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaSpecJmxTransTemplateContainerSecurityContext `json:"securityContext,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecJmxTransTemplateDeploymentMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecJmxTransTemplateDeploymentMetadataLabels map[string]string

// Metadata applied to the resource.
type KafkaSpecJmxTransTemplateDeploymentMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecJmxTransTemplateDeploymentMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecJmxTransTemplateDeploymentMetadataLabels `json:"labels,omitempty"`
}

// Template for JmxTrans `Deployment`.
type KafkaSpecJmxTransTemplateDeployment struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecJmxTransTemplateDeploymentMetadata `json:"metadata,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// The pod's affinity rules.
type KafkaSpecJmxTransTemplatePodAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaSpecJmxTransTemplatePodAffinityNodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaSpecJmxTransTemplatePodAffinityPodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

type KafkaSpecJmxTransTemplatePodHostAliasesElem struct {
	// Hostnames corresponds to the JSON schema field "hostnames".
	Hostnames []string `json:"hostnames,omitempty"`

	// Ip corresponds to the JSON schema field "ip".
	Ip *string `json:"ip,omitempty"`
}

type KafkaSpecJmxTransTemplatePodImagePullSecretsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecJmxTransTemplatePodMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecJmxTransTemplatePodMetadataLabels map[string]string

// Metadata applied to the resource.
type KafkaSpecJmxTransTemplatePodMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecJmxTransTemplatePodMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecJmxTransTemplatePodMetadataLabels `json:"labels,omitempty"`
}

type KafkaSpecJmxTransTemplatePodSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecJmxTransTemplatePodSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecJmxTransTemplatePodSecurityContextSysctlsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaSpecJmxTransTemplatePodSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Configures pod-level security attributes and common container settings.
type KafkaSpecJmxTransTemplatePodSecurityContext struct {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	FsGroup *int32 `json:"fsGroup,omitempty"`

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecJmxTransTemplatePodSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecJmxTransTemplatePodSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	SupplementalGroups []int32 `json:"supplementalGroups,omitempty"`

	// Sysctls corresponds to the JSON schema field "sysctls".
	Sysctls []KafkaSpecJmxTransTemplatePodSecurityContextSysctlsElem `json:"sysctls,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecJmxTransTemplatePodSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaSpecJmxTransTemplatePodTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels map[string]string

type KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelector `json:"labelSelector,omitempty"`

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	MaxSkew *int32 `json:"maxSkew,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	WhenUnsatisfiable *string `json:"whenUnsatisfiable,omitempty"`
}

// Template for JmxTrans `Pods`.
type KafkaSpecJmxTransTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecJmxTransTemplatePodAffinity `json:"affinity,omitempty"`

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the pod's hosts file if specified.
	HostAliases []KafkaSpecJmxTransTemplatePodHostAliasesElem `json:"hostAliases,omitempty"`

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []KafkaSpecJmxTransTemplatePodImagePullSecretsElem `json:"imagePullSecrets,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaSpecJmxTransTemplatePodMetadata `json:"metadata,omitempty"`

	// The name of the priority class used to assign priority to the pods. For more
	// information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `json:"priorityClassName,omitempty"`

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	SchedulerName *string `json:"schedulerName,omitempty"`

	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaSpecJmxTransTemplatePodSecurityContext `json:"securityContext,omitempty"`

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	TerminationGracePeriodSeconds *int32 `json:"terminationGracePeriodSeconds,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaSpecJmxTransTemplatePodTolerationsElem `json:"tolerations,omitempty"`

	// The pod's topology spread constraints.
	TopologySpreadConstraints []KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElem `json:"topologySpreadConstraints,omitempty"`
}

// Template for JmxTrans resources.
type KafkaSpecJmxTransTemplate struct {
	// Template for JmxTrans container.
	Container *KafkaSpecJmxTransTemplateContainer `json:"container,omitempty"`

	// Template for JmxTrans `Deployment`.
	Deployment *KafkaSpecJmxTransTemplateDeployment `json:"deployment,omitempty"`

	// Template for JmxTrans `Pods`.
	Pod *KafkaSpecJmxTransTemplatePod `json:"pod,omitempty"`
}

// Configuration for JmxTrans. When the property is present a JmxTrans deployment
// is created for gathering JMX metrics from each Kafka broker. For more
// information see https://github.com/jmxtrans/jmxtrans[JmxTrans GitHub].
type KafkaSpecJmxTrans struct {
	// The image to use for the JmxTrans.
	Image *string `json:"image,omitempty"`

	// Queries to send to the Kafka brokers to define what data should be read from
	// each broker. For more information on these properties see,
	// xref:type-JmxTransQueryTemplate-reference[`JmxTransQueryTemplate` schema
	// reference].
	KafkaQueries []KafkaSpecJmxTransKafkaQueriesElem `json:"kafkaQueries"`

	// Sets the logging level of the JmxTrans deployment.For more information see,
	// https://github.com/jmxtrans/jmxtrans-agent/wiki/Troubleshooting[JmxTrans
	// Logging Level].
	LogLevel *string `json:"logLevel,omitempty"`

	// Defines the output hosts that will be referenced later on. For more information
	// on these properties see,
	// xref:type-JmxTransOutputDefinitionTemplate-reference[`JmxTransOutputDefinitionTemplate`
	// schema reference].
	OutputDefinitions []KafkaSpecJmxTransOutputDefinitionsElem `json:"outputDefinitions"`

	// CPU and memory resources to reserve.
	Resources *KafkaSpecJmxTransResources `json:"resources,omitempty"`

	// Template for JmxTrans resources.
	Template *KafkaSpecJmxTransTemplate `json:"template,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecJmxTrans) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["kafkaQueries"]; !ok || v == nil {
		return fmt.Errorf("field kafkaQueries: required")
	}
	if v, ok := raw["outputDefinitions"]; !ok || v == nil {
		return fmt.Errorf("field outputDefinitions: required")
	}
	type Plain KafkaSpecJmxTrans
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecJmxTrans(plain)
	return nil
}

type KafkaSpecKafkaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecKafkaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecKafkaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaSpecKafkaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecKafkaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecKafkaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecKafkaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaSpecKafkaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty"`
}

type KafkaSpecKafkaAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecKafkaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecKafkaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecKafkaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecKafkaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecKafkaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecKafkaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecKafkaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecKafkaAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecKafkaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecKafkaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecKafkaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecKafkaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecKafkaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecKafkaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecKafkaAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// The pod's affinity rules.
type KafkaSpecKafkaAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaSpecKafkaAffinityNodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaSpecKafkaAffinityPodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaSpecKafkaAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

type KafkaSpecKafkaAuthorizationTlsTrustedCertificatesElem struct {
	// The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaAuthorizationTlsTrustedCertificatesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaSpecKafkaAuthorizationTlsTrustedCertificatesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaAuthorizationTlsTrustedCertificatesElem(plain)
	return nil
}

type KafkaSpecKafkaAuthorizationType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecZookeeperMetricsConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	if v, ok := raw["valueFrom"]; !ok || v == nil {
		return fmt.Errorf("field valueFrom: required")
	}
	type Plain KafkaSpecZookeeperMetricsConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecZookeeperMetricsConfig(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaAuthorizationType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaAuthorizationType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaAuthorizationType, v)
	}
	*j = KafkaSpecKafkaAuthorizationType(v)
	return nil
}

const KafkaSpecKafkaAuthorizationTypeSimple KafkaSpecKafkaAuthorizationType = "simple"
const KafkaSpecKafkaAuthorizationTypeOpa KafkaSpecKafkaAuthorizationType = "opa"
const KafkaSpecKafkaAuthorizationTypeKeycloak KafkaSpecKafkaAuthorizationType = "keycloak"

// Authorization configuration for Kafka brokers.
type KafkaSpecKafkaAuthorization struct {
	// Defines whether a Kafka client should be allowed or denied by default when the
	// authorizer fails to query the Open Policy Agent, for example, when it is
	// temporarily unavailable). Defaults to `false` - all actions will be denied.
	AllowOnError *bool `json:"allowOnError,omitempty"`

	// OAuth Client ID which the Kafka client can use to authenticate against the
	// OAuth server and use the token endpoint URI.
	ClientId *string `json:"clientId,omitempty"`

	// Whether authorization decision should be delegated to the 'Simple' authorizer
	// if DENIED by Keycloak Authorization Services policies. Default value is
	// `false`.
	DelegateToKafkaAcls *bool `json:"delegateToKafkaAcls,omitempty"`

	// Enable or disable TLS hostname verification. Default value is `false`.
	DisableTlsHostnameVerification *bool `json:"disableTlsHostnameVerification,omitempty"`

	// The expiration of the records kept in the local cache to avoid querying the
	// Open Policy Agent for every request. Defines how often the cached authorization
	// decisions are reloaded from the Open Policy Agent server. In milliseconds.
	// Defaults to `3600000`.
	ExpireAfterMs *int32 `json:"expireAfterMs,omitempty"`

	// The time between two consecutive grants refresh runs in seconds. The default
	// value is 60.
	GrantsRefreshPeriodSeconds *int32 `json:"grantsRefreshPeriodSeconds,omitempty"`

	// The number of threads to use to refresh grants for active sessions. The more
	// threads, the more parallelism, so the sooner the job completes. However, using
	// more threads places a heavier load on the authorization server. The default
	// value is 5.
	GrantsRefreshPoolSize *int32 `json:"grantsRefreshPoolSize,omitempty"`

	// Initial capacity of the local cache used by the authorizer to avoid querying
	// the Open Policy Agent for every request Defaults to `5000`.
	InitialCacheCapacity *int32 `json:"initialCacheCapacity,omitempty"`

	// Maximum capacity of the local cache used by the authorizer to avoid querying
	// the Open Policy Agent for every request. Defaults to `50000`.
	MaximumCacheSize *int32 `json:"maximumCacheSize,omitempty"`

	// List of super users. Should contain list of user principals which should get
	// unlimited access rights.
	SuperUsers []string `json:"superUsers,omitempty"`

	// Trusted certificates for TLS connection to the OAuth server.
	TlsTrustedCertificates []KafkaSpecKafkaAuthorizationTlsTrustedCertificatesElem `json:"tlsTrustedCertificates,omitempty"`

	// Authorization server token endpoint URI.
	TokenEndpointUri *string `json:"tokenEndpointUri,omitempty"`

	// Authorization type. Currently, the supported types are `simple`, `keycloak`,
	// and `opa`. `simple` authorization type uses Kafka's
	// `kafka.security.authorizer.AclAuthorizer` class for authorization. `keycloak`
	// authorization type uses Keycloak Authorization Services for authorization.
	// `opa` authorization type uses Open Policy Agent based authorization.
	Type KafkaSpecKafkaAuthorizationType `json:"type"`

	// The URL used to connect to the Open Policy Agent server. The URL has to include
	// the policy which will be queried by the authorizer. This option is required.
	Url *string `json:"url,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaAuthorization) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaSpecKafkaAuthorization
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaAuthorization(plain)
	return nil
}

// Kafka broker config properties with the following prefixes cannot be set:
// listeners, advertised., broker., listener., host.name, port,
// inter.broker.listener.name, sasl., ssl., security., password.,
// principal.builder.class, log.dir, zookeeper.connect, zookeeper.set.acl,
// zookeeper.ssl, zookeeper.clientCnxnSocket, authorizer., super.user,
// cruise.control.metrics.topic, cruise.control.metrics.reporter.bootstrap.servers
// (with the exception of: zookeeper.connection.timeout.ms, ssl.cipher.suites,
// ssl.protocol, ssl.enabled.protocols,cruise.control.metrics.topic.num.partitions,
// cruise.control.metrics.topic.replication.factor,
// cruise.control.metrics.topic.retention.ms,cruise.control.metrics.topic.auto.create.retries,
// cruise.control.metrics.topic.auto.create.timeout.ms,cruise.control.metrics.topic.min.insync.replicas).
type KafkaSpecKafkaConfig map[string]string

type KafkaSpecKafkaJmxOptionsAuthenticationType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecZookeeperMetricsConfigType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecZookeeperMetricsConfigType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecZookeeperMetricsConfigType, v)
	}
	*j = KafkaSpecZookeeperMetricsConfigType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaJmxOptionsAuthenticationType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaJmxOptionsAuthenticationType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaJmxOptionsAuthenticationType, v)
	}
	*j = KafkaSpecKafkaJmxOptionsAuthenticationType(v)
	return nil
}

const KafkaSpecKafkaJmxOptionsAuthenticationTypePassword KafkaSpecKafkaJmxOptionsAuthenticationType = "password"

// Authentication configuration for connecting to the Kafka JMX port.
type KafkaSpecKafkaJmxOptionsAuthentication struct {
	// Authentication type. Currently the only supported types are
	// `password`.`password` type creates a username and protected port with no TLS.
	Type KafkaSpecKafkaJmxOptionsAuthenticationType `json:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaJmxOptionsAuthentication) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaSpecKafkaJmxOptionsAuthentication
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaJmxOptionsAuthentication(plain)
	return nil
}

// JMX Options for Kafka brokers.
type KafkaSpecKafkaJmxOptions struct {
	// Authentication configuration for connecting to the Kafka JMX port.
	Authentication *KafkaSpecKafkaJmxOptionsAuthentication `json:"authentication,omitempty"`
}

// A map of -XX options to the JVM.
type KafkaSpecKafkaJvmOptionsXX map[string]string

type KafkaSpecKafkaJvmOptionsJavaSystemPropertiesElem struct {
	// The system property name.
	Name *string `json:"name,omitempty"`

	// The system property value.
	Value *string `json:"value,omitempty"`
}

// JVM Options for pods.
type KafkaSpecKafkaJvmOptions struct {
	// A map of -XX options to the JVM.
	XX KafkaSpecKafkaJvmOptionsXX `json:"-XX,omitempty"`

	// -Xms option to to the JVM.
	Xms *string `json:"-Xms,omitempty"`

	// -Xmx option to to the JVM.
	Xmx *string `json:"-Xmx,omitempty"`

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	GcLoggingEnabled *bool `json:"gcLoggingEnabled,omitempty"`

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	JavaSystemProperties []KafkaSpecKafkaJvmOptionsJavaSystemPropertiesElem `json:"javaSystemProperties,omitempty"`
}

// Link to Kubernetes Secret containing the OAuth client secret which the Kafka
// broker can use to authenticate against the authorization server and use the
// introspect endpoint URI.
type KafkaSpecKafkaListenersElemAuthenticationClientSecret struct {
	// The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key"`

	// The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaListenersElemAuthenticationClientSecret) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaSpecKafkaListenersElemAuthenticationClientSecret
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaListenersElemAuthenticationClientSecret(plain)
	return nil
}

type KafkaSpecKafkaListenersElemAuthenticationTlsTrustedCertificatesElem struct {
	// The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaListenersElemAuthenticationTlsTrustedCertificatesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaSpecKafkaListenersElemAuthenticationTlsTrustedCertificatesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaListenersElemAuthenticationTlsTrustedCertificatesElem(plain)
	return nil
}

type KafkaSpecKafkaListenersElemAuthenticationType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecZookeeperLogging) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaSpecZookeeperLogging
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecZookeeperLogging(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaListenersElemAuthenticationType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaListenersElemAuthenticationType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaListenersElemAuthenticationType, v)
	}
	*j = KafkaSpecKafkaListenersElemAuthenticationType(v)
	return nil
}

const KafkaSpecKafkaListenersElemAuthenticationTypeTls KafkaSpecKafkaListenersElemAuthenticationType = "tls"
const KafkaSpecKafkaListenersElemAuthenticationTypeScramSha512 KafkaSpecKafkaListenersElemAuthenticationType = "scram-sha-512"
const KafkaSpecKafkaListenersElemAuthenticationTypeOauth KafkaSpecKafkaListenersElemAuthenticationType = "oauth"

// Authentication configuration for this listener.
type KafkaSpecKafkaListenersElemAuthentication struct {
	// Configure whether the access token is treated as JWT. This must be set to
	// `false` if the authorization server returns opaque tokens. Defaults to `true`.
	AccessTokenIsJwt *bool `json:"accessTokenIsJwt,omitempty"`

	// Configure whether the access token type check is performed or not. This should
	// be set to `false` if the authorization server does not include 'typ' claim in
	// JWT token. Defaults to `true`.
	CheckAccessTokenType *bool `json:"checkAccessTokenType,omitempty"`

	// Enable or disable issuer checking. By default issuer is checked using the value
	// configured by `validIssuerUri`. Default value is `true`.
	CheckIssuer *bool `json:"checkIssuer,omitempty"`

	// OAuth Client ID which the Kafka broker can use to authenticate against the
	// authorization server and use the introspect endpoint URI.
	ClientId *string `json:"clientId,omitempty"`

	// Link to Kubernetes Secret containing the OAuth client secret which the Kafka
	// broker can use to authenticate against the authorization server and use the
	// introspect endpoint URI.
	ClientSecret *KafkaSpecKafkaListenersElemAuthenticationClientSecret `json:"clientSecret,omitempty"`

	// Enable or disable TLS hostname verification. Default value is `false`.
	DisableTlsHostnameVerification *bool `json:"disableTlsHostnameVerification,omitempty"`

	// Enable or disable ECDSA support by installing BouncyCastle crypto provider.
	// Default value is `false`.
	EnableECDSA *bool `json:"enableECDSA,omitempty"`

	// The fallback username claim to be used for the user id if the claim specified
	// by `userNameClaim` is not present. This is useful when `client_credentials`
	// authentication only results in the client id being provided in another claim.
	// It only takes effect if `userNameClaim` is set.
	FallbackUserNameClaim *string `json:"fallbackUserNameClaim,omitempty"`

	// The prefix to use with the value of `fallbackUserNameClaim` to construct the
	// user id. This only takes effect if `fallbackUserNameClaim` is true, and the
	// value is present for the claim. Mapping usernames and client ids into the same
	// user id space is useful in preventing name collisions.
	FallbackUserNamePrefix *string `json:"fallbackUserNamePrefix,omitempty"`

	// URI of the token introspection endpoint which can be used to validate opaque
	// non-JWT tokens.
	IntrospectionEndpointUri *string `json:"introspectionEndpointUri,omitempty"`

	// URI of the JWKS certificate endpoint, which can be used for local JWT
	// validation.
	JwksEndpointUri *string `json:"jwksEndpointUri,omitempty"`

	// Configures how often are the JWKS certificates considered valid. The expiry
	// interval has to be at least 60 seconds longer then the refresh interval
	// specified in `jwksRefreshSeconds`. Defaults to 360 seconds.
	JwksExpirySeconds *int32 `json:"jwksExpirySeconds,omitempty"`

	// The minimum pause between two consecutive refreshes. When an unknown signing
	// key is encountered the refresh is scheduled immediately, but will always wait
	// for this minimum pause. Defaults to 1 second.
	JwksMinRefreshPauseSeconds *int32 `json:"jwksMinRefreshPauseSeconds,omitempty"`

	// Configures how often are the JWKS certificates refreshed. The refresh interval
	// has to be at least 60 seconds shorter then the expiry interval specified in
	// `jwksExpirySeconds`. Defaults to 300 seconds.
	JwksRefreshSeconds *int32 `json:"jwksRefreshSeconds,omitempty"`

	// Maximum number of seconds the authenticated session remains valid without
	// re-authentication. This enables Apache Kafka re-authentication feature, and
	// causes sessions to expire when the access token expires. If the access token
	// expires before max time or if max time is reached, the client has to
	// re-authenticate, otherwise the server will drop the connection. Not set by
	// default - the authenticated session does not expire when the access token
	// expires.
	MaxSecondsWithoutReauthentication *int32 `json:"maxSecondsWithoutReauthentication,omitempty"`

	// Trusted certificates for TLS connection to the OAuth server.
	TlsTrustedCertificates []KafkaSpecKafkaListenersElemAuthenticationTlsTrustedCertificatesElem `json:"tlsTrustedCertificates,omitempty"`

	// Authentication type. `oauth` type uses SASL OAUTHBEARER Authentication.
	// `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `tls` type uses
	// TLS Client Authentication. `tls` type is supported only on TLS listeners.
	Type KafkaSpecKafkaListenersElemAuthenticationType `json:"type"`

	// URI of the User Info Endpoint to use as a fallback to obtaining the user id
	// when the Introspection Endpoint does not return information that can be used
	// for the user id.
	UserInfoEndpointUri *string `json:"userInfoEndpointUri,omitempty"`

	// Name of the claim from the JWT authentication token, Introspection Endpoint
	// response or User Info Endpoint response which will be used to extract the user
	// id. Defaults to `sub`.
	UserNameClaim *string `json:"userNameClaim,omitempty"`

	// URI of the token issuer used for authentication.
	ValidIssuerUri *string `json:"validIssuerUri,omitempty"`

	// Valid value for the `token_type` attribute returned by the Introspection
	// Endpoint. No default value, and not checked by default.
	ValidTokenType *string `json:"validTokenType,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaListenersElemAuthentication) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaSpecKafkaListenersElemAuthentication
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaListenersElemAuthentication(plain)
	return nil
}

// Annotations that will be added to the `Ingress` or `Service` resource. You can
// use this field to configure DNS providers such as External DNS. This field can
// be used only with `loadbalancer`, `nodeport`, or `ingress` type listeners.
type KafkaSpecKafkaListenersElemConfigurationBootstrapAnnotations map[string]string

// Bootstrap configuration.
type KafkaSpecKafkaListenersElemConfigurationBootstrap struct {
	// Additional alternative names for the bootstrap service. The alternative names
	// will be added to the list of subject alternative names of the TLS certificates.
	AlternativeNames []string `json:"alternativeNames,omitempty"`

	// Annotations that will be added to the `Ingress` or `Service` resource. You can
	// use this field to configure DNS providers such as External DNS. This field can
	// be used only with `loadbalancer`, `nodeport`, or `ingress` type listeners.
	Annotations KafkaSpecKafkaListenersElemConfigurationBootstrapAnnotations `json:"annotations,omitempty"`

	// The bootstrap host. This field will be used in the Ingress resource or in the
	// Route resource to specify the desired hostname. This field can be used only
	// with `route` (optional) or `ingress` (required) type listeners.
	Host *string `json:"host,omitempty"`

	// The loadbalancer is requested with the IP address specified in this field. This
	// feature depends on whether the underlying cloud provider supports specifying
	// the `loadBalancerIP` when a load balancer is created. This field is ignored if
	// the cloud provider does not support the feature.This field can be used only
	// with `loadbalancer` type listener.
	LoadBalancerIP *string `json:"loadBalancerIP,omitempty"`

	// Node port for the bootstrap service. This field can be used only with
	// `nodeport` type listener.
	NodePort *int32 `json:"nodePort,omitempty"`
}

// Reference to the `Secret` which holds the certificate and private key pair which
// will be used for this listener. The certificate can optionally contain the whole
// chain. This field can be used only with listeners with enabled TLS encryption.
type KafkaSpecKafkaListenersElemConfigurationBrokerCertChainAndKey struct {
	// The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// The name of the private key in the Secret.
	Key string `json:"key"`

	// The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaListenersElemConfigurationBrokerCertChainAndKey) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate: required")
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaSpecKafkaListenersElemConfigurationBrokerCertChainAndKey
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaListenersElemConfigurationBrokerCertChainAndKey(plain)
	return nil
}

// Annotations that will be added to the `Ingress` or `Service` resource. You can
// use this field to configure DNS providers such as External DNS. This field can
// be used only with `loadbalancer`, `nodeport`, or `ingress` type listeners.
type KafkaSpecKafkaListenersElemConfigurationBrokersElemAnnotations map[string]string

type KafkaSpecKafkaListenersElemConfigurationBrokersElem struct {
	// The host name which will be used in the brokers' `advertised.brokers`.
	AdvertisedHost *string `json:"advertisedHost,omitempty"`

	// The port number which will be used in the brokers' `advertised.brokers`.
	AdvertisedPort *int32 `json:"advertisedPort,omitempty"`

	// Annotations that will be added to the `Ingress` or `Service` resource. You can
	// use this field to configure DNS providers such as External DNS. This field can
	// be used only with `loadbalancer`, `nodeport`, or `ingress` type listeners.
	Annotations KafkaSpecKafkaListenersElemConfigurationBrokersElemAnnotations `json:"annotations,omitempty"`

	// ID of the kafka broker (broker identifier). Broker IDs start from 0 and
	// correspond to the number of broker replicas.
	Broker int32 `json:"broker"`

	// The broker host. This field will be used in the Ingress resource or in the
	// Route resource to specify the desired hostname. This field can be used only
	// with `route` (optional) or `ingress` (required) type listeners.
	Host *string `json:"host,omitempty"`

	// The loadbalancer is requested with the IP address specified in this field. This
	// feature depends on whether the underlying cloud provider supports specifying
	// the `loadBalancerIP` when a load balancer is created. This field is ignored if
	// the cloud provider does not support the feature.This field can be used only
	// with `loadbalancer` type listener.
	LoadBalancerIP *string `json:"loadBalancerIP,omitempty"`

	// Node port for the per-broker service. This field can be used only with
	// `nodeport` type listener.
	NodePort *int32 `json:"nodePort,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaListenersElemConfigurationBrokersElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["broker"]; !ok || v == nil {
		return fmt.Errorf("field broker: required")
	}
	type Plain KafkaSpecKafkaListenersElemConfigurationBrokersElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaListenersElemConfigurationBrokersElem(plain)
	return nil
}

type KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecZookeeperLoggingType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecZookeeperLoggingType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecZookeeperLoggingType, v)
	}
	*j = KafkaSpecZookeeperLoggingType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy, v)
	}
	*j = KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy(v)
	return nil
}

const KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicyLocal KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy = "Local"
const KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicyCluster KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy = "Cluster"

type KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecTopicOperatorTlsSidecarLogLevel) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecTopicOperatorTlsSidecarLogLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecTopicOperatorTlsSidecarLogLevel, v)
	}
	*j = KafkaSpecTopicOperatorTlsSidecarLogLevel(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType, v)
	}
	*j = KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType(v)
	return nil
}

const KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeExternalIP KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType = "ExternalIP"
const KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeExternalDNS KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType = "ExternalDNS"
const KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeInternalIP KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType = "InternalIP"
const KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeInternalDNS KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType = "InternalDNS"
const KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeHostname KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType = "Hostname"

// Additional listener configuration.
type KafkaSpecKafkaListenersElemConfiguration struct {
	// Bootstrap configuration.
	Bootstrap *KafkaSpecKafkaListenersElemConfigurationBootstrap `json:"bootstrap,omitempty"`

	// Reference to the `Secret` which holds the certificate and private key pair
	// which will be used for this listener. The certificate can optionally contain
	// the whole chain. This field can be used only with listeners with enabled TLS
	// encryption.
	BrokerCertChainAndKey *KafkaSpecKafkaListenersElemConfigurationBrokerCertChainAndKey `json:"brokerCertChainAndKey,omitempty"`

	// Per-broker configurations.
	Brokers []KafkaSpecKafkaListenersElemConfigurationBrokersElem `json:"brokers,omitempty"`

	// Configures the `Ingress` class that defines which `Ingress` controller will be
	// used. If not set, the `Ingress` class is set to `nginx`. This field can be used
	// only with `ingress` type listener.
	Class *string `json:"class,omitempty"`

	// Specifies whether the service routes external traffic to node-local or
	// cluster-wide endpoints. `Cluster` may cause a second hop to another node and
	// obscures the client source IP. `Local` avoids a second hop for LoadBalancer and
	// Nodeport type services and preserves the client source IP (when supported by
	// the infrastructure). If unspecified, Kubernetes will use `Cluster` as the
	// default.This field can be used only with `loadbalancer` or `nodeport` type
	// listener.
	ExternalTrafficPolicy *KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy `json:"externalTrafficPolicy,omitempty"`

	// A list of CIDR ranges (for example `10.0.0.0/8` or `130.211.204.1/32`) from
	// which clients can connect to load balancer type listeners. If supported by the
	// platform, traffic through the loadbalancer is restricted to the specified CIDR
	// ranges. This field is applicable only for loadbalancer type services and is
	// ignored if the cloud provider does not support the feature. For more
	// information, see
	// https://v1-17.docs.kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/.
	// This field can be used only with `loadbalancer` type listener.
	LoadBalancerSourceRanges []string `json:"loadBalancerSourceRanges,omitempty"`

	// Defines which address type should be used as the node address. Available types
	// are: `ExternalDNS`, `ExternalIP`, `InternalDNS`, `InternalIP` and `Hostname`.
	// By default, the addresses will be used in the following order (the first one
	// found will be used):
	// * `ExternalDNS`
	// * `ExternalIP`
	// * `InternalDNS`
	// * `InternalIP`
	// * `Hostname`
	//
	// This field can be used to select the address type which will be used as the
	// preferred type and checked first. In case no address will be found for this
	// address type, the other types will be used in the default order.This field can
	// be used only with `nodeport` type listener..
	PreferredNodePortAddressType *KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType `json:"preferredNodePortAddressType,omitempty"`

	// Configures whether the Kubernetes service DNS domain should be used or not. If
	// set to `true`, the generated addresses will contain the service DNS domain
	// suffix (by default `.cluster.local`, can be configured using environment
	// variable `KUBERNETES_SERVICE_DNS_DOMAIN`). Defaults to `false`.This field can
	// be used only with `internal` type listener.
	UseServiceDnsDomain *bool `json:"useServiceDnsDomain,omitempty"`
}

type KafkaSpecKafkaListenersElemNetworkPolicyPeersElemIpBlock struct {
	// Cidr corresponds to the JSON schema field "cidr".
	Cidr *string `json:"cidr,omitempty"`

	// Except corresponds to the JSON schema field "except".
	Except []string `json:"except,omitempty"`
}

type KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelectorMatchLabels map[string]string

type KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelectorMatchLabels map[string]string

type KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaListenersElemNetworkPolicyPeersElem struct {
	// IpBlock corresponds to the JSON schema field "ipBlock".
	IpBlock *KafkaSpecKafkaListenersElemNetworkPolicyPeersElemIpBlock `json:"ipBlock,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelector `json:"namespaceSelector,omitempty"`

	// PodSelector corresponds to the JSON schema field "podSelector".
	PodSelector *KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelector `json:"podSelector,omitempty"`
}

type KafkaSpecKafkaListenersElemType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecTopicOperatorLogging) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaSpecTopicOperatorLogging
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecTopicOperatorLogging(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaListenersElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaListenersElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaListenersElemType, v)
	}
	*j = KafkaSpecKafkaListenersElemType(v)
	return nil
}

const KafkaSpecKafkaListenersElemTypeInternal KafkaSpecKafkaListenersElemType = "internal"
const KafkaSpecKafkaListenersElemTypeRoute KafkaSpecKafkaListenersElemType = "route"
const KafkaSpecKafkaListenersElemTypeLoadbalancer KafkaSpecKafkaListenersElemType = "loadbalancer"
const KafkaSpecKafkaListenersElemTypeNodeport KafkaSpecKafkaListenersElemType = "nodeport"
const KafkaSpecKafkaListenersElemTypeIngress KafkaSpecKafkaListenersElemType = "ingress"

type KafkaSpecKafkaListenersElem struct {
	// Authentication configuration for this listener.
	Authentication *KafkaSpecKafkaListenersElemAuthentication `json:"authentication,omitempty"`

	// Additional listener configuration.
	Configuration *KafkaSpecKafkaListenersElemConfiguration `json:"configuration,omitempty"`

	// Name of the listener. The name will be used to identify the listener and the
	// related Kubernetes objects. The name has to be unique within given a Kafka
	// cluster. The name can consist of lowercase characters and numbers and be up to
	// 11 characters long.
	Name string `json:"name"`

	// List of peers which should be able to connect to this listener. Peers in this
	// list are combined using a logical OR operation. If this field is empty or
	// missing, all connections will be allowed for this listener. If this field is
	// present and contains at least one item, the listener only allows the traffic
	// which matches at least one item in this list.
	NetworkPolicyPeers []KafkaSpecKafkaListenersElemNetworkPolicyPeersElem `json:"networkPolicyPeers,omitempty"`

	// Port number used by the listener inside Kafka. The port number has to be unique
	// within a given Kafka cluster. Allowed port numbers are 9092 and higher with the
	// exception of ports 9404 and 9999, which are already used for Prometheus and
	// JMX. Depending on the listener type, the port number might not be the same as
	// the port number that connects Kafka clients.
	Port int32 `json:"port"`

	// Enables TLS encryption on the listener. This is a required property.
	Tls bool `json:"tls"`

	// Type of the listener. Currently the supported types are `internal`, `route`,
	// `loadbalancer`, `nodeport` and `ingress`.
	//
	// * `internal` type exposes Kafka internally only within the Kubernetes cluster.
	// * `route` type uses OpenShift Routes to expose Kafka.
	// * `loadbalancer` type uses LoadBalancer type services to expose Kafka.
	// * `nodeport` type uses NodePort type services to expose Kafka.
	// * `ingress` type uses Kubernetes Nginx Ingress to expose Kafka.
	// .
	Type KafkaSpecKafkaListenersElemType `json:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaListenersElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["port"]; !ok || v == nil {
		return fmt.Errorf("field port: required")
	}
	if v, ok := raw["tls"]; !ok || v == nil {
		return fmt.Errorf("field tls: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaSpecKafkaListenersElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaListenersElem(plain)
	return nil
}

// Pod liveness checking.
type KafkaSpecKafkaLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// A Map from logger name to logger level.
type KafkaSpecKafkaLoggingLoggers map[string]string

type KafkaSpecKafkaLoggingType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecTopicOperatorLoggingType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecTopicOperatorLoggingType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecTopicOperatorLoggingType, v)
	}
	*j = KafkaSpecTopicOperatorLoggingType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaLoggingType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaLoggingType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaLoggingType, v)
	}
	*j = KafkaSpecKafkaLoggingType(v)
	return nil
}

const KafkaSpecKafkaLoggingTypeInline KafkaSpecKafkaLoggingType = "inline"
const KafkaSpecKafkaLoggingTypeExternal KafkaSpecKafkaLoggingType = "external"

// Logging configuration for Kafka.
type KafkaSpecKafkaLogging struct {
	// A Map from logger name to logger level.
	Loggers KafkaSpecKafkaLoggingLoggers `json:"loggers,omitempty"`

	// The name of the `ConfigMap` from which to get the logging configuration.
	Name *string `json:"name,omitempty"`

	// Logging type, must be either 'inline' or 'external'.
	Type KafkaSpecKafkaLoggingType `json:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaLogging) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaSpecKafkaLogging
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaLogging(plain)
	return nil
}

// The Prometheus JMX Exporter configuration. See
// https://github.com/prometheus/jmx_exporter for details of the structure of this
// configuration.
type KafkaSpecKafkaMetrics map[string]string

type KafkaSpecKafkaMetricsConfigType string

// Configuration of the Kafka Exporter. Kafka Exporter can provide additional
// metrics, for example lag of consumer group at topic/partition.
type KafkaSpecKafkaExporter struct {
	// Enable Sarama logging, a Go client library used by the Kafka Exporter.
	EnableSaramaLogging *bool `json:"enableSaramaLogging,omitempty"`

	// Regular expression to specify which consumer groups to collect. Default value
	// is `.*`.
	GroupRegex *string `json:"groupRegex,omitempty"`

	// The docker image for the pods.
	Image *string `json:"image,omitempty"`

	// Pod liveness check.
	LivenessProbe *KafkaSpecKafkaExporterLivenessProbe `json:"livenessProbe,omitempty"`

	// Only log messages with the given severity or above. Valid levels: [`debug`,
	// `info`, `warn`, `error`, `fatal`]. Default log level is `info`.
	Logging *string `json:"logging,omitempty"`

	// Pod readiness check.
	ReadinessProbe *KafkaSpecKafkaExporterReadinessProbe `json:"readinessProbe,omitempty"`

	// CPU and memory resources to reserve.
	Resources *KafkaSpecKafkaExporterResources `json:"resources,omitempty"`

	// Customization of deployment templates and pods.
	Template *KafkaSpecKafkaExporterTemplate `json:"template,omitempty"`

	// Regular expression to specify which topics to collect. Default value is `.*`.
	TopicRegex *string `json:"topicRegex,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaMetricsConfigType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaMetricsConfigType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaMetricsConfigType, v)
	}
	*j = KafkaSpecKafkaMetricsConfigType(v)
	return nil
}

const KafkaSpecKafkaMetricsConfigTypeJmxPrometheusExporter KafkaSpecKafkaMetricsConfigType = "jmxPrometheusExporter"

// Reference to the key in the ConfigMap containing the metrics configuration.
type KafkaSpecKafkaMetricsConfigValueFromConfigMapKeyRef struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty"`
}

// ConfigMap where the Prometheus JMX Exporter configuration is stored. For details
// of the structure of this configuration, see the {JMXExporter}.
type KafkaSpecKafkaMetricsConfigValueFrom struct {
	// Reference to the key in the ConfigMap containing the metrics configuration.
	ConfigMapKeyRef *KafkaSpecKafkaMetricsConfigValueFromConfigMapKeyRef `json:"configMapKeyRef,omitempty"`
}

// Metrics configuration.
type KafkaSpecKafkaMetricsConfig struct {
	// Metrics type. Only 'jmxPrometheusExporter' supported currently.
	Type KafkaSpecKafkaMetricsConfigType `json:"type"`

	// ConfigMap where the Prometheus JMX Exporter configuration is stored. For
	// details of the structure of this configuration, see the {JMXExporter}.
	ValueFrom KafkaSpecKafkaMetricsConfigValueFrom `json:"valueFrom"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaMetricsConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	if v, ok := raw["valueFrom"]; !ok || v == nil {
		return fmt.Errorf("field valueFrom: required")
	}
	type Plain KafkaSpecKafkaMetricsConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaMetricsConfig(plain)
	return nil
}

// Configuration of the `broker.rack` broker config.
type KafkaSpecKafkaRack struct {
	// A key that matches labels assigned to the Kubernetes cluster nodes. The value
	// of the label is used to set the broker's `broker.rack` config and `client.rack`
	// in Kafka Connect.
	TopologyKey string `json:"topologyKey"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaRack) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["topologyKey"]; !ok || v == nil {
		return fmt.Errorf("field topologyKey: required")
	}
	type Plain KafkaSpecKafkaRack
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaRack(plain)
	return nil
}

// Pod readiness checking.
type KafkaSpecKafkaReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

type KafkaSpecKafkaResourcesLimits map[string]string

type KafkaSpecKafkaResourcesRequests map[string]string

// CPU and memory resources to reserve.
type KafkaSpecKafkaResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits KafkaSpecKafkaResourcesLimits `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests KafkaSpecKafkaResourcesRequests `json:"requests,omitempty"`
}

type KafkaSpecKafkaStorageOverridesElem struct {
	// Id of the kafka broker (broker identifier).
	Broker *int32 `json:"broker,omitempty"`

	// The storage class to use for dynamic volume allocation for this broker.
	Class *string `json:"class,omitempty"`
}

const KafkaSpecCruiseControlTlsSidecarLogLevelErr KafkaSpecCruiseControlTlsSidecarLogLevel = "err"

// Customization of deployment templates and pods.
type KafkaSpecKafkaExporterTemplate struct {
	// Template for the Kafka Exporter container.
	Container *KafkaSpecKafkaExporterTemplateContainer `json:"container,omitempty"`

	// Template for Kafka Exporter `Deployment`.
	Deployment *KafkaSpecKafkaExporterTemplateDeployment `json:"deployment,omitempty"`

	// Template for Kafka Exporter `Pods`.
	Pod *KafkaSpecKafkaExporterTemplatePod `json:"pod,omitempty"`

	// Template for Kafka Exporter `Service`.
	Service *KafkaSpecKafkaExporterTemplateService `json:"service,omitempty"`
}

// Template for Kafka Exporter `Service`.
type KafkaSpecKafkaExporterTemplateService struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaExporterTemplateServiceMetadata `json:"metadata,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaStorageType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaStorageType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaStorageType, v)
	}
	*j = KafkaSpecKafkaStorageType(v)
	return nil
}

// Metadata applied to the resource.
type KafkaSpecKafkaExporterTemplateServiceMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaExporterTemplateServiceMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaExporterTemplateServiceMetadataLabels `json:"labels,omitempty"`
}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaExporterTemplateServiceMetadataLabels map[string]string

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaExporterTemplateServiceMetadataAnnotations map[string]string

// Template for Kafka Exporter `Pods`.
type KafkaSpecKafkaExporterTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecKafkaExporterTemplatePodAffinity `json:"affinity,omitempty"`

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the pod's hosts file if specified.
	HostAliases []KafkaSpecKafkaExporterTemplatePodHostAliasesElem `json:"hostAliases,omitempty"`

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []KafkaSpecKafkaExporterTemplatePodImagePullSecretsElem `json:"imagePullSecrets,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaExporterTemplatePodMetadata `json:"metadata,omitempty"`

	// The name of the priority class used to assign priority to the pods. For more
	// information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `json:"priorityClassName,omitempty"`

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	SchedulerName *string `json:"schedulerName,omitempty"`

	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaSpecKafkaExporterTemplatePodSecurityContext `json:"securityContext,omitempty"`

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	TerminationGracePeriodSeconds *int32 `json:"terminationGracePeriodSeconds,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaSpecKafkaExporterTemplatePodTolerationsElem `json:"tolerations,omitempty"`

	// The pod's topology spread constraints.
	TopologySpreadConstraints []KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElem `json:"topologySpreadConstraints,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelector `json:"labelSelector,omitempty"`

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	MaxSkew *int32 `json:"maxSkew,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	WhenUnsatisfiable *string `json:"whenUnsatisfiable,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels map[string]string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaStorageVolumesElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaStorageVolumesElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaStorageVolumesElemType, v)
	}
	*j = KafkaSpecKafkaStorageVolumesElemType(v)
	return nil
}

type KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

// Configures pod-level security attributes and common container settings.
type KafkaSpecKafkaExporterTemplatePodSecurityContext struct {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	FsGroup *int32 `json:"fsGroup,omitempty"`

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecKafkaExporterTemplatePodSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecKafkaExporterTemplatePodSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	SupplementalGroups []int32 `json:"supplementalGroups,omitempty"`

	// Sysctls corresponds to the JSON schema field "sysctls".
	Sysctls []KafkaSpecKafkaExporterTemplatePodSecurityContextSysctlsElem `json:"sysctls,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecKafkaExporterTemplatePodSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaStorageVolumesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaSpecKafkaStorageVolumesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaStorageVolumesElem(plain)
	return nil
}

// Storage configuration (disk). Cannot be updated.
type KafkaSpecKafkaStorage struct {
	// The storage class to use for dynamic volume allocation.
	Class *string `json:"class,omitempty"`

	// Specifies if the persistent volume claim has to be deleted when the cluster is
	// un-deployed.
	DeleteClaim *bool `json:"deleteClaim,omitempty"`

	// Storage identification number. It is mandatory only for storage volumes defined
	// in a storage of type 'jbod'.
	Id *int32 `json:"id,omitempty"`

	// Overrides for individual brokers. The `overrides` field allows to specify a
	// different configuration for different brokers.
	Overrides []KafkaSpecKafkaStorageOverridesElem `json:"overrides,omitempty"`

	// Specifies a specific persistent volume to use. It contains key:value pairs
	// representing labels for selecting such a volume.
	Selector KafkaSpecKafkaStorageSelector `json:"selector,omitempty"`

	// When type=persistent-claim, defines the size of the persistent volume claim
	// (i.e 1Gi). Mandatory when type=persistent-claim.
	Size *string `json:"size,omitempty"`

	// When type=ephemeral, defines the total amount of local storage required for
	// this EmptyDir volume (for example 1Gi).
	SizeLimit *string `json:"sizeLimit,omitempty"`

	// Storage type, must be either 'ephemeral', 'persistent-claim', or 'jbod'.
	Type KafkaSpecKafkaStorageType `json:"type"`

	// List of volumes as Storage objects representing the JBOD disks array.
	Volumes []KafkaSpecKafkaStorageVolumesElem `json:"volumes,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaStorage) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaSpecKafkaStorage
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafkaStorage(plain)
	return nil
}

type KafkaSpecKafkaExporterTemplatePodSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodSecurityContextSysctlsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaExporterTemplatePodMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaExporterTemplatePodMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaExporterTemplatePodMetadataLabels `json:"labels,omitempty"`
}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaExporterTemplatePodMetadataLabels map[string]string

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaExporterTemplatePodMetadataAnnotations map[string]string

type KafkaSpecKafkaExporterTemplatePodImagePullSecretsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodHostAliasesElem struct {
	// Hostnames corresponds to the JSON schema field "hostnames".
	Hostnames []string `json:"hostnames,omitempty"`

	// Ip corresponds to the JSON schema field "ip".
	Ip *string `json:"ip,omitempty"`
}

// The pod's affinity rules.
type KafkaSpecKafkaExporterTemplatePodAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaSpecKafkaExporterTemplatePodAffinityPodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaTemplateExternalBootstrapServiceExternalTrafficPolicy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaTemplateExternalBootstrapServiceExternalTrafficPolicy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaTemplateExternalBootstrapServiceExternalTrafficPolicy, v)
	}
	*j = KafkaSpecKafkaTemplateExternalBootstrapServiceExternalTrafficPolicy(v)
	return nil
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

// Template for Kafka Exporter `Deployment`.
type KafkaSpecKafkaExporterTemplateDeployment struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaExporterTemplateDeploymentMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaExporterTemplateDeploymentMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaExporterTemplateDeploymentMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaExporterTemplateDeploymentMetadataLabels `json:"labels,omitempty"`
}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaExporterTemplateDeploymentMetadataLabels map[string]string

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaExporterTemplateDeploymentMetadataAnnotations map[string]string

// Template for the Kafka Exporter container.
type KafkaSpecKafkaExporterTemplateContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaSpecKafkaExporterTemplateContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaSpecKafkaExporterTemplateContainerSecurityContext `json:"securityContext,omitempty"`
}

// Security context for the container.
type KafkaSpecKafkaExporterTemplateContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaSpecKafkaExporterTemplateContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecKafkaExporterTemplateContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecKafkaExporterTemplateContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecKafkaExporterTemplateContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaSpecKafkaExporterTemplateContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

type KafkaSpecKafkaExporterTemplateContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecKafkaExporterTemplateContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecKafkaExporterTemplateContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaSpecKafkaExporterTemplateContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

// CPU and memory resources to reserve.
type KafkaSpecKafkaExporterResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits KafkaSpecKafkaExporterResourcesLimits `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests KafkaSpecKafkaExporterResourcesRequests `json:"requests,omitempty"`
}

type KafkaSpecKafkaExporterResourcesRequests map[string]string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaTemplatePerPodServiceExternalTrafficPolicy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaTemplatePerPodServiceExternalTrafficPolicy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaTemplatePerPodServiceExternalTrafficPolicy, v)
	}
	*j = KafkaSpecKafkaTemplatePerPodServiceExternalTrafficPolicy(v)
	return nil
}

type KafkaSpecKafkaExporterResourcesLimits map[string]string

// Pod readiness check.
type KafkaSpecKafkaExporterReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// Pod liveness check.
type KafkaSpecKafkaExporterLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafka) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["listeners"]; !ok || v == nil {
		return fmt.Errorf("field listeners: required")
	}
	if v, ok := raw["replicas"]; !ok || v == nil {
		return fmt.Errorf("field replicas: required")
	}
	if v, ok := raw["storage"]; !ok || v == nil {
		return fmt.Errorf("field storage: required")
	}
	type Plain KafkaSpecKafka
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaSpecKafka(plain)
	return nil
}

// Configuration of the Kafka cluster.
type KafkaSpecKafka struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecKafkaAffinity `json:"affinity,omitempty"`

	// Authorization configuration for Kafka brokers.
	Authorization *KafkaSpecKafkaAuthorization `json:"authorization,omitempty"`

	// The image of the init container used for initializing the `broker.rack`.
	BrokerRackInitImage *string `json:"brokerRackInitImage,omitempty"`

	// Kafka broker config properties with the following prefixes cannot be set:
	// listeners, advertised., broker., listener., host.name, port,
	// inter.broker.listener.name, sasl., ssl., security., password.,
	// principal.builder.class, log.dir, zookeeper.connect, zookeeper.set.acl,
	// zookeeper.ssl, zookeeper.clientCnxnSocket, authorizer., super.user,
	// cruise.control.metrics.topic, cruise.control.metrics.reporter.bootstrap.servers
	// (with the exception of: zookeeper.connection.timeout.ms, ssl.cipher.suites,
	// ssl.protocol,
	// ssl.enabled.protocols,cruise.control.metrics.topic.num.partitions,
	// cruise.control.metrics.topic.replication.factor,
	// cruise.control.metrics.topic.retention.ms,cruise.control.metrics.topic.auto.create.retries,
	// cruise.control.metrics.topic.auto.create.timeout.ms,cruise.control.metrics.topic.min.insync.replicas).
	Config KafkaSpecKafkaConfig `json:"config,omitempty"`

	// The docker image for the pods. The default value depends on the configured
	// `Kafka.spec.kafka.version`.
	Image *string `json:"image,omitempty"`

	// JMX Options for Kafka brokers.
	JmxOptions *KafkaSpecKafkaJmxOptions `json:"jmxOptions,omitempty"`

	// JVM Options for pods.
	JvmOptions *KafkaSpecKafkaJvmOptions `json:"jvmOptions,omitempty"`

	// Listeners corresponds to the JSON schema field "listeners".
	Listeners []KafkaSpecKafkaListenersElem `json:"listeners"`

	// Pod liveness checking.
	LivenessProbe *KafkaSpecKafkaLivenessProbe `json:"livenessProbe,omitempty"`

	// Logging configuration for Kafka.
	Logging *KafkaSpecKafkaLogging `json:"logging,omitempty"`

	// The Prometheus JMX Exporter configuration. See
	// https://github.com/prometheus/jmx_exporter for details of the structure of this
	// configuration.
	Metrics KafkaSpecKafkaMetrics `json:"metrics,omitempty"`

	// Metrics configuration.
	MetricsConfig *KafkaSpecKafkaMetricsConfig `json:"metricsConfig,omitempty"`

	// Configuration of the `broker.rack` broker config.
	Rack *KafkaSpecKafkaRack `json:"rack,omitempty"`

	// Pod readiness checking.
	ReadinessProbe *KafkaSpecKafkaReadinessProbe `json:"readinessProbe,omitempty"`

	// The number of pods in the cluster.
	Replicas int32 `json:"replicas"`

	// CPU and memory resources to reserve.
	Resources *KafkaSpecKafkaResources `json:"resources,omitempty"`

	// Storage configuration (disk). Cannot be updated.
	Storage KafkaSpecKafkaStorage `json:"storage"`

	// Template for Kafka cluster resources. The template allows users to specify how
	// are the `StatefulSet`, `Pods` and `Services` generated.
	Template *KafkaSpecKafkaTemplate `json:"template,omitempty"`

	// TLS sidecar configuration.
	TlsSidecar *KafkaSpecKafkaTlsSidecar `json:"tlsSidecar,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaSpecKafkaTolerationsElem `json:"tolerations,omitempty"`

	// The kafka broker version. Defaults to {DefaultKafkaVersion}. Consult the user
	// documentation to understand the process required to upgrade or downgrade the
	// version.
	Version *string `json:"version,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaSpecKafkaTlsSidecarLogLevel) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaSpecKafkaTlsSidecarLogLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaSpecKafkaTlsSidecarLogLevel, v)
	}
	*j = KafkaSpecKafkaTlsSidecarLogLevel(v)
	return nil
}

// Specifies a specific persistent volume to use. It contains key:value pairs
// representing labels for selecting such a volume.
type KafkaSpecKafkaStorageSelector map[string]string

type KafkaSpecKafkaStorageType string

const KafkaSpecKafkaStorageTypeEphemeral KafkaSpecKafkaStorageType = "ephemeral"
const KafkaSpecKafkaStorageTypeJbod KafkaSpecKafkaStorageType = "jbod"
const KafkaSpecKafkaStorageTypePersistentClaim KafkaSpecKafkaStorageType = "persistent-claim"

type KafkaSpecKafkaStorageVolumesElem struct {
	// The storage class to use for dynamic volume allocation.
	Class *string `json:"class,omitempty"`

	// Specifies if the persistent volume claim has to be deleted when the cluster is
	// un-deployed.
	DeleteClaim *bool `json:"deleteClaim,omitempty"`

	// Storage identification number. It is mandatory only for storage volumes defined
	// in a storage of type 'jbod'.
	Id *int32 `json:"id,omitempty"`

	// Overrides for individual brokers. The `overrides` field allows to specify a
	// different configuration for different brokers.
	Overrides []KafkaSpecKafkaStorageVolumesElemOverridesElem `json:"overrides,omitempty"`

	// Specifies a specific persistent volume to use. It contains key:value pairs
	// representing labels for selecting such a volume.
	Selector KafkaSpecKafkaStorageVolumesElemSelector `json:"selector,omitempty"`

	// When type=persistent-claim, defines the size of the persistent volume claim
	// (i.e 1Gi). Mandatory when type=persistent-claim.
	Size *string `json:"size,omitempty"`

	// When type=ephemeral, defines the total amount of local storage required for
	// this EmptyDir volume (for example 1Gi).
	SizeLimit *string `json:"sizeLimit,omitempty"`

	// Storage type, must be either 'ephemeral' or 'persistent-claim'.
	Type KafkaSpecKafkaStorageVolumesElemType `json:"type"`
}

type KafkaSpecKafkaStorageVolumesElemOverridesElem struct {
	// Id of the kafka broker (broker identifier).
	Broker *int32 `json:"broker,omitempty"`

	// The storage class to use for dynamic volume allocation for this broker.
	Class *string `json:"class,omitempty"`
}

// Specifies a specific persistent volume to use. It contains key:value pairs
// representing labels for selecting such a volume.
type KafkaSpecKafkaStorageVolumesElemSelector map[string]string

type KafkaSpecKafkaStorageVolumesElemType string

const KafkaSpecKafkaStorageVolumesElemTypeEphemeral KafkaSpecKafkaStorageVolumesElemType = "ephemeral"
const KafkaSpecKafkaStorageVolumesElemTypePersistentClaim KafkaSpecKafkaStorageVolumesElemType = "persistent-claim"

// Template for Kafka cluster resources. The template allows users to specify how
// are the `StatefulSet`, `Pods` and `Services` generated.
type KafkaSpecKafkaTemplate struct {
	// Template for Kafka bootstrap `Service`.
	BootstrapService *KafkaSpecKafkaTemplateBootstrapService `json:"bootstrapService,omitempty"`

	// Template for Kafka broker `Service`.
	BrokersService *KafkaSpecKafkaTemplateBrokersService `json:"brokersService,omitempty"`

	// Template for Secret with Kafka Cluster certificate public key.
	ClusterCaCert *KafkaSpecKafkaTemplateClusterCaCert `json:"clusterCaCert,omitempty"`

	// Template for Kafka external bootstrap `Ingress`.
	ExternalBootstrapIngress *KafkaSpecKafkaTemplateExternalBootstrapIngress `json:"externalBootstrapIngress,omitempty"`

	// Template for Kafka external bootstrap `Route`.
	ExternalBootstrapRoute *KafkaSpecKafkaTemplateExternalBootstrapRoute `json:"externalBootstrapRoute,omitempty"`

	// Template for Kafka external bootstrap `Service`.
	ExternalBootstrapService *KafkaSpecKafkaTemplateExternalBootstrapService `json:"externalBootstrapService,omitempty"`

	// Template for the Kafka init container.
	InitContainer *KafkaSpecKafkaTemplateInitContainer `json:"initContainer,omitempty"`

	// Template for the Kafka broker container.
	KafkaContainer *KafkaSpecKafkaTemplateKafkaContainer `json:"kafkaContainer,omitempty"`

	// Template for Kafka per-pod `Ingress` used for access from outside of
	// Kubernetes.
	PerPodIngress *KafkaSpecKafkaTemplatePerPodIngress `json:"perPodIngress,omitempty"`

	// Template for Kafka per-pod `Routes` used for access from outside of OpenShift.
	PerPodRoute *KafkaSpecKafkaTemplatePerPodRoute `json:"perPodRoute,omitempty"`

	// Template for Kafka per-pod `Services` used for access from outside of
	// Kubernetes.
	PerPodService *KafkaSpecKafkaTemplatePerPodService `json:"perPodService,omitempty"`

	// Template for all Kafka `PersistentVolumeClaims`.
	PersistentVolumeClaim *KafkaSpecKafkaTemplatePersistentVolumeClaim `json:"persistentVolumeClaim,omitempty"`

	// Template for Kafka `Pods`.
	Pod *KafkaSpecKafkaTemplatePod `json:"pod,omitempty"`

	// Template for Kafka `PodDisruptionBudget`.
	PodDisruptionBudget *KafkaSpecKafkaTemplatePodDisruptionBudget `json:"podDisruptionBudget,omitempty"`

	// Template for Kafka `StatefulSet`.
	Statefulset *KafkaSpecKafkaTemplateStatefulset `json:"statefulset,omitempty"`

	// Template for the Kafka broker TLS sidecar container.
	TlsSidecarContainer *KafkaSpecKafkaTemplateTlsSidecarContainer `json:"tlsSidecarContainer,omitempty"`
}

// Template for Kafka bootstrap `Service`.
type KafkaSpecKafkaTemplateBootstrapService struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateBootstrapServiceMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateBootstrapServiceMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaTemplateBootstrapServiceMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaTemplateBootstrapServiceMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateBootstrapServiceMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateBootstrapServiceMetadataLabels map[string]string

// Template for Kafka broker `Service`.
type KafkaSpecKafkaTemplateBrokersService struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateBrokersServiceMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateBrokersServiceMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaTemplateBrokersServiceMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaTemplateBrokersServiceMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateBrokersServiceMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateBrokersServiceMetadataLabels map[string]string

// Template for Secret with Kafka Cluster certificate public key.
type KafkaSpecKafkaTemplateClusterCaCert struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateClusterCaCertMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateClusterCaCertMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaTemplateClusterCaCertMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaTemplateClusterCaCertMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateClusterCaCertMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateClusterCaCertMetadataLabels map[string]string

// Template for Kafka external bootstrap `Ingress`.
type KafkaSpecKafkaTemplateExternalBootstrapIngress struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateExternalBootstrapIngressMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateExternalBootstrapIngressMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaTemplateExternalBootstrapIngressMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaTemplateExternalBootstrapIngressMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateExternalBootstrapIngressMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateExternalBootstrapIngressMetadataLabels map[string]string

// Template for Kafka external bootstrap `Route`.
type KafkaSpecKafkaTemplateExternalBootstrapRoute struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateExternalBootstrapRouteMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateExternalBootstrapRouteMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaTemplateExternalBootstrapRouteMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaTemplateExternalBootstrapRouteMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateExternalBootstrapRouteMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateExternalBootstrapRouteMetadataLabels map[string]string

// Template for Kafka external bootstrap `Service`.
type KafkaSpecKafkaTemplateExternalBootstrapService struct {
	// Specifies whether the service routes external traffic to node-local or
	// cluster-wide endpoints. `Cluster` may cause a second hop to another node and
	// obscures the client source IP. `Local` avoids a second hop for LoadBalancer and
	// Nodeport type services and preserves the client source IP (when supported by
	// the infrastructure). If unspecified, Kubernetes will use `Cluster` as the
	// default.
	ExternalTrafficPolicy *KafkaSpecKafkaTemplateExternalBootstrapServiceExternalTrafficPolicy `json:"externalTrafficPolicy,omitempty"`

	// A list of CIDR ranges (for example `10.0.0.0/8` or `130.211.204.1/32`) from
	// which clients can connect to load balancer type listeners. If supported by the
	// platform, traffic through the loadbalancer is restricted to the specified CIDR
	// ranges. This field is applicable only for loadbalancer type services and is
	// ignored if the cloud provider does not support the feature. For more
	// information, see
	// https://v1-17.docs.kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/.
	LoadBalancerSourceRanges []string `json:"loadBalancerSourceRanges,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateExternalBootstrapServiceMetadata `json:"metadata,omitempty"`
}

type KafkaSpecKafkaTemplateExternalBootstrapServiceExternalTrafficPolicy string

const KafkaSpecKafkaTemplateExternalBootstrapServiceExternalTrafficPolicyCluster KafkaSpecKafkaTemplateExternalBootstrapServiceExternalTrafficPolicy = "Cluster"
const KafkaSpecKafkaTemplateExternalBootstrapServiceExternalTrafficPolicyLocal KafkaSpecKafkaTemplateExternalBootstrapServiceExternalTrafficPolicy = "Local"

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateExternalBootstrapServiceMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaTemplateExternalBootstrapServiceMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaTemplateExternalBootstrapServiceMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateExternalBootstrapServiceMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateExternalBootstrapServiceMetadataLabels map[string]string

// Template for the Kafka init container.
type KafkaSpecKafkaTemplateInitContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaSpecKafkaTemplateInitContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaSpecKafkaTemplateInitContainerSecurityContext `json:"securityContext,omitempty"`
}

type KafkaSpecKafkaTemplateInitContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

// Security context for the container.
type KafkaSpecKafkaTemplateInitContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaSpecKafkaTemplateInitContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecKafkaTemplateInitContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecKafkaTemplateInitContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecKafkaTemplateInitContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaSpecKafkaTemplateInitContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaSpecKafkaTemplateInitContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecKafkaTemplateInitContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecKafkaTemplateInitContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Template for the Kafka broker container.
type KafkaSpecKafkaTemplateKafkaContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaSpecKafkaTemplateKafkaContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaSpecKafkaTemplateKafkaContainerSecurityContext `json:"securityContext,omitempty"`
}

type KafkaSpecKafkaTemplateKafkaContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

// Security context for the container.
type KafkaSpecKafkaTemplateKafkaContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaSpecKafkaTemplateKafkaContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecKafkaTemplateKafkaContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaSpecKafkaTemplateKafkaContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecKafkaTemplateKafkaContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Template for Kafka per-pod `Ingress` used for access from outside of Kubernetes.
type KafkaSpecKafkaTemplatePerPodIngress struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplatePerPodIngressMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplatePerPodIngressMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaTemplatePerPodIngressMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaTemplatePerPodIngressMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplatePerPodIngressMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplatePerPodIngressMetadataLabels map[string]string

// Template for Kafka per-pod `Routes` used for access from outside of OpenShift.
type KafkaSpecKafkaTemplatePerPodRoute struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplatePerPodRouteMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplatePerPodRouteMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaTemplatePerPodRouteMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaTemplatePerPodRouteMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplatePerPodRouteMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplatePerPodRouteMetadataLabels map[string]string

// Template for Kafka per-pod `Services` used for access from outside of
// Kubernetes.
type KafkaSpecKafkaTemplatePerPodService struct {
	// Specifies whether the service routes external traffic to node-local or
	// cluster-wide endpoints. `Cluster` may cause a second hop to another node and
	// obscures the client source IP. `Local` avoids a second hop for LoadBalancer and
	// Nodeport type services and preserves the client source IP (when supported by
	// the infrastructure). If unspecified, Kubernetes will use `Cluster` as the
	// default.
	ExternalTrafficPolicy *KafkaSpecKafkaTemplatePerPodServiceExternalTrafficPolicy `json:"externalTrafficPolicy,omitempty"`

	// A list of CIDR ranges (for example `10.0.0.0/8` or `130.211.204.1/32`) from
	// which clients can connect to load balancer type listeners. If supported by the
	// platform, traffic through the loadbalancer is restricted to the specified CIDR
	// ranges. This field is applicable only for loadbalancer type services and is
	// ignored if the cloud provider does not support the feature. For more
	// information, see
	// https://v1-17.docs.kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/.
	LoadBalancerSourceRanges []string `json:"loadBalancerSourceRanges,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplatePerPodServiceMetadata `json:"metadata,omitempty"`
}

type KafkaSpecKafkaTemplatePerPodServiceExternalTrafficPolicy string

const KafkaSpecKafkaTemplatePerPodServiceExternalTrafficPolicyCluster KafkaSpecKafkaTemplatePerPodServiceExternalTrafficPolicy = "Cluster"
const KafkaSpecKafkaTemplatePerPodServiceExternalTrafficPolicyLocal KafkaSpecKafkaTemplatePerPodServiceExternalTrafficPolicy = "Local"

// Metadata applied to the resource.
type KafkaSpecKafkaTemplatePerPodServiceMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaTemplatePerPodServiceMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaTemplatePerPodServiceMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplatePerPodServiceMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplatePerPodServiceMetadataLabels map[string]string

// Template for all Kafka `PersistentVolumeClaims`.
type KafkaSpecKafkaTemplatePersistentVolumeClaim struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplatePersistentVolumeClaimMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplatePersistentVolumeClaimMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaTemplatePersistentVolumeClaimMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaTemplatePersistentVolumeClaimMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplatePersistentVolumeClaimMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplatePersistentVolumeClaimMetadataLabels map[string]string

// Template for Kafka `Pods`.
type KafkaSpecKafkaTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecKafkaTemplatePodAffinity `json:"affinity,omitempty"`

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the pod's hosts file if specified.
	HostAliases []KafkaSpecKafkaTemplatePodHostAliasesElem `json:"hostAliases,omitempty"`

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []KafkaSpecKafkaTemplatePodImagePullSecretsElem `json:"imagePullSecrets,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplatePodMetadata `json:"metadata,omitempty"`

	// The name of the priority class used to assign priority to the pods. For more
	// information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `json:"priorityClassName,omitempty"`

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	SchedulerName *string `json:"schedulerName,omitempty"`

	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaSpecKafkaTemplatePodSecurityContext `json:"securityContext,omitempty"`

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	TerminationGracePeriodSeconds *int32 `json:"terminationGracePeriodSeconds,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaSpecKafkaTemplatePodTolerationsElem `json:"tolerations,omitempty"`

	// The pod's topology spread constraints.
	TopologySpreadConstraints []KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElem `json:"topologySpreadConstraints,omitempty"`
}

// The pod's affinity rules.
type KafkaSpecKafkaTemplatePodAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaSpecKafkaTemplatePodAffinityNodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaSpecKafkaTemplatePodAffinityPodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaSpecKafkaTemplatePodAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

// Template for Kafka `PodDisruptionBudget`.
type KafkaSpecKafkaTemplatePodDisruptionBudget struct {
	// Maximum number of unavailable pods to allow automatic Pod eviction. A Pod
	// eviction is allowed when the `maxUnavailable` number of pods or fewer are
	// unavailable after the eviction. Setting this value to 0 prevents all voluntary
	// evictions, so the pods must be evicted manually. Defaults to 1.
	MaxUnavailable *int32 `json:"maxUnavailable,omitempty"`

	// Metadata to apply to the `PodDistruptionBugetTemplate` resource.
	Metadata *KafkaSpecKafkaTemplatePodDisruptionBudgetMetadata `json:"metadata,omitempty"`
}

// Metadata to apply to the `PodDistruptionBugetTemplate` resource.
type KafkaSpecKafkaTemplatePodDisruptionBudgetMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaTemplatePodDisruptionBudgetMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaTemplatePodDisruptionBudgetMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplatePodDisruptionBudgetMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplatePodDisruptionBudgetMetadataLabels map[string]string

type KafkaSpecKafkaTemplatePodHostAliasesElem struct {
	// Hostnames corresponds to the JSON schema field "hostnames".
	Hostnames []string `json:"hostnames,omitempty"`

	// Ip corresponds to the JSON schema field "ip".
	Ip *string `json:"ip,omitempty"`
}

type KafkaSpecKafkaTemplatePodImagePullSecretsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplatePodMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaTemplatePodMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaTemplatePodMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplatePodMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplatePodMetadataLabels map[string]string

// Configures pod-level security attributes and common container settings.
type KafkaSpecKafkaTemplatePodSecurityContext struct {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	FsGroup *int32 `json:"fsGroup,omitempty"`

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecKafkaTemplatePodSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecKafkaTemplatePodSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	SupplementalGroups []int32 `json:"supplementalGroups,omitempty"`

	// Sysctls corresponds to the JSON schema field "sysctls".
	Sysctls []KafkaSpecKafkaTemplatePodSecurityContextSysctlsElem `json:"sysctls,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecKafkaTemplatePodSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaSpecKafkaTemplatePodSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecKafkaTemplatePodSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecKafkaTemplatePodSecurityContextSysctlsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaSpecKafkaTemplatePodSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

type KafkaSpecKafkaTemplatePodTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelector `json:"labelSelector,omitempty"`

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	MaxSkew *int32 `json:"maxSkew,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	WhenUnsatisfiable *string `json:"whenUnsatisfiable,omitempty"`
}

type KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels map[string]string

// Template for Kafka `StatefulSet`.
type KafkaSpecKafkaTemplateStatefulset struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateStatefulsetMetadata `json:"metadata,omitempty"`

	// PodManagementPolicy which will be used for this StatefulSet. Valid values are
	// `Parallel` and `OrderedReady`. Defaults to `Parallel`.
	PodManagementPolicy *KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy `json:"podManagementPolicy,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateStatefulsetMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecKafkaTemplateStatefulsetMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecKafkaTemplateStatefulsetMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateStatefulsetMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecKafkaTemplateStatefulsetMetadataLabels map[string]string

type KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy string

const KafkaSpecKafkaTemplateStatefulsetPodManagementPolicyOrderedReady KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy = "OrderedReady"
const KafkaSpecKafkaTemplateStatefulsetPodManagementPolicyParallel KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy = "Parallel"

// Template for the Kafka broker TLS sidecar container.
type KafkaSpecKafkaTemplateTlsSidecarContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaSpecKafkaTemplateTlsSidecarContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaSpecKafkaTemplateTlsSidecarContainerSecurityContext `json:"securityContext,omitempty"`
}

type KafkaSpecKafkaTemplateTlsSidecarContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

// Security context for the container.
type KafkaSpecKafkaTemplateTlsSidecarContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaSpecKafkaTemplateTlsSidecarContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecKafkaTemplateTlsSidecarContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecKafkaTemplateTlsSidecarContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecKafkaTemplateTlsSidecarContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaSpecKafkaTemplateTlsSidecarContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaSpecKafkaTemplateTlsSidecarContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecKafkaTemplateTlsSidecarContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecKafkaTemplateTlsSidecarContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// TLS sidecar configuration.
type KafkaSpecKafkaTlsSidecar struct {
	// The docker image for the container.
	Image *string `json:"image,omitempty"`

	// Pod liveness checking.
	LivenessProbe *KafkaSpecKafkaTlsSidecarLivenessProbe `json:"livenessProbe,omitempty"`

	// The log level for the TLS sidecar. Default value is `notice`.
	LogLevel *KafkaSpecKafkaTlsSidecarLogLevel `json:"logLevel,omitempty"`

	// Pod readiness checking.
	ReadinessProbe *KafkaSpecKafkaTlsSidecarReadinessProbe `json:"readinessProbe,omitempty"`

	// CPU and memory resources to reserve.
	Resources *KafkaSpecKafkaTlsSidecarResources `json:"resources,omitempty"`
}

// Pod liveness checking.
type KafkaSpecKafkaTlsSidecarLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

type KafkaSpecKafkaTlsSidecarLogLevel string

const KafkaSpecKafkaTlsSidecarLogLevelAlert KafkaSpecKafkaTlsSidecarLogLevel = "alert"
const KafkaSpecKafkaTlsSidecarLogLevelCrit KafkaSpecKafkaTlsSidecarLogLevel = "crit"
const KafkaSpecKafkaTlsSidecarLogLevelDebug KafkaSpecKafkaTlsSidecarLogLevel = "debug"
const KafkaSpecKafkaTlsSidecarLogLevelEmerg KafkaSpecKafkaTlsSidecarLogLevel = "emerg"
const KafkaSpecKafkaTlsSidecarLogLevelErr KafkaSpecKafkaTlsSidecarLogLevel = "err"
const KafkaSpecKafkaTlsSidecarLogLevelInfo KafkaSpecKafkaTlsSidecarLogLevel = "info"
const KafkaSpecKafkaTlsSidecarLogLevelNotice KafkaSpecKafkaTlsSidecarLogLevel = "notice"
const KafkaSpecKafkaTlsSidecarLogLevelWarning KafkaSpecKafkaTlsSidecarLogLevel = "warning"

// Pod readiness checking.
type KafkaSpecKafkaTlsSidecarReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// CPU and memory resources to reserve.
type KafkaSpecKafkaTlsSidecarResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits KafkaSpecKafkaTlsSidecarResourcesLimits `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests KafkaSpecKafkaTlsSidecarResourcesRequests `json:"requests,omitempty"`
}

type KafkaSpecKafkaTlsSidecarResourcesLimits map[string]string

type KafkaSpecKafkaTlsSidecarResourcesRequests map[string]string

type KafkaSpecKafkaTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

// Configuration of the Topic Operator.
type KafkaSpecTopicOperator struct {
	// Pod affinity rules.
	Affinity *KafkaSpecTopicOperatorAffinity `json:"affinity,omitempty"`

	// The image to use for the Topic Operator.
	Image *string `json:"image,omitempty"`

	// JVM Options for pods.
	JvmOptions *KafkaSpecTopicOperatorJvmOptions `json:"jvmOptions,omitempty"`

	// Pod liveness checking.
	LivenessProbe *KafkaSpecTopicOperatorLivenessProbe `json:"livenessProbe,omitempty"`

	// Logging configuration.
	Logging *KafkaSpecTopicOperatorLogging `json:"logging,omitempty"`

	// Pod readiness checking.
	ReadinessProbe *KafkaSpecTopicOperatorReadinessProbe `json:"readinessProbe,omitempty"`

	// Interval between periodic reconciliations.
	ReconciliationIntervalSeconds *int32 `json:"reconciliationIntervalSeconds,omitempty"`

	// CPU and memory resources to reserve.
	Resources *KafkaSpecTopicOperatorResources `json:"resources,omitempty"`

	// TLS sidecar configuration.
	TlsSidecar *KafkaSpecTopicOperatorTlsSidecar `json:"tlsSidecar,omitempty"`

	// The number of attempts at getting topic metadata.
	TopicMetadataMaxAttempts *int32 `json:"topicMetadataMaxAttempts,omitempty"`

	// The namespace the Topic Operator should watch.
	WatchedNamespace *string `json:"watchedNamespace,omitempty"`

	// Timeout for the ZooKeeper session.
	ZookeeperSessionTimeoutSeconds *int32 `json:"zookeeperSessionTimeoutSeconds,omitempty"`
}

// Pod affinity rules.
type KafkaSpecTopicOperatorAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaSpecTopicOperatorAffinityNodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaSpecTopicOperatorAffinityPodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaSpecTopicOperatorAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

type KafkaSpecTopicOperatorAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecTopicOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecTopicOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecTopicOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaSpecTopicOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecTopicOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecTopicOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecTopicOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecTopicOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecTopicOperatorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecTopicOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaSpecTopicOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty"`
}

type KafkaSpecTopicOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecTopicOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecTopicOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecTopicOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecTopicOperatorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecTopicOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecTopicOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecTopicOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecTopicOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecTopicOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecTopicOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecTopicOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecTopicOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecTopicOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecTopicOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecTopicOperatorAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecTopicOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecTopicOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecTopicOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecTopicOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecTopicOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecTopicOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecTopicOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecTopicOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecTopicOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecTopicOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecTopicOperatorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

// JVM Options for pods.
type KafkaSpecTopicOperatorJvmOptions struct {
	// A map of -XX options to the JVM.
	XX KafkaSpecTopicOperatorJvmOptionsXX `json:"-XX,omitempty"`

	// -Xms option to to the JVM.
	Xms *string `json:"-Xms,omitempty"`

	// -Xmx option to to the JVM.
	Xmx *string `json:"-Xmx,omitempty"`

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	GcLoggingEnabled *bool `json:"gcLoggingEnabled,omitempty"`

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	JavaSystemProperties []KafkaSpecTopicOperatorJvmOptionsJavaSystemPropertiesElem `json:"javaSystemProperties,omitempty"`
}

type KafkaSpecTopicOperatorJvmOptionsJavaSystemPropertiesElem struct {
	// The system property name.
	Name *string `json:"name,omitempty"`

	// The system property value.
	Value *string `json:"value,omitempty"`
}

// A map of -XX options to the JVM.
type KafkaSpecTopicOperatorJvmOptionsXX map[string]string

// Pod liveness checking.
type KafkaSpecTopicOperatorLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// Logging configuration.
type KafkaSpecTopicOperatorLogging struct {
	// A Map from logger name to logger level.
	Loggers KafkaSpecTopicOperatorLoggingLoggers `json:"loggers,omitempty"`

	// The name of the `ConfigMap` from which to get the logging configuration.
	Name *string `json:"name,omitempty"`

	// Logging type, must be either 'inline' or 'external'.
	Type KafkaSpecTopicOperatorLoggingType `json:"type"`
}

// A Map from logger name to logger level.
type KafkaSpecTopicOperatorLoggingLoggers map[string]string

type KafkaSpecTopicOperatorLoggingType string

const KafkaSpecTopicOperatorLoggingTypeExternal KafkaSpecTopicOperatorLoggingType = "external"
const KafkaSpecTopicOperatorLoggingTypeInline KafkaSpecTopicOperatorLoggingType = "inline"

// Pod readiness checking.
type KafkaSpecTopicOperatorReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// CPU and memory resources to reserve.
type KafkaSpecTopicOperatorResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits KafkaSpecTopicOperatorResourcesLimits `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests KafkaSpecTopicOperatorResourcesRequests `json:"requests,omitempty"`
}

type KafkaSpecTopicOperatorResourcesLimits map[string]string

type KafkaSpecTopicOperatorResourcesRequests map[string]string

// TLS sidecar configuration.
type KafkaSpecTopicOperatorTlsSidecar struct {
	// The docker image for the container.
	Image *string `json:"image,omitempty"`

	// Pod liveness checking.
	LivenessProbe *KafkaSpecTopicOperatorTlsSidecarLivenessProbe `json:"livenessProbe,omitempty"`

	// The log level for the TLS sidecar. Default value is `notice`.
	LogLevel *KafkaSpecTopicOperatorTlsSidecarLogLevel `json:"logLevel,omitempty"`

	// Pod readiness checking.
	ReadinessProbe *KafkaSpecTopicOperatorTlsSidecarReadinessProbe `json:"readinessProbe,omitempty"`

	// CPU and memory resources to reserve.
	Resources *KafkaSpecTopicOperatorTlsSidecarResources `json:"resources,omitempty"`
}

// Pod liveness checking.
type KafkaSpecTopicOperatorTlsSidecarLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

type KafkaSpecTopicOperatorTlsSidecarLogLevel string

const KafkaSpecTopicOperatorTlsSidecarLogLevelAlert KafkaSpecTopicOperatorTlsSidecarLogLevel = "alert"
const KafkaSpecTopicOperatorTlsSidecarLogLevelCrit KafkaSpecTopicOperatorTlsSidecarLogLevel = "crit"
const KafkaSpecTopicOperatorTlsSidecarLogLevelDebug KafkaSpecTopicOperatorTlsSidecarLogLevel = "debug"
const KafkaSpecTopicOperatorTlsSidecarLogLevelEmerg KafkaSpecTopicOperatorTlsSidecarLogLevel = "emerg"
const KafkaSpecTopicOperatorTlsSidecarLogLevelErr KafkaSpecTopicOperatorTlsSidecarLogLevel = "err"
const KafkaSpecTopicOperatorTlsSidecarLogLevelInfo KafkaSpecTopicOperatorTlsSidecarLogLevel = "info"
const KafkaSpecTopicOperatorTlsSidecarLogLevelNotice KafkaSpecTopicOperatorTlsSidecarLogLevel = "notice"
const KafkaSpecTopicOperatorTlsSidecarLogLevelWarning KafkaSpecTopicOperatorTlsSidecarLogLevel = "warning"

// Pod readiness checking.
type KafkaSpecTopicOperatorTlsSidecarReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// CPU and memory resources to reserve.
type KafkaSpecTopicOperatorTlsSidecarResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits KafkaSpecTopicOperatorTlsSidecarResourcesLimits `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests KafkaSpecTopicOperatorTlsSidecarResourcesRequests `json:"requests,omitempty"`
}

type KafkaSpecTopicOperatorTlsSidecarResourcesLimits map[string]string

type KafkaSpecTopicOperatorTlsSidecarResourcesRequests map[string]string

// Configuration of the ZooKeeper cluster.
type KafkaSpecZookeeper struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecZookeeperAffinity `json:"affinity,omitempty"`

	// The ZooKeeper broker config. Properties with the following prefixes cannot be
	// set: server., dataDir, dataLogDir, clientPort, authProvider, quorum.auth,
	// requireClientAuthScheme, snapshot.trust.empty, standaloneEnabled,
	// reconfigEnabled, 4lw.commands.whitelist, secureClientPort, ssl.,
	// serverCnxnFactory, sslQuorum (with the exception of: ssl.protocol,
	// ssl.quorum.protocol, ssl.enabledProtocols, ssl.quorum.enabledProtocols,
	// ssl.ciphersuites, ssl.quorum.ciphersuites, ssl.hostnameVerification,
	// ssl.quorum.hostnameVerification).
	Config KafkaSpecZookeeperConfig `json:"config,omitempty"`

	// The docker image for the pods.
	Image *string `json:"image,omitempty"`

	// JVM Options for pods.
	JvmOptions *KafkaSpecZookeeperJvmOptions `json:"jvmOptions,omitempty"`

	// Pod liveness checking.
	LivenessProbe *KafkaSpecZookeeperLivenessProbe `json:"livenessProbe,omitempty"`

	// Logging configuration for ZooKeeper.
	Logging *KafkaSpecZookeeperLogging `json:"logging,omitempty"`

	// The Prometheus JMX Exporter configuration. See
	// https://github.com/prometheus/jmx_exporter for details of the structure of this
	// configuration.
	Metrics KafkaSpecZookeeperMetrics `json:"metrics,omitempty"`

	// Metrics configuration.
	MetricsConfig *KafkaSpecZookeeperMetricsConfig `json:"metricsConfig,omitempty"`

	// Pod readiness checking.
	ReadinessProbe *KafkaSpecZookeeperReadinessProbe `json:"readinessProbe,omitempty"`

	// The number of pods in the cluster.
	Replicas int32 `json:"replicas"`

	// CPU and memory resources to reserve.
	Resources *KafkaSpecZookeeperResources `json:"resources,omitempty"`

	// Storage configuration (disk). Cannot be updated.
	Storage KafkaSpecZookeeperStorage `json:"storage"`

	// Template for ZooKeeper cluster resources. The template allows users to specify
	// how are the `StatefulSet`, `Pods` and `Services` generated.
	Template *KafkaSpecZookeeperTemplate `json:"template,omitempty"`

	// TLS sidecar configuration. The TLS sidecar is not used anymore and this option
	// will be ignored.
	TlsSidecar *KafkaSpecZookeeperTlsSidecar `json:"tlsSidecar,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaSpecZookeeperTolerationsElem `json:"tolerations,omitempty"`
}

// The pod's affinity rules.
type KafkaSpecZookeeperAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaSpecZookeeperAffinityNodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaSpecZookeeperAffinityPodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaSpecZookeeperAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

type KafkaSpecZookeeperAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecZookeeperAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecZookeeperAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecZookeeperAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaSpecZookeeperAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecZookeeperAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecZookeeperAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecZookeeperAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecZookeeperAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaSpecZookeeperAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty"`
}

type KafkaSpecZookeeperAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecZookeeperAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecZookeeperAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecZookeeperAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecZookeeperAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecZookeeperAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecZookeeperAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecZookeeperAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecZookeeperAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecZookeeperAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecZookeeperAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecZookeeperAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecZookeeperAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecZookeeperAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecZookeeperAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecZookeeperAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecZookeeperAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecZookeeperAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecZookeeperAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecZookeeperAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecZookeeperAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecZookeeperAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecZookeeperAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecZookeeperAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecZookeeperAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

// The ZooKeeper broker config. Properties with the following prefixes cannot be
// set: server., dataDir, dataLogDir, clientPort, authProvider, quorum.auth,
// requireClientAuthScheme, snapshot.trust.empty, standaloneEnabled,
// reconfigEnabled, 4lw.commands.whitelist, secureClientPort, ssl.,
// serverCnxnFactory, sslQuorum (with the exception of: ssl.protocol,
// ssl.quorum.protocol, ssl.enabledProtocols, ssl.quorum.enabledProtocols,
// ssl.ciphersuites, ssl.quorum.ciphersuites, ssl.hostnameVerification,
// ssl.quorum.hostnameVerification).
type KafkaSpecZookeeperConfig map[string]string

// JVM Options for pods.
type KafkaSpecZookeeperJvmOptions struct {
	// A map of -XX options to the JVM.
	XX KafkaSpecZookeeperJvmOptionsXX `json:"-XX,omitempty"`

	// -Xms option to to the JVM.
	Xms *string `json:"-Xms,omitempty"`

	// -Xmx option to to the JVM.
	Xmx *string `json:"-Xmx,omitempty"`

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	GcLoggingEnabled *bool `json:"gcLoggingEnabled,omitempty"`

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	JavaSystemProperties []KafkaSpecZookeeperJvmOptionsJavaSystemPropertiesElem `json:"javaSystemProperties,omitempty"`
}

type KafkaSpecZookeeperJvmOptionsJavaSystemPropertiesElem struct {
	// The system property name.
	Name *string `json:"name,omitempty"`

	// The system property value.
	Value *string `json:"value,omitempty"`
}

// A map of -XX options to the JVM.
type KafkaSpecZookeeperJvmOptionsXX map[string]string

// Pod liveness checking.
type KafkaSpecZookeeperLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// Logging configuration for ZooKeeper.
type KafkaSpecZookeeperLogging struct {
	// A Map from logger name to logger level.
	Loggers KafkaSpecZookeeperLoggingLoggers `json:"loggers,omitempty"`

	// The name of the `ConfigMap` from which to get the logging configuration.
	Name *string `json:"name,omitempty"`

	// Logging type, must be either 'inline' or 'external'.
	Type KafkaSpecZookeeperLoggingType `json:"type"`
}

// A Map from logger name to logger level.
type KafkaSpecZookeeperLoggingLoggers map[string]string

type KafkaSpecZookeeperLoggingType string

const KafkaSpecZookeeperLoggingTypeExternal KafkaSpecZookeeperLoggingType = "external"
const KafkaSpecZookeeperLoggingTypeInline KafkaSpecZookeeperLoggingType = "inline"

// The Prometheus JMX Exporter configuration. See
// https://github.com/prometheus/jmx_exporter for details of the structure of this
// configuration.
type KafkaSpecZookeeperMetrics map[string]string

// Metrics configuration.
type KafkaSpecZookeeperMetricsConfig struct {
	// Metrics type. Only 'jmxPrometheusExporter' supported currently.
	Type KafkaSpecZookeeperMetricsConfigType `json:"type"`

	// ConfigMap where the Prometheus JMX Exporter configuration is stored. For
	// details of the structure of this configuration, see the {JMXExporter}.
	ValueFrom KafkaSpecZookeeperMetricsConfigValueFrom `json:"valueFrom"`
}

type KafkaSpecZookeeperMetricsConfigType string

const KafkaSpecZookeeperMetricsConfigTypeJmxPrometheusExporter KafkaSpecZookeeperMetricsConfigType = "jmxPrometheusExporter"

// ConfigMap where the Prometheus JMX Exporter configuration is stored. For details
// of the structure of this configuration, see the {JMXExporter}.
type KafkaSpecZookeeperMetricsConfigValueFrom struct {
	// Reference to the key in the ConfigMap containing the metrics configuration.
	ConfigMapKeyRef *KafkaSpecZookeeperMetricsConfigValueFromConfigMapKeyRef `json:"configMapKeyRef,omitempty"`
}

// Reference to the key in the ConfigMap containing the metrics configuration.
type KafkaSpecZookeeperMetricsConfigValueFromConfigMapKeyRef struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty"`
}

// Pod readiness checking.
type KafkaSpecZookeeperReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// CPU and memory resources to reserve.
type KafkaSpecZookeeperResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits KafkaSpecZookeeperResourcesLimits `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests KafkaSpecZookeeperResourcesRequests `json:"requests,omitempty"`
}

type KafkaSpecZookeeperResourcesLimits map[string]string

type KafkaSpecZookeeperResourcesRequests map[string]string

// Storage configuration (disk). Cannot be updated.
type KafkaSpecZookeeperStorage struct {
	// The storage class to use for dynamic volume allocation.
	Class *string `json:"class,omitempty"`

	// Specifies if the persistent volume claim has to be deleted when the cluster is
	// un-deployed.
	DeleteClaim *bool `json:"deleteClaim,omitempty"`

	// Storage identification number. It is mandatory only for storage volumes defined
	// in a storage of type 'jbod'.
	Id *int32 `json:"id,omitempty"`

	// Overrides for individual brokers. The `overrides` field allows to specify a
	// different configuration for different brokers.
	Overrides []KafkaSpecZookeeperStorageOverridesElem `json:"overrides,omitempty"`

	// Specifies a specific persistent volume to use. It contains key:value pairs
	// representing labels for selecting such a volume.
	Selector KafkaSpecZookeeperStorageSelector `json:"selector,omitempty"`

	// When type=persistent-claim, defines the size of the persistent volume claim
	// (i.e 1Gi). Mandatory when type=persistent-claim.
	Size *string `json:"size,omitempty"`

	// When type=ephemeral, defines the total amount of local storage required for
	// this EmptyDir volume (for example 1Gi).
	SizeLimit *string `json:"sizeLimit,omitempty"`

	// Storage type, must be either 'ephemeral' or 'persistent-claim'.
	Type KafkaSpecZookeeperStorageType `json:"type"`
}

type KafkaSpecZookeeperStorageOverridesElem struct {
	// Id of the kafka broker (broker identifier).
	Broker *int32 `json:"broker,omitempty"`

	// The storage class to use for dynamic volume allocation for this broker.
	Class *string `json:"class,omitempty"`
}

// Specifies a specific persistent volume to use. It contains key:value pairs
// representing labels for selecting such a volume.
type KafkaSpecZookeeperStorageSelector map[string]string

type KafkaSpecZookeeperStorageType string

const KafkaSpecZookeeperStorageTypeEphemeral KafkaSpecZookeeperStorageType = "ephemeral"
const KafkaSpecZookeeperStorageTypePersistentClaim KafkaSpecZookeeperStorageType = "persistent-claim"

// Template for ZooKeeper cluster resources. The template allows users to specify
// how are the `StatefulSet`, `Pods` and `Services` generated.
type KafkaSpecZookeeperTemplate struct {
	// Template for ZooKeeper client `Service`.
	ClientService *KafkaSpecZookeeperTemplateClientService `json:"clientService,omitempty"`

	// Template for ZooKeeper nodes `Service`.
	NodesService *KafkaSpecZookeeperTemplateNodesService `json:"nodesService,omitempty"`

	// Template for all ZooKeeper `PersistentVolumeClaims`.
	PersistentVolumeClaim *KafkaSpecZookeeperTemplatePersistentVolumeClaim `json:"persistentVolumeClaim,omitempty"`

	// Template for ZooKeeper `Pods`.
	Pod *KafkaSpecZookeeperTemplatePod `json:"pod,omitempty"`

	// Template for ZooKeeper `PodDisruptionBudget`.
	PodDisruptionBudget *KafkaSpecZookeeperTemplatePodDisruptionBudget `json:"podDisruptionBudget,omitempty"`

	// Template for ZooKeeper `StatefulSet`.
	Statefulset *KafkaSpecZookeeperTemplateStatefulset `json:"statefulset,omitempty"`

	// Template for the Zookeeper server TLS sidecar container. The TLS sidecar is not
	// used anymore and this option will be ignored.
	TlsSidecarContainer *KafkaSpecZookeeperTemplateTlsSidecarContainer `json:"tlsSidecarContainer,omitempty"`

	// Template for the ZooKeeper container.
	ZookeeperContainer *KafkaSpecZookeeperTemplateZookeeperContainer `json:"zookeeperContainer,omitempty"`
}

// Template for ZooKeeper client `Service`.
type KafkaSpecZookeeperTemplateClientService struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecZookeeperTemplateClientServiceMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecZookeeperTemplateClientServiceMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecZookeeperTemplateClientServiceMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecZookeeperTemplateClientServiceMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecZookeeperTemplateClientServiceMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecZookeeperTemplateClientServiceMetadataLabels map[string]string

// Template for ZooKeeper nodes `Service`.
type KafkaSpecZookeeperTemplateNodesService struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecZookeeperTemplateNodesServiceMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecZookeeperTemplateNodesServiceMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecZookeeperTemplateNodesServiceMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecZookeeperTemplateNodesServiceMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecZookeeperTemplateNodesServiceMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecZookeeperTemplateNodesServiceMetadataLabels map[string]string

// Template for all ZooKeeper `PersistentVolumeClaims`.
type KafkaSpecZookeeperTemplatePersistentVolumeClaim struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadataLabels map[string]string

// Template for ZooKeeper `Pods`.
type KafkaSpecZookeeperTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecZookeeperTemplatePodAffinity `json:"affinity,omitempty"`

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the pod's hosts file if specified.
	HostAliases []KafkaSpecZookeeperTemplatePodHostAliasesElem `json:"hostAliases,omitempty"`

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []KafkaSpecZookeeperTemplatePodImagePullSecretsElem `json:"imagePullSecrets,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaSpecZookeeperTemplatePodMetadata `json:"metadata,omitempty"`

	// The name of the priority class used to assign priority to the pods. For more
	// information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `json:"priorityClassName,omitempty"`

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	SchedulerName *string `json:"schedulerName,omitempty"`

	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaSpecZookeeperTemplatePodSecurityContext `json:"securityContext,omitempty"`

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	TerminationGracePeriodSeconds *int32 `json:"terminationGracePeriodSeconds,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaSpecZookeeperTemplatePodTolerationsElem `json:"tolerations,omitempty"`

	// The pod's topology spread constraints.
	TopologySpreadConstraints []KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElem `json:"topologySpreadConstraints,omitempty"`
}

// The pod's affinity rules.
type KafkaSpecZookeeperTemplatePodAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaSpecZookeeperTemplatePodAffinityNodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaSpecZookeeperTemplatePodAffinityPodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

// Template for ZooKeeper `PodDisruptionBudget`.
type KafkaSpecZookeeperTemplatePodDisruptionBudget struct {
	// Maximum number of unavailable pods to allow automatic Pod eviction. A Pod
	// eviction is allowed when the `maxUnavailable` number of pods or fewer are
	// unavailable after the eviction. Setting this value to 0 prevents all voluntary
	// evictions, so the pods must be evicted manually. Defaults to 1.
	MaxUnavailable *int32 `json:"maxUnavailable,omitempty"`

	// Metadata to apply to the `PodDistruptionBugetTemplate` resource.
	Metadata *KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadata `json:"metadata,omitempty"`
}

// Metadata to apply to the `PodDistruptionBugetTemplate` resource.
type KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadataLabels map[string]string

type KafkaSpecZookeeperTemplatePodHostAliasesElem struct {
	// Hostnames corresponds to the JSON schema field "hostnames".
	Hostnames []string `json:"hostnames,omitempty"`

	// Ip corresponds to the JSON schema field "ip".
	Ip *string `json:"ip,omitempty"`
}

type KafkaSpecZookeeperTemplatePodImagePullSecretsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecZookeeperTemplatePodMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecZookeeperTemplatePodMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecZookeeperTemplatePodMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecZookeeperTemplatePodMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecZookeeperTemplatePodMetadataLabels map[string]string

// Configures pod-level security attributes and common container settings.
type KafkaSpecZookeeperTemplatePodSecurityContext struct {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	FsGroup *int32 `json:"fsGroup,omitempty"`

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecZookeeperTemplatePodSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecZookeeperTemplatePodSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	SupplementalGroups []int32 `json:"supplementalGroups,omitempty"`

	// Sysctls corresponds to the JSON schema field "sysctls".
	Sysctls []KafkaSpecZookeeperTemplatePodSecurityContextSysctlsElem `json:"sysctls,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecZookeeperTemplatePodSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaSpecZookeeperTemplatePodSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecZookeeperTemplatePodSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecZookeeperTemplatePodSecurityContextSysctlsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaSpecZookeeperTemplatePodSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

type KafkaSpecZookeeperTemplatePodTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelector `json:"labelSelector,omitempty"`

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	MaxSkew *int32 `json:"maxSkew,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	WhenUnsatisfiable *string `json:"whenUnsatisfiable,omitempty"`
}

type KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels `json:"matchLabels,omitempty"`
}

type KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels map[string]string

// Template for ZooKeeper `StatefulSet`.
type KafkaSpecZookeeperTemplateStatefulset struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecZookeeperTemplateStatefulsetMetadata `json:"metadata,omitempty"`

	// PodManagementPolicy which will be used for this StatefulSet. Valid values are
	// `Parallel` and `OrderedReady`. Defaults to `Parallel`.
	PodManagementPolicy *KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy `json:"podManagementPolicy,omitempty"`
}

// Metadata applied to the resource.
type KafkaSpecZookeeperTemplateStatefulsetMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations KafkaSpecZookeeperTemplateStatefulsetMetadataAnnotations `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels KafkaSpecZookeeperTemplateStatefulsetMetadataLabels `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecZookeeperTemplateStatefulsetMetadataAnnotations map[string]string

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type KafkaSpecZookeeperTemplateStatefulsetMetadataLabels map[string]string

type KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy string

const KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicyOrderedReady KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy = "OrderedReady"
const KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicyParallel KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy = "Parallel"

// Template for the Zookeeper server TLS sidecar container. The TLS sidecar is not
// used anymore and this option will be ignored.
type KafkaSpecZookeeperTemplateTlsSidecarContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaSpecZookeeperTemplateTlsSidecarContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaSpecZookeeperTemplateTlsSidecarContainerSecurityContext `json:"securityContext,omitempty"`
}

type KafkaSpecZookeeperTemplateTlsSidecarContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

// Security context for the container.
type KafkaSpecZookeeperTemplateTlsSidecarContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaSpecZookeeperTemplateTlsSidecarContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecZookeeperTemplateTlsSidecarContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecZookeeperTemplateTlsSidecarContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecZookeeperTemplateTlsSidecarContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaSpecZookeeperTemplateTlsSidecarContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaSpecZookeeperTemplateTlsSidecarContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecZookeeperTemplateTlsSidecarContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecZookeeperTemplateTlsSidecarContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Template for the ZooKeeper container.
type KafkaSpecZookeeperTemplateZookeeperContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaSpecZookeeperTemplateZookeeperContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaSpecZookeeperTemplateZookeeperContainerSecurityContext `json:"securityContext,omitempty"`
}

type KafkaSpecZookeeperTemplateZookeeperContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

// Security context for the container.
type KafkaSpecZookeeperTemplateZookeeperContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// TLS sidecar configuration. The TLS sidecar is not used anymore and this option
// will be ignored.
type KafkaSpecZookeeperTlsSidecar struct {
	// The docker image for the container.
	Image *string `json:"image,omitempty"`

	// Pod liveness checking.
	LivenessProbe *KafkaSpecZookeeperTlsSidecarLivenessProbe `json:"livenessProbe,omitempty"`

	// The log level for the TLS sidecar. Default value is `notice`.
	LogLevel *KafkaSpecZookeeperTlsSidecarLogLevel `json:"logLevel,omitempty"`

	// Pod readiness checking.
	ReadinessProbe *KafkaSpecZookeeperTlsSidecarReadinessProbe `json:"readinessProbe,omitempty"`

	// CPU and memory resources to reserve.
	Resources *KafkaSpecZookeeperTlsSidecarResources `json:"resources,omitempty"`
}

// Pod liveness checking.
type KafkaSpecZookeeperTlsSidecarLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

type KafkaSpecZookeeperTlsSidecarLogLevel string

const KafkaSpecZookeeperTlsSidecarLogLevelAlert KafkaSpecZookeeperTlsSidecarLogLevel = "alert"
const KafkaSpecZookeeperTlsSidecarLogLevelCrit KafkaSpecZookeeperTlsSidecarLogLevel = "crit"
const KafkaSpecZookeeperTlsSidecarLogLevelDebug KafkaSpecZookeeperTlsSidecarLogLevel = "debug"
const KafkaSpecZookeeperTlsSidecarLogLevelEmerg KafkaSpecZookeeperTlsSidecarLogLevel = "emerg"
const KafkaSpecZookeeperTlsSidecarLogLevelErr KafkaSpecZookeeperTlsSidecarLogLevel = "err"
const KafkaSpecZookeeperTlsSidecarLogLevelInfo KafkaSpecZookeeperTlsSidecarLogLevel = "info"
const KafkaSpecZookeeperTlsSidecarLogLevelNotice KafkaSpecZookeeperTlsSidecarLogLevel = "notice"
const KafkaSpecZookeeperTlsSidecarLogLevelWarning KafkaSpecZookeeperTlsSidecarLogLevel = "warning"

// Pod readiness checking.
type KafkaSpecZookeeperTlsSidecarReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// CPU and memory resources to reserve.
type KafkaSpecZookeeperTlsSidecarResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits KafkaSpecZookeeperTlsSidecarResourcesLimits `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests KafkaSpecZookeeperTlsSidecarResourcesRequests `json:"requests,omitempty"`
}

type KafkaSpecZookeeperTlsSidecarResourcesLimits map[string]string

type KafkaSpecZookeeperTlsSidecarResourcesRequests map[string]string

type KafkaSpecZookeeperTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

// The status of the Kafka and ZooKeeper clusters, and Topic Operator.
type KafkaStatus struct {
	// Kafka cluster Id.
	ClusterId *string `json:"clusterId,omitempty"`

	// List of status conditions.
	Conditions []KafkaStatusConditionsElem `json:"conditions,omitempty"`

	// Addresses of the internal and external listeners.
	Listeners []KafkaStatusListenersElem `json:"listeners,omitempty"`

	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration *int32 `json:"observedGeneration,omitempty"`
}

type KafkaStatusConditionsElem struct {
	// Last time the condition of a type changed from one status to another. The
	// required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`

	// Human-readable message indicating details about the condition's last
	// transition.
	Message *string `json:"message,omitempty"`

	// The reason for the condition's last transition (a single word in CamelCase).
	Reason *string `json:"reason,omitempty"`

	// The status of the condition, either True, False or Unknown.
	Status *string `json:"status,omitempty"`

	// The unique identifier of a condition, used to distinguish between other
	// conditions in the resource.
	Type *string `json:"type,omitempty"`
}

type KafkaStatusListenersElem struct {
	// A list of the addresses for this listener.
	Addresses []KafkaStatusListenersElemAddressesElem `json:"addresses,omitempty"`

	// A comma-separated list of `host:port` pairs for connecting to the Kafka cluster
	// using this listener.
	BootstrapServers *string `json:"bootstrapServers,omitempty"`

	// A list of TLS certificates which can be used to verify the identity of the
	// server when connecting to the given listener. Set only for `tls` and `external`
	// listeners.
	Certificates []string `json:"certificates,omitempty"`

	// The type of the listener. Can be one of the following three types: `plain`,
	// `tls`, and `external`.
	Type *string `json:"type,omitempty"`
}

type KafkaStatusListenersElemAddressesElem struct {
	// The DNS name or IP address of the Kafka bootstrap service.
	Host *string `json:"host,omitempty"`

	// The port of the Kafka bootstrap service.
	Port *int32 `json:"port,omitempty"`
}

var enumValues_KafkaSpecClientsCaCertificateExpirationPolicy = []interface{}{
	"renew-certificate",
	"replace-key",
}
var enumValues_KafkaSpecClusterCaCertificateExpirationPolicy = []interface{}{
	"renew-certificate",
	"replace-key",
}
var enumValues_KafkaSpecCruiseControlLoggingType = []interface{}{
	"inline",
	"external",
}
var enumValues_KafkaSpecCruiseControlMetricsConfigType = []interface{}{
	"jmxPrometheusExporter",
}
var enumValues_KafkaSpecCruiseControlTlsSidecarLogLevel = []interface{}{
	"emerg",
	"alert",
	"crit",
	"err",
	"warning",
	"notice",
	"info",
	"debug",
}
var enumValues_KafkaSpecEntityOperatorTlsSidecarLogLevel = []interface{}{
	"emerg",
	"alert",
	"crit",
	"err",
	"warning",
	"notice",
	"info",
	"debug",
}
var enumValues_KafkaSpecEntityOperatorTopicOperatorLoggingType = []interface{}{
	"inline",
	"external",
}
var enumValues_KafkaSpecEntityOperatorUserOperatorLoggingType = []interface{}{
	"inline",
	"external",
}
var enumValues_KafkaSpecKafkaAuthorizationType = []interface{}{
	"simple",
	"opa",
	"keycloak",
}
var enumValues_KafkaSpecKafkaJmxOptionsAuthenticationType = []interface{}{
	"password",
}
var enumValues_KafkaSpecKafkaListenersElemAuthenticationType = []interface{}{
	"tls",
	"scram-sha-512",
	"oauth",
}
var enumValues_KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy = []interface{}{
	"Local",
	"Cluster",
}
var enumValues_KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType = []interface{}{
	"ExternalIP",
	"ExternalDNS",
	"InternalIP",
	"InternalDNS",
	"Hostname",
}
var enumValues_KafkaSpecKafkaListenersElemType = []interface{}{
	"internal",
	"route",
	"loadbalancer",
	"nodeport",
	"ingress",
}
var enumValues_KafkaSpecKafkaLoggingType = []interface{}{
	"inline",
	"external",
}
var enumValues_KafkaSpecKafkaMetricsConfigType = []interface{}{
	"jmxPrometheusExporter",
}
var enumValues_KafkaSpecKafkaStorageType = []interface{}{
	"ephemeral",
	"persistent-claim",
	"jbod",
}
var enumValues_KafkaSpecKafkaStorageVolumesElemType = []interface{}{
	"ephemeral",
	"persistent-claim",
}
var enumValues_KafkaSpecKafkaTemplateExternalBootstrapServiceExternalTrafficPolicy = []interface{}{
	"Local",
	"Cluster",
}
var enumValues_KafkaSpecKafkaTemplatePerPodServiceExternalTrafficPolicy = []interface{}{
	"Local",
	"Cluster",
}
var enumValues_KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy = []interface{}{
	"OrderedReady",
	"Parallel",
}
var enumValues_KafkaSpecKafkaTlsSidecarLogLevel = []interface{}{
	"emerg",
	"alert",
	"crit",
	"err",
	"warning",
	"notice",
	"info",
	"debug",
}
var enumValues_KafkaSpecTopicOperatorLoggingType = []interface{}{
	"inline",
	"external",
}
var enumValues_KafkaSpecTopicOperatorTlsSidecarLogLevel = []interface{}{
	"emerg",
	"alert",
	"crit",
	"err",
	"warning",
	"notice",
	"info",
	"debug",
}
var enumValues_KafkaSpecZookeeperLoggingType = []interface{}{
	"inline",
	"external",
}
var enumValues_KafkaSpecZookeeperMetricsConfigType = []interface{}{
	"jmxPrometheusExporter",
}
var enumValues_KafkaSpecZookeeperStorageType = []interface{}{
	"ephemeral",
	"persistent-claim",
}
var enumValues_KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy = []interface{}{
	"OrderedReady",
	"Parallel",
}
var enumValues_KafkaSpecZookeeperTlsSidecarLogLevel = []interface{}{
	"emerg",
	"alert",
	"crit",
	"err",
	"warning",
	"notice",
	"info",
	"debug",
}
