// Code generated by schema-generate. DO NOT EDIT.

package v1beta1

import (
	"bytes"
	"database/sql"
	"errors"
	"fmt"
	jsoniter "github.com/json-iterator/go"
	"reflect"
)

func ValueTypeToString(valueType jsoniter.ValueType) string {
	switch valueType {
	case jsoniter.StringValue:
		return "string"
	case jsoniter.NumberValue:
		return "number"
	case jsoniter.NilValue:
		return "nil"
	case jsoniter.BoolValue:
		return "bool"
	case jsoniter.ArrayValue:
		return "array"
	case jsoniter.ObjectValue:
		return "object"
	default:
		return "invalid"
	}
}

type commaTracker struct {
	stream *jsoniter.Stream
	started bool
}

func (t *commaTracker) More() {
	if t.started {
		t.stream.WriteMore()
	} else {
		t.started = true
	}
}

type isEmptyChecker interface {
	IsEmpty() bool
}

// IsEmpty reports whether v is zero struct
// Does not support cycle pointers for performance, so as json
func IsEmpty(v interface{}) bool {
	if i, ok := v.(isEmptyChecker); ok {
		return i.IsEmpty()
	}
	rv := reflect.ValueOf(v)
	return !rv.IsValid() || rv.IsZero()
}

var (
	jsonNullValue = []byte("null")
)

// NewEmptyBool creates a non-empty EmptyBool
func NewEmptyBool(value bool) EmptyBool {
	return EmptyBool{value, true}
}

// EmptyBool is bool or nothing
type EmptyBool struct {
	Bool bool
	Valid bool // Valid is true if Bool is not empty
}

func (t EmptyBool) IsEmpty() bool {
	return !t.Valid
}

func (t EmptyBool) MarshalJSON() ([]byte, error) {
	if t.Valid {
		return jsoniter.Marshal(t.Bool)
	}
	return []byte("\"\""), nil
}

func (t *EmptyBool) Set(value bool) {
	t.Bool = value
	t.Valid = true
}

func (t *EmptyBool) Unset() {
	t.Bool = false
	t.Valid = false
}

func (t EmptyBool) MarshalJSONStream(stream *jsoniter.Stream) {
	if t.Valid {
		stream.WriteBool(t.Bool)
	} else {
		stream.WriteBool(false)
	}
}

func (t *EmptyBool) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	t.Bool = iter.ReadBool()
	t.Valid = iter.Error == nil
}

func (t *EmptyBool) UnmarshalJSON(data []byte) error {
	if err := jsoniter.Unmarshal(data, &t.Bool); err != nil {
		return err
	}
	t.Valid = true
	return nil
}

// NewEmptyFloat64 creates a non-empty EmptyFloat64
func NewEmptyFloat64(value float64) EmptyFloat64 {
	return EmptyFloat64{value, true}
}

// EmptyFloat64 is float64 or nothing
type EmptyFloat64 struct {
	Float64 float64
	Valid bool // Valid is true if Float64 is not empty
}

func (t EmptyFloat64) IsEmpty() bool {
	return !t.Valid
}

func (t EmptyFloat64) MarshalJSON() ([]byte, error) {
	if t.Valid {
		return jsoniter.Marshal(t.Float64)
	}
	return []byte("\"\""), nil
}

func (t *EmptyFloat64) Set(value float64) {
	t.Float64 = value
	t.Valid = true
}

func (t *EmptyFloat64) Unset() {
	t.Float64 = 0.0
	t.Valid = false
}

func (t EmptyFloat64) MarshalJSONStream(stream *jsoniter.Stream) {
	if t.Valid {
		stream.WriteFloat64(t.Float64)
	} else {
		stream.WriteFloat64(0.0)
	}
}

func (t *EmptyFloat64) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	t.Float64 = iter.ReadFloat64()
	t.Valid = iter.Error == nil
}

func (t *EmptyFloat64) UnmarshalJSON(data []byte) error {
	if err := jsoniter.Unmarshal(data, &t.Float64); err != nil {
		return err
	}
	t.Valid = true
	return nil
}

// NewEmptyInt creates a non-empty EmptyInt
func NewEmptyInt(value int) EmptyInt {
	return EmptyInt{value, true}
}

// EmptyInt is int or nothing
type EmptyInt struct {
	Int int
	Valid bool // Valid is true if Int is not empty
}

func (t EmptyInt) IsEmpty() bool {
	return !t.Valid
}

func (t EmptyInt) MarshalJSON() ([]byte, error) {
	if t.Valid {
		return jsoniter.Marshal(t.Int)
	}
	return []byte("\"\""), nil
}

func (t *EmptyInt) Set(value int) {
	t.Int = value
	t.Valid = true
}

func (t *EmptyInt) Unset() {
	t.Int = 0
	t.Valid = false
}

func (t EmptyInt) MarshalJSONStream(stream *jsoniter.Stream) {
	if t.Valid {
		stream.WriteInt(t.Int)
	} else {
		stream.WriteInt(0)
	}
}

func (t *EmptyInt) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	t.Int = iter.ReadInt()
	t.Valid = iter.Error == nil
}

func (t *EmptyInt) UnmarshalJSON(data []byte) error {
	if err := jsoniter.Unmarshal(data, &t.Int); err != nil {
		return err
	}
	t.Valid = true
	return nil
}

// NewEmptyString creates a non-empty EmptyString
func NewEmptyString(value string) EmptyString {
	return EmptyString{value, true}
}

// EmptyString is string or nothing
type EmptyString struct {
	String string
	Valid bool // Valid is true if String is not empty
}

func (t EmptyString) IsEmpty() bool {
	return !t.Valid
}

func (t EmptyString) MarshalJSON() ([]byte, error) {
	if t.Valid {
		return jsoniter.Marshal(t.String)
	}
	return []byte("\"\""), nil
}

func (t *EmptyString) Set(value string) {
	t.String = value
	t.Valid = true
}

func (t *EmptyString) Unset() {
	t.String = ""
	t.Valid = false
}

func (t EmptyString) MarshalJSONStream(stream *jsoniter.Stream) {
	if t.Valid {
		stream.WriteString(t.String)
	} else {
		stream.WriteString("")
	}
}

func (t *EmptyString) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	t.String = iter.ReadString()
	t.Valid = iter.Error == nil
}

func (t *EmptyString) UnmarshalJSON(data []byte) error {
	if err := jsoniter.Unmarshal(data, &t.String); err != nil {
		return err
	}
	t.Valid = true
	return nil
}

// OneOfStringNull is a 'string' or a 'null', and can be emptied
type OneOfStringNull struct {
	currentType jsoniter.ValueType
	stringValue string
}

// NewOneOfStringNull creates a empty OneOfStringNull
func NewOneOfStringNull() OneOfStringNull {
	return OneOfStringNull{jsoniter.InvalidValue, ""}
}

// NewOneOfStringNullString creates a OneOfStringNull of type string
func NewOneOfStringNullString(value string) OneOfStringNull {
	return OneOfStringNull{jsoniter.StringValue, value}
}

// NewOneOfStringNullNull creates a OneOfStringNull of type null
func NewOneOfStringNullNull() OneOfStringNull {
	return OneOfStringNull{jsoniter.NilValue, ""}
}

// IsEmpty returns true if the value is empty
func (value *OneOfStringNull) IsEmpty() bool {
	return value.currentType == jsoniter.InvalidValue
}

// IsNull returns true if the value is 'null'
func (value *OneOfStringNull) IsNull() bool {
	return value.currentType == jsoniter.NilValue
}

// IsString returns true if the value is a string
func (value *OneOfStringNull) IsString() bool {
	return value.currentType == jsoniter.StringValue
}

// StringValue returns the current value if IsString() is true, "" otherwise
func (value *OneOfStringNull) StringValue() string {
	if value.currentType == jsoniter.StringValue {
		return value.stringValue
	}
	return ""
}

// NullString returns the current value as a sql.NullString
func (value *OneOfStringNull) NullString() sql.NullString {
	return sql.NullString{
		Valid:  value.currentType == jsoniter.StringValue,
		String: value.stringValue,
	}
}

// MarshalJSONStream serializes to a jsoniter Stream
func (value OneOfStringNull) MarshalJSONStream(stream *jsoniter.Stream) {
	if value.currentType == jsoniter.StringValue {
		stream.WriteString(value.stringValue)
	} else {
		stream.WriteNil()
	}
}

// MarshalJSON serialize to json
func (value OneOfStringNull) MarshalJSON() ([]byte, error) {
	switch value.currentType {
	case jsoniter.InvalidValue:
		return jsonNullValue, nil
	case jsoniter.NilValue:
		return jsonNullValue, nil
	case jsoniter.StringValue:
		return jsoniter.Marshal(value.stringValue)
	}
	return nil, fmt.Errorf(
		"OneOfStringNull unsupported type: %s",
		ValueTypeToString(value.currentType))
}

func (value *OneOfStringNull) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	switch t := iter.WhatIsNext(); t {
	case jsoniter.NilValue:
		iter.ReadNil()
		value.currentType = jsoniter.NilValue
	case jsoniter.StringValue:
		value.currentType = jsoniter.StringValue
		value.stringValue = iter.ReadString()
	default:
		iter.ReportError("Read", fmt.Sprintf("unexpected value type: %v", t))
	}
}

// UnmarshalJSON unserialize a OneOfStringNull from json
func (value *OneOfStringNull) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, jsonNullValue) {
		value.currentType = jsoniter.NilValue
	} else {
		if err := jsoniter.Unmarshal(data, &value.stringValue); err != nil {
			return err
		}
		value.currentType = jsoniter.StringValue
	}
	return nil
}

// OneOfNumberNull is a 'string' or a 'null', and can be emptied
type OneOfNumberNull struct {
	currentType jsoniter.ValueType
	numberValue float64
}

// NewOneOfNumberNull creates a empty OneOfNumberNull
func NewOneOfNumberNull() OneOfNumberNull {
	return OneOfNumberNull{jsoniter.InvalidValue, 0}
}

// NewOneOfNumberNullNumber creates a OneOfNumberNull of type number
func NewOneOfNumberNullNumber(value float64) OneOfNumberNull {
	return OneOfNumberNull{jsoniter.NumberValue, value}
}

// NewOneOfNumberNullNull creates a OneOfNumberNull of type null
func NewOneOfNumberNullNull() OneOfNumberNull {
	return OneOfNumberNull{jsoniter.NilValue, 0}
}

// IsEmpty returns true if the value is empty
func (value *OneOfNumberNull) IsEmpty() bool {
	return value.currentType == jsoniter.InvalidValue
}

// IsNull returns true if the value is 'null'
func (value *OneOfNumberNull) IsNull() bool {
	return value.currentType == jsoniter.NilValue
}

// IsNumber returns true if the value is a number
func (value *OneOfNumberNull) IsNumber() bool {
	return value.currentType == jsoniter.NumberValue
}

// NumberValue returns the current value if IsNumber() is true, 0 otherwise
func (value *OneOfNumberNull) NumberValue() float64 {
	if value.currentType == jsoniter.NumberValue {
		return value.numberValue
	}
	return 0
}

// MarshalJSON serialize to json
func (value OneOfNumberNull) MarshalJSON() ([]byte, error) {
	switch value.currentType {
	case jsoniter.InvalidValue:
		return jsonNullValue, nil
	case jsoniter.NilValue:
		return jsonNullValue, nil
	case jsoniter.NumberValue:
		return jsoniter.Marshal(value.numberValue)
	}
	return nil, fmt.Errorf(
		"OneOfNumberNull unsupported type: %s",
		ValueTypeToString(value.currentType))
}

// UnmarshalJSON unserialize a OneOfNumberNull from json
func (value *OneOfNumberNull) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, jsonNullValue) {
		value.currentType = jsoniter.NilValue
	} else {
		if err := jsoniter.Unmarshal(data, &value.numberValue); err != nil {
			return err
		}
		value.currentType = jsoniter.NumberValue
	}
	return nil
}

// OneOfBoolNull is a 'bool' or a 'null', and can be emptied
type OneOfBoolNull struct {
	currentType jsoniter.ValueType
	boolValue   bool
}

// NewOneOfBoolNull creates a empty OneOfBoolNull
func NewOneOfBoolNull() OneOfBoolNull {
	return OneOfBoolNull{jsoniter.InvalidValue, false}
}

// NewOneOfBoolNullBool creates a OneOfBoolNull of type number
func NewOneOfBoolNullBool(value bool) OneOfBoolNull {
	return OneOfBoolNull{jsoniter.BoolValue, value}
}

// NewOneOfBoolNullNull creates a OneOfBoolNull of type null
func NewOneOfBoolNullNull() OneOfBoolNull {
	return OneOfBoolNull{jsoniter.NilValue, false}
}

// IsEmpty returns true if the value is empty
func (value *OneOfBoolNull) IsEmpty() bool {
	return value.currentType == jsoniter.InvalidValue
}

// IsNull returns true if the value is 'null'
func (value *OneOfBoolNull) IsNull() bool {
	return value.currentType == jsoniter.NilValue
}

// IsBool returns true if the value is a bool
func (value *OneOfBoolNull) IsBool() bool {
	return value.currentType == jsoniter.BoolValue
}

// BoolValue returns the current value if IsBool() is true, false otherwise
func (value *OneOfBoolNull) BoolValue() bool {
	if value.currentType == jsoniter.BoolValue {
		return value.boolValue
	}
	return false
}

// MarshalJSON serialize to json
func (value OneOfBoolNull) MarshalJSON() ([]byte, error) {
	switch value.currentType {
	case jsoniter.InvalidValue:
		return jsonNullValue, nil
	case jsoniter.NilValue:
		return jsonNullValue, nil
	case jsoniter.BoolValue:
		return jsoniter.Marshal(value.boolValue)
	}
	return nil, fmt.Errorf(
		"OneOfBoolNull unsupported type: %s",
		ValueTypeToString(value.currentType))
}

// UnmarshalJSON unserialize a OneOfBoolNull from json
func (value *OneOfBoolNull) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, jsonNullValue) {
		value.currentType = jsoniter.NilValue
	} else {
		if err := jsoniter.Unmarshal(data, &value.boolValue); err != nil {
			return err
		}
		value.currentType = jsoniter.BoolValue
	}
	return nil
}

// AccessToken Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
type AccessToken struct {
	// Key The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key"`

	// SecretName The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName"`

}

// Affinity The pod's affinity rules.
type Affinity struct {
	// NodeAffinity 
	NodeAffinity *NodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity 
	PodAffinity *PodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity 
	PodAntiAffinity *PodAntiAffinity `json:"podAntiAffinity,omitempty"`

}

// Annotations Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type Annotations struct {
}

// ApiService Template for Kafka Connect API `Service`.
type ApiService struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// ArtifactsItems 
type ArtifactsItems struct {
	// Sha512sum SHA512 checksum of the artifact. Optional. If specified, the checksum will be verified while building the new container. If not specified, the downloaded artifact will not be verified.
	Sha512sum string `json:"sha512sum,omitempty"`

	// Type Artifact type. Currently, the supported artifact types are `tgz` and `jar`.
	Type string `json:"type"`

	// Url URL of the artifact which will be downloaded. Strimzi does not do any security scanning of the downloaded artifacts. For security reasons, you should first verify the artifacts manually and configure the checksum verification to make sure the same artifact is used in the automated build. Required.
	Url string `json:"url"`

}

// Authentication Authentication configuration for Kafka Connect.
type Authentication struct {
	// AccessToken Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
	AccessToken *AccessToken `json:"accessToken,omitempty"`

	// AccessTokenIsJwt Configure whether access token should be treated as JWT. This should be set to `false` if the authorization server returns opaque tokens. Defaults to `true`.
	AccessTokenIsJwt bool `json:"accessTokenIsJwt,omitempty"`

	// CertificateAndKey Reference to the `Secret` which holds the certificate and private key pair.
	CertificateAndKey *CertificateAndKey `json:"certificateAndKey,omitempty"`

	// ClientId OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
	ClientId string `json:"clientId,omitempty"`

	// ClientSecret Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
	ClientSecret *ClientSecret `json:"clientSecret,omitempty"`

	// DisableTlsHostnameVerification Enable or disable TLS hostname verification. Default value is `false`.
	DisableTlsHostnameVerification bool `json:"disableTlsHostnameVerification,omitempty"`

	// MaxTokenExpirySeconds Set or limit time-to-live of the access tokens to the specified number of seconds. This should be set if the authorization server returns opaque tokens.
	MaxTokenExpirySeconds int `json:"maxTokenExpirySeconds,omitempty"`

	// PasswordSecret Reference to the `Secret` which holds the password.
	PasswordSecret *PasswordSecret `json:"passwordSecret,omitempty"`

	// RefreshToken Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
	RefreshToken *RefreshToken `json:"refreshToken,omitempty"`

	// Scope OAuth scope to use when authenticating against the authorization server. Some authorization servers require this to be set. The possible values depend on how authorization server is configured. By default `scope` is not specified when doing the token endpoint request.
	Scope string `json:"scope,omitempty"`

	// TlsTrustedCertificates Trusted certificates for TLS connection to the OAuth server.
	TlsTrustedCertificates []*TlsTrustedCertificatesItems `json:"tlsTrustedCertificates,omitempty"`

	// TokenEndpointUri Authorization server token endpoint URI.
	TokenEndpointUri string `json:"tokenEndpointUri,omitempty"`

	// Type Authentication type. Currently the only supported types are `tls`, `scram-sha-512`, and `plain`. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
	Type string `json:"type"`

	// Username Username used for the authentication.
	Username string `json:"username,omitempty"`

}

// Build Configures how the Connect container image should be built. Optional.
type Build struct {
	// Output Configures where should the newly built image be stored. Required.
	Output *Output `json:"output"`

	// Plugins List of connector plugins which should be added to the Kafka Connect. Required.
	Plugins []*PluginsItems `json:"plugins"`

	// Resources CPU and memory resources to reserve for the build.
	Resources *Resources `json:"resources,omitempty"`

}

// BuildConfig Template for the Kafka Connect BuildConfig used to build new container images. The BuildConfig is used only on OpenShift.
type BuildConfig struct {
	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// BuildContainer Template for the Kafka Connect Build container. The build container is used only on Kubernetes.
type BuildContainer struct {
	// Env Environment variables which should be applied to the container.
	Env []*EnvItems `json:"env,omitempty"`

	// SecurityContext Security context for the container.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

}

// BuildPod Template for Kafka Connect Build `Pods`. The build pod is used only on Kubernetes.
type BuildPod struct {
	// Affinity The pod's affinity rules.
	Affinity *Affinity `json:"affinity,omitempty"`

	// HostAliases The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.
	HostAliases []*HostAliasesItems `json:"hostAliases,omitempty"`

	// ImagePullSecrets List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []*ImagePullSecretsItems `json:"imagePullSecrets,omitempty"`

	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// PriorityClassName The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.
	PriorityClassName string `json:"priorityClassName,omitempty"`

	// SchedulerName The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.
	SchedulerName string `json:"schedulerName,omitempty"`

	// SecurityContext Configures pod-level security attributes and common container settings.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

	// TerminationGracePeriodSeconds The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
	TerminationGracePeriodSeconds int `json:"terminationGracePeriodSeconds,omitempty"`

	// Tolerations The pod's tolerations.
	Tolerations []*TolerationsItems `json:"tolerations,omitempty"`

	// TopologySpreadConstraints The pod's topology spread constraints.
	TopologySpreadConstraints []*TopologySpreadConstraintsItems `json:"topologySpreadConstraints,omitempty"`

}

// BuildResources CPU and memory resources to reserve.
type BuildResources struct {
	// Limits 
	Limits *Limits `json:"limits,omitempty"`

	// Requests 
	Requests *Requests `json:"requests,omitempty"`

}

// Capabilities 
type Capabilities struct {
	// Add 
	Add []string `json:"add,omitempty"`

	// Drop 
	Drop []string `json:"drop,omitempty"`

}

// CertificateAndKey Reference to the `Secret` which holds the certificate and private key pair.
type CertificateAndKey struct {
	// Certificate The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// Key The name of the private key in the Secret.
	Key string `json:"key"`

	// SecretName The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`

}

// ClientSecret Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
type ClientSecret struct {
	// Key The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key"`

	// SecretName The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName"`

}

// ConditionsItems 
type ConditionsItems struct {
	// LastTransitionTime Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime string `json:"lastTransitionTime,omitempty"`

	// Message Human-readable message indicating details about the condition's last transition.
	Message string `json:"message,omitempty"`

	// Reason The reason for the condition's last transition (a single word in CamelCase).
	Reason string `json:"reason,omitempty"`

	// Status The status of the condition, either True, False or Unknown.
	Status string `json:"status,omitempty"`

	// Type The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type string `json:"type,omitempty"`

}

// Config The Kafka Connect configuration. Properties with the following prefixes cannot be set: ssl., sasl., security., listeners, plugin.path, rest., bootstrap.servers, consumer.interceptor.classes, producer.interceptor.classes (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
type Config struct {
}

// ConfigMap Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be specified.
type ConfigMap struct {
	// DefaultMode 
	DefaultMode int `json:"defaultMode,omitempty"`

	// Items 
	Items []*ItemsItems `json:"items,omitempty"`

	// Name 
	Name string `json:"name,omitempty"`

	// Optional 
	Optional bool `json:"optional,omitempty"`

}

// ConfigMapKeyRef Reference to a key in a ConfigMap.
type ConfigMapKeyRef struct {
	// Key 
	Key string `json:"key,omitempty"`

	// Name 
	Name string `json:"name,omitempty"`

	// Optional 
	Optional bool `json:"optional,omitempty"`

}

// ConnectContainer Template for the Kafka Connect container.
type ConnectContainer struct {
	// Env Environment variables which should be applied to the container.
	Env []*EnvItems `json:"env,omitempty"`

	// SecurityContext Security context for the container.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

}

// ConnectorPluginsItems 
type ConnectorPluginsItems struct {
	// Class The class of the connector plugin.
	Class string `json:"class,omitempty"`

	// Type The type of the connector plugin. The available types are `sink` and `source`.
	Type string `json:"type,omitempty"`

	// Version The version of the connector plugin.
	Version string `json:"version,omitempty"`

}

// Deployment Template for Kafka Connect `Deployment`.
type Deployment struct {
	// DeploymentStrategy DeploymentStrategy which will be used for this Deployment. Valid values are `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`.
	DeploymentStrategy string `json:"deploymentStrategy,omitempty"`

	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// EnvItems 
type EnvItems struct {
	// Name The environment variable key.
	Name string `json:"name,omitempty"`

	// Value The environment variable value.
	Value string `json:"value,omitempty"`

}

// ExternalConfiguration Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to configure connectors.
type ExternalConfiguration struct {
	// Env Allows to pass data from Secret or ConfigMap to the Kafka Connect pods as environment variables.
	Env []*EnvItems `json:"env,omitempty"`

	// Volumes Allows to pass data from Secret or ConfigMap to the Kafka Connect pods as volumes.
	Volumes []*VolumesItems `json:"volumes,omitempty"`

}

// HostAliasesItems 
type HostAliasesItems struct {
	// Hostnames 
	Hostnames []string `json:"hostnames,omitempty"`

	// Ip 
	Ip string `json:"ip,omitempty"`

}

// ImagePullSecretsItems 
type ImagePullSecretsItems struct {
	// Name 
	Name string `json:"name,omitempty"`

}

// InitContainer Template for the Kafka init container.
type InitContainer struct {
	// Env Environment variables which should be applied to the container.
	Env []*EnvItems `json:"env,omitempty"`

	// SecurityContext Security context for the container.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

}

// ItemsItems 
type ItemsItems struct {
	// Key 
	Key string `json:"key,omitempty"`

	// Mode 
	Mode int `json:"mode,omitempty"`

	// Path 
	Path string `json:"path,omitempty"`

}

// JavaSystemPropertiesItems 
type JavaSystemPropertiesItems struct {
	// Name The system property name.
	Name string `json:"name,omitempty"`

	// Value The system property value.
	Value string `json:"value,omitempty"`

}

// JvmOptions JVM Options for pods.
type JvmOptions struct {
	// GcLoggingEnabled Specifies whether the Garbage Collection logging is enabled. The default is false.
	GcLoggingEnabled bool `json:"gcLoggingEnabled,omitempty"`

	// JavaSystemProperties A map of additional system properties which will be passed using the `-D` option to the JVM.
	JavaSystemProperties []*JavaSystemPropertiesItems `json:"javaSystemProperties,omitempty"`

	// XX A map of -XX options to the JVM.
	XX *XX `json:"-XX,omitempty"`

	// Xms -Xms option to to the JVM.
	Xms string `json:"-Xms,omitempty"`

	// Xmx -Xmx option to to the JVM.
	Xmx string `json:"-Xmx,omitempty"`

}

// KafkaConnectS2I 
type KafkaConnectS2I struct {
	// Spec The specification of the Kafka Connect Source-to-Image (S2I) cluster.
	Spec *Spec `json:"spec,omitempty"`

	// Status The status of the Kafka Connect Source-to-Image (S2I) cluster.
	Status *Status `json:"status,omitempty"`

}

// LabelSelector 
type LabelSelector struct {
	// MatchExpressions 
	MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`

	// MatchLabels 
	MatchLabels *MatchLabels `json:"matchLabels,omitempty"`

}

// Labels Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
type Labels struct {
}

// Limits 
type Limits struct {
}

// LivenessProbe Pod liveness checking.
type LivenessProbe struct {
	// FailureThreshold Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold int `json:"failureThreshold,omitempty"`

	// InitialDelaySeconds The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds int `json:"initialDelaySeconds,omitempty"`

	// PeriodSeconds How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds int `json:"periodSeconds,omitempty"`

	// SuccessThreshold Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold int `json:"successThreshold,omitempty"`

	// TimeoutSeconds The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds int `json:"timeoutSeconds,omitempty"`

}

// Loggers A Map from logger name to logger level.
type Loggers struct {
}

// Logging Logging configuration for Kafka Connect.
type Logging struct {
	// Loggers A Map from logger name to logger level.
	Loggers *Loggers `json:"loggers,omitempty"`

	// Name The name of the `ConfigMap` from which to get the logging configuration.
	Name string `json:"name,omitempty"`

	// Type Logging type, must be either 'inline' or 'external'.
	Type string `json:"type"`

}

// MatchExpressionsItems 
type MatchExpressionsItems struct {
	// Key 
	Key string `json:"key,omitempty"`

	// Operator 
	Operator string `json:"operator,omitempty"`

	// Values 
	Values []string `json:"values,omitempty"`

}

// MatchFieldsItems 
type MatchFieldsItems struct {
	// Key 
	Key string `json:"key,omitempty"`

	// Operator 
	Operator string `json:"operator,omitempty"`

	// Values 
	Values []string `json:"values,omitempty"`

}

// MatchLabels 
type MatchLabels struct {
}

// Metadata Metadata applied to the resource.
type Metadata struct {
	// Annotations Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *Annotations `json:"annotations,omitempty"`

	// Labels Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *Labels `json:"labels,omitempty"`

}

// Metrics The Prometheus JMX Exporter configuration. See https://github.com/prometheus/jmx_exporter for details of the structure of this configuration.
type Metrics struct {
}

// MetricsConfig Metrics configuration.
type MetricsConfig struct {
	// Type Metrics type. Only 'jmxPrometheusExporter' supported currently.
	Type string `json:"type"`

	// ValueFrom ConfigMap where the Prometheus JMX Exporter configuration is stored. For details of the structure of this configuration, see the {JMXExporter}.
	ValueFrom *ValueFrom `json:"valueFrom"`

}

// NodeAffinity 
type NodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution 
	PreferredDuringSchedulingIgnoredDuringExecution []*PreferredDuringSchedulingIgnoredDuringExecutionItems `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution 
	RequiredDuringSchedulingIgnoredDuringExecution *RequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`

}

// NodeSelectorTermsItems 
type NodeSelectorTermsItems struct {
	// MatchExpressions 
	MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`

	// MatchFields 
	MatchFields []*MatchFieldsItems `json:"matchFields,omitempty"`

}

// Output Configures where should the newly built image be stored. Required.
type Output struct {
	// Image The name of the image which will be built. Required.
	Image string `json:"image"`

	// PushSecret Container Registry Secret with the credentials for pushing the newly built image.
	PushSecret string `json:"pushSecret,omitempty"`

	// Type Output type. Must be either `docker` for pushing the newly build image to Docker compatible registry or `imagestream` for pushing the image to OpenShift ImageStream. Required.
	Type string `json:"type"`

}

// PasswordSecret Reference to the `Secret` which holds the password.
type PasswordSecret struct {
	// Password The name of the key in the Secret under which the password is stored.
	Password string `json:"password"`

	// SecretName The name of the Secret containing the password.
	SecretName string `json:"secretName"`

}

// PluginsItems 
type PluginsItems struct {
	// Artifacts List of artifacts which belong to this connector plugin. Required.
	Artifacts []*ArtifactsItems `json:"artifacts"`

	// Name The unique name of the connector plugin. Will be used to generate the path where the connector artifacts will be stored. The name has to be unique within the KafkaConnect resource. The name has to follow the following pattern: `^[a-z][-_a-z0-9]*[a-z]$`. Required.
	Name string `json:"name"`

}

// Pod Template for Kafka Connect `Pods`.
type Pod struct {
	// Affinity The pod's affinity rules.
	Affinity *Affinity `json:"affinity,omitempty"`

	// HostAliases The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.
	HostAliases []*HostAliasesItems `json:"hostAliases,omitempty"`

	// ImagePullSecrets List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []*ImagePullSecretsItems `json:"imagePullSecrets,omitempty"`

	// Metadata Metadata applied to the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// PriorityClassName The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.
	PriorityClassName string `json:"priorityClassName,omitempty"`

	// SchedulerName The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.
	SchedulerName string `json:"schedulerName,omitempty"`

	// SecurityContext Configures pod-level security attributes and common container settings.
	SecurityContext *SecurityContext `json:"securityContext,omitempty"`

	// TerminationGracePeriodSeconds The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
	TerminationGracePeriodSeconds int `json:"terminationGracePeriodSeconds,omitempty"`

	// Tolerations The pod's tolerations.
	Tolerations []*TolerationsItems `json:"tolerations,omitempty"`

	// TopologySpreadConstraints The pod's topology spread constraints.
	TopologySpreadConstraints []*TopologySpreadConstraintsItems `json:"topologySpreadConstraints,omitempty"`

}

// PodAffinity 
type PodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution 
	PreferredDuringSchedulingIgnoredDuringExecution []*PreferredDuringSchedulingIgnoredDuringExecutionItems `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution 
	RequiredDuringSchedulingIgnoredDuringExecution []*RequiredDuringSchedulingIgnoredDuringExecutionItems `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`

}

// PodAffinityTerm 
type PodAffinityTerm struct {
	// LabelSelector 
	LabelSelector *LabelSelector `json:"labelSelector,omitempty"`

	// Namespaces 
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey 
	TopologyKey string `json:"topologyKey,omitempty"`

}

// PodAntiAffinity 
type PodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution 
	PreferredDuringSchedulingIgnoredDuringExecution []*PreferredDuringSchedulingIgnoredDuringExecutionItems `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution 
	RequiredDuringSchedulingIgnoredDuringExecution []*RequiredDuringSchedulingIgnoredDuringExecutionItems `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`

}

// PodDisruptionBudget Template for Kafka Connect `PodDisruptionBudget`.
type PodDisruptionBudget struct {
	// MaxUnavailable Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.
	MaxUnavailable int `json:"maxUnavailable,omitempty"`

	// Metadata Metadata to apply to the `PodDistruptionBugetTemplate` resource.
	Metadata *Metadata `json:"metadata,omitempty"`

}

// Preference 
type Preference struct {
	// MatchExpressions 
	MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`

	// MatchFields 
	MatchFields []*MatchFieldsItems `json:"matchFields,omitempty"`

}

// PreferredDuringSchedulingIgnoredDuringExecutionItems 
type PreferredDuringSchedulingIgnoredDuringExecutionItems struct {
	// PodAffinityTerm 
	PodAffinityTerm *PodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight 
	Weight int `json:"weight,omitempty"`

}

// Rack Configuration of the node label which will be used as the client.rack consumer configuration.
type Rack struct {
	// TopologyKey A key that matches labels assigned to the Kubernetes cluster nodes. The value of the label is used to set the broker's `broker.rack` config and `client.rack` in Kafka Connect.
	TopologyKey string `json:"topologyKey"`

}

// ReadinessProbe Pod readiness checking.
type ReadinessProbe struct {
	// FailureThreshold Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold int `json:"failureThreshold,omitempty"`

	// InitialDelaySeconds The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds int `json:"initialDelaySeconds,omitempty"`

	// PeriodSeconds How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds int `json:"periodSeconds,omitempty"`

	// SuccessThreshold Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold int `json:"successThreshold,omitempty"`

	// TimeoutSeconds The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds int `json:"timeoutSeconds,omitempty"`

}

// RefreshToken Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
type RefreshToken struct {
	// Key The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key"`

	// SecretName The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName"`

}

// Requests 
type Requests struct {
}

// RequiredDuringSchedulingIgnoredDuringExecution 
type RequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms 
	NodeSelectorTerms []*NodeSelectorTermsItems `json:"nodeSelectorTerms,omitempty"`

}

// RequiredDuringSchedulingIgnoredDuringExecutionItems 
type RequiredDuringSchedulingIgnoredDuringExecutionItems struct {
	// LabelSelector 
	LabelSelector *LabelSelector `json:"labelSelector,omitempty"`

	// Namespaces 
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey 
	TopologyKey string `json:"topologyKey,omitempty"`

}

// Resources The maximum limits for CPU and memory resources and the requested initial resources.
type Resources struct {
	// Limits 
	Limits *Limits `json:"limits,omitempty"`

	// Requests 
	Requests *Requests `json:"requests,omitempty"`

}

// SeLinuxOptions 
type SeLinuxOptions struct {
	// Level 
	Level string `json:"level,omitempty"`

	// Role 
	Role string `json:"role,omitempty"`

	// Type 
	Type string `json:"type,omitempty"`

	// User 
	User string `json:"user,omitempty"`

}

// SeccompProfile 
type SeccompProfile struct {
	// LocalhostProfile 
	LocalhostProfile string `json:"localhostProfile,omitempty"`

	// Type 
	Type string `json:"type,omitempty"`

}

// Secret Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be specified.
type Secret struct {
	// DefaultMode 
	DefaultMode int `json:"defaultMode,omitempty"`

	// Items 
	Items []*ItemsItems `json:"items,omitempty"`

	// Optional 
	Optional bool `json:"optional,omitempty"`

	// SecretName 
	SecretName string `json:"secretName,omitempty"`

}

// SecretKeyRef Reference to a key in a Secret.
type SecretKeyRef struct {
	// Key 
	Key string `json:"key,omitempty"`

	// Name 
	Name string `json:"name,omitempty"`

	// Optional 
	Optional bool `json:"optional,omitempty"`

}

// SecurityContext Security context for the container.
type SecurityContext struct {
	// AllowPrivilegeEscalation 
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities 
	Capabilities *Capabilities `json:"capabilities,omitempty"`

	// Privileged 
	Privileged bool `json:"privileged,omitempty"`

	// ProcMount 
	ProcMount string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem 
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup 
	RunAsGroup int `json:"runAsGroup,omitempty"`

	// RunAsNonRoot 
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser 
	RunAsUser int `json:"runAsUser,omitempty"`

	// SeLinuxOptions 
	SeLinuxOptions *SeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile 
	SeccompProfile *SeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions 
	WindowsOptions *WindowsOptions `json:"windowsOptions,omitempty"`

}

// Spec The specification of the Kafka Connect Source-to-Image (S2I) cluster.
type Spec struct {
	// Affinity The pod's affinity rules.
	Affinity *Affinity `json:"affinity,omitempty"`

	// Authentication Authentication configuration for Kafka Connect.
	Authentication *Authentication `json:"authentication,omitempty"`

	// BootstrapServers Bootstrap servers to connect to. This should be given as a comma separated list of _<hostname>_:‍_<port>_ pairs.
	BootstrapServers string `json:"bootstrapServers"`

	// Build Configures how the Connect container image should be built. Optional.
	Build *Build `json:"build,omitempty"`

	// BuildResources CPU and memory resources to reserve.
	BuildResources *BuildResources `json:"buildResources,omitempty"`

	// ClientRackInitImage The image of the init container used for initializing the `client.rack`.
	ClientRackInitImage string `json:"clientRackInitImage,omitempty"`

	// Config The Kafka Connect configuration. Properties with the following prefixes cannot be set: ssl., sasl., security., listeners, plugin.path, rest., bootstrap.servers, consumer.interceptor.classes, producer.interceptor.classes (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
	Config *Config `json:"config,omitempty"`

	// ExternalConfiguration Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to configure connectors.
	ExternalConfiguration *ExternalConfiguration `json:"externalConfiguration,omitempty"`

	// Image The docker image for the pods.
	Image string `json:"image,omitempty"`

	// InsecureSourceRepository When true this configures the source repository with the 'Local' reference policy and an import policy that accepts insecure source tags.
	InsecureSourceRepository bool `json:"insecureSourceRepository,omitempty"`

	// JvmOptions JVM Options for pods.
	JvmOptions *JvmOptions `json:"jvmOptions,omitempty"`

	// LivenessProbe Pod liveness checking.
	LivenessProbe *LivenessProbe `json:"livenessProbe,omitempty"`

	// Logging Logging configuration for Kafka Connect.
	Logging *Logging `json:"logging,omitempty"`

	// Metrics The Prometheus JMX Exporter configuration. See https://github.com/prometheus/jmx_exporter for details of the structure of this configuration.
	Metrics *Metrics `json:"metrics,omitempty"`

	// MetricsConfig Metrics configuration.
	MetricsConfig *MetricsConfig `json:"metricsConfig,omitempty"`

	// Rack Configuration of the node label which will be used as the client.rack consumer configuration.
	Rack *Rack `json:"rack,omitempty"`

	// ReadinessProbe Pod readiness checking.
	ReadinessProbe *ReadinessProbe `json:"readinessProbe,omitempty"`

	// Replicas The number of pods in the Kafka Connect group.
	Replicas int `json:"replicas,omitempty"`

	// Resources The maximum limits for CPU and memory resources and the requested initial resources.
	Resources *Resources `json:"resources,omitempty"`

	// Template Template for Kafka Connect and Kafka Connect S2I resources. The template allows users to specify how the `Deployment`, `Pods` and `Service` are generated.
	Template *Template `json:"template,omitempty"`

	// Tls TLS configuration.
	Tls *Tls `json:"tls,omitempty"`

	// Tolerations The pod's tolerations.
	Tolerations []*TolerationsItems `json:"tolerations,omitempty"`

	// Tracing The configuration of tracing in Kafka Connect.
	Tracing *Tracing `json:"tracing,omitempty"`

	// Version The Kafka Connect version. Defaults to {DefaultKafkaVersion}. Consult the user documentation to understand the process required to upgrade or downgrade the version.
	Version string `json:"version,omitempty"`

}

// Status The status of the Kafka Connect Source-to-Image (S2I) cluster.
type Status struct {
	// BuildConfigName The name of the build configuration.
	BuildConfigName string `json:"buildConfigName,omitempty"`

	// Conditions List of status conditions.
	Conditions []*ConditionsItems `json:"conditions,omitempty"`

	// ConnectorPlugins The list of connector plugins available in this Kafka Connect deployment.
	ConnectorPlugins []*ConnectorPluginsItems `json:"connectorPlugins,omitempty"`

	// LabelSelector Label selector for pods providing this resource.
	LabelSelector string `json:"labelSelector,omitempty"`

	// ObservedGeneration The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration int `json:"observedGeneration,omitempty"`

	// Replicas The current number of pods being used to provide this resource.
	Replicas int `json:"replicas,omitempty"`

	// Url The URL of the REST API endpoint for managing and monitoring Kafka Connect connectors.
	Url string `json:"url,omitempty"`

}

// SysctlsItems 
type SysctlsItems struct {
	// Name 
	Name string `json:"name,omitempty"`

	// Value 
	Value string `json:"value,omitempty"`

}

// Template Template for Kafka Connect and Kafka Connect S2I resources. The template allows users to specify how the `Deployment`, `Pods` and `Service` are generated.
type Template struct {
	// ApiService Template for Kafka Connect API `Service`.
	ApiService *ApiService `json:"apiService,omitempty"`

	// BuildConfig Template for the Kafka Connect BuildConfig used to build new container images. The BuildConfig is used only on OpenShift.
	BuildConfig *BuildConfig `json:"buildConfig,omitempty"`

	// BuildContainer Template for the Kafka Connect Build container. The build container is used only on Kubernetes.
	BuildContainer *BuildContainer `json:"buildContainer,omitempty"`

	// BuildPod Template for Kafka Connect Build `Pods`. The build pod is used only on Kubernetes.
	BuildPod *BuildPod `json:"buildPod,omitempty"`

	// ConnectContainer Template for the Kafka Connect container.
	ConnectContainer *ConnectContainer `json:"connectContainer,omitempty"`

	// Deployment Template for Kafka Connect `Deployment`.
	Deployment *Deployment `json:"deployment,omitempty"`

	// InitContainer Template for the Kafka init container.
	InitContainer *InitContainer `json:"initContainer,omitempty"`

	// Pod Template for Kafka Connect `Pods`.
	Pod *Pod `json:"pod,omitempty"`

	// PodDisruptionBudget Template for Kafka Connect `PodDisruptionBudget`.
	PodDisruptionBudget *PodDisruptionBudget `json:"podDisruptionBudget,omitempty"`

}

// Tls TLS configuration.
type Tls struct {
	// TrustedCertificates Trusted certificates for TLS connection.
	TrustedCertificates []*TrustedCertificatesItems `json:"trustedCertificates,omitempty"`

}

// TlsTrustedCertificatesItems 
type TlsTrustedCertificatesItems struct {
	// Certificate The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// SecretName The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`

}

// TolerationsItems 
type TolerationsItems struct {
	// Effect 
	Effect string `json:"effect,omitempty"`

	// Key 
	Key string `json:"key,omitempty"`

	// Operator 
	Operator string `json:"operator,omitempty"`

	// TolerationSeconds 
	TolerationSeconds int `json:"tolerationSeconds,omitempty"`

	// Value 
	Value string `json:"value,omitempty"`

}

// TopologySpreadConstraintsItems 
type TopologySpreadConstraintsItems struct {
	// LabelSelector 
	LabelSelector *LabelSelector `json:"labelSelector,omitempty"`

	// MaxSkew 
	MaxSkew int `json:"maxSkew,omitempty"`

	// TopologyKey 
	TopologyKey string `json:"topologyKey,omitempty"`

	// WhenUnsatisfiable 
	WhenUnsatisfiable string `json:"whenUnsatisfiable,omitempty"`

}

// Tracing The configuration of tracing in Kafka Connect.
type Tracing struct {
	// Type Type of the tracing used. Currently the only supported type is `jaeger` for Jaeger tracing.
	Type string `json:"type"`

}

// TrustedCertificatesItems 
type TrustedCertificatesItems struct {
	// Certificate The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// SecretName The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`

}

// ValueFrom Value of the environment variable which will be passed to the Kafka Connect pods. It can be passed either as a reference to Secret or ConfigMap field. The field has to specify exactly one Secret or ConfigMap.
type ValueFrom struct {
	// ConfigMapKeyRef Reference to a key in a ConfigMap.
	ConfigMapKeyRef *ConfigMapKeyRef `json:"configMapKeyRef,omitempty"`

	// SecretKeyRef Reference to a key in a Secret.
	SecretKeyRef *SecretKeyRef `json:"secretKeyRef,omitempty"`

}

// VolumesItems 
type VolumesItems struct {
	// ConfigMap Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be specified.
	ConfigMap *ConfigMap `json:"configMap,omitempty"`

	// Name Name of the volume which will be added to the Kafka Connect pods.
	Name string `json:"name"`

	// Secret Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be specified.
	Secret *Secret `json:"secret,omitempty"`

}

// WindowsOptions 
type WindowsOptions struct {
	// GmsaCredentialSpec 
	GmsaCredentialSpec string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName 
	GmsaCredentialSpecName string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName 
	RunAsUserName string `json:"runAsUserName,omitempty"`

}

// XX A map of -XX options to the JVM.
type XX struct {
}


// MarshalJSON serializes to JSON
func (s *AccessToken) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s AccessToken) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Key field
	ct.More()
	stream.WriteObjectField("key")
	stream.WriteString(s.Key)

	// Marshal the SecretName field
	ct.More()
	stream.WriteObjectField("secretName")
	stream.WriteString(s.SecretName)
	stream.WriteObjectEnd()
}

func (s *AccessToken) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *AccessToken) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	KeyReceived := false
	SecretNameReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "key":
			s.Key = iter.ReadString()
			if iter.Error != nil {
				return
			}
			KeyReceived = true
		case "secretName":
			s.SecretName = iter.ReadString()
			if iter.Error != nil {
				return
			}
			SecretNameReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !KeyReceived {
		iter.ReportError("validating AccessToken", "\"key\" is required but was not present")
	}

	if !SecretNameReceived {
		iter.ReportError("validating AccessToken", "\"secretName\" is required but was not present")
	}
}





// MarshalJSON serializes to JSON
func (s *ArtifactsItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s ArtifactsItems) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Sha512sum field
	if !IsEmpty(s.Sha512sum) {
	ct.More()
	stream.WriteObjectField("sha512sum")
	stream.WriteString(s.Sha512sum)
	}

	// Marshal the Type field
	ct.More()
	stream.WriteObjectField("type")
	stream.WriteString(s.Type)

	// Marshal the Url field
	ct.More()
	stream.WriteObjectField("url")
	stream.WriteString(s.Url)
	stream.WriteObjectEnd()
}

func (s *ArtifactsItems) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *ArtifactsItems) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TypeReceived := false
	UrlReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "sha512sum":
			s.Sha512sum = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "type":
			s.Type = iter.ReadString()
			if iter.Error != nil {
				return
			}
			TypeReceived = true
		case "url":
			s.Url = iter.ReadString()
			if iter.Error != nil {
				return
			}
			UrlReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TypeReceived {
		iter.ReportError("validating ArtifactsItems", "\"type\" is required but was not present")
	}

	if !UrlReceived {
		iter.ReportError("validating ArtifactsItems", "\"url\" is required but was not present")
	}
}


// MarshalJSON serializes to JSON
func (s *Authentication) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Authentication) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the AccessToken field
	if !IsEmpty(s.AccessToken) {
	ct.More()
	stream.WriteObjectField("accessToken")
	stream.WriteVal(s.AccessToken)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the AccessTokenIsJwt field
	if !IsEmpty(s.AccessTokenIsJwt) {
	ct.More()
	stream.WriteObjectField("accessTokenIsJwt")
	stream.WriteVal(s.AccessTokenIsJwt)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the CertificateAndKey field
	if !IsEmpty(s.CertificateAndKey) {
	ct.More()
	stream.WriteObjectField("certificateAndKey")
	stream.WriteVal(s.CertificateAndKey)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the ClientId field
	if !IsEmpty(s.ClientId) {
	ct.More()
	stream.WriteObjectField("clientId")
	stream.WriteString(s.ClientId)
	}

	// Marshal the ClientSecret field
	if !IsEmpty(s.ClientSecret) {
	ct.More()
	stream.WriteObjectField("clientSecret")
	stream.WriteVal(s.ClientSecret)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the DisableTlsHostnameVerification field
	if !IsEmpty(s.DisableTlsHostnameVerification) {
	ct.More()
	stream.WriteObjectField("disableTlsHostnameVerification")
	stream.WriteVal(s.DisableTlsHostnameVerification)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the MaxTokenExpirySeconds field
	if !IsEmpty(s.MaxTokenExpirySeconds) {
	ct.More()
	stream.WriteObjectField("maxTokenExpirySeconds")
	stream.WriteVal(s.MaxTokenExpirySeconds)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the PasswordSecret field
	if !IsEmpty(s.PasswordSecret) {
	ct.More()
	stream.WriteObjectField("passwordSecret")
	stream.WriteVal(s.PasswordSecret)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the RefreshToken field
	if !IsEmpty(s.RefreshToken) {
	ct.More()
	stream.WriteObjectField("refreshToken")
	stream.WriteVal(s.RefreshToken)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Scope field
	if !IsEmpty(s.Scope) {
	ct.More()
	stream.WriteObjectField("scope")
	stream.WriteString(s.Scope)
	}

	// Marshal the TlsTrustedCertificates field
	if !IsEmpty(s.TlsTrustedCertificates) {
	ct.More()
	stream.WriteObjectField("tlsTrustedCertificates")
	stream.WriteVal(s.TlsTrustedCertificates)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the TokenEndpointUri field
	if !IsEmpty(s.TokenEndpointUri) {
	ct.More()
	stream.WriteObjectField("tokenEndpointUri")
	stream.WriteString(s.TokenEndpointUri)
	}

	// Marshal the Type field
	ct.More()
	stream.WriteObjectField("type")
	stream.WriteString(s.Type)

	// Marshal the Username field
	if !IsEmpty(s.Username) {
	ct.More()
	stream.WriteObjectField("username")
	stream.WriteString(s.Username)
	}
	stream.WriteObjectEnd()
}

func (s *Authentication) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Authentication) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TypeReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "accessToken":
			iter.ReadVal(&s.AccessToken)
			if iter.Error != nil {
				return
			}
		case "accessTokenIsJwt":
			s.AccessTokenIsJwt = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "certificateAndKey":
			iter.ReadVal(&s.CertificateAndKey)
			if iter.Error != nil {
				return
			}
		case "clientId":
			s.ClientId = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "clientSecret":
			iter.ReadVal(&s.ClientSecret)
			if iter.Error != nil {
				return
			}
		case "disableTlsHostnameVerification":
			s.DisableTlsHostnameVerification = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "maxTokenExpirySeconds":
			iter.ReadVal(&s.MaxTokenExpirySeconds)
			if iter.Error != nil {
				return
			}
		case "passwordSecret":
			iter.ReadVal(&s.PasswordSecret)
			if iter.Error != nil {
				return
			}
		case "refreshToken":
			iter.ReadVal(&s.RefreshToken)
			if iter.Error != nil {
				return
			}
		case "scope":
			s.Scope = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "tlsTrustedCertificates":
			iter.ReadVal(&s.TlsTrustedCertificates)
			if iter.Error != nil {
				return
			}
		case "tokenEndpointUri":
			s.TokenEndpointUri = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "type":
			s.Type = iter.ReadString()
			if iter.Error != nil {
				return
			}
			TypeReceived = true
		case "username":
			s.Username = iter.ReadString()
			if iter.Error != nil {
				return
			}
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TypeReceived {
		iter.ReportError("validating Authentication", "\"type\" is required but was not present")
	}
}


// MarshalJSON serializes to JSON
func (s *Build) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Build) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Output field

	// Output is required
	if s.Output == nil {
		stream.Error = errors.New("Output (output) is a required")
		return
	}
	ct.More()
	stream.WriteObjectField("output")
	stream.WriteVal(s.Output)
	if stream.Error != nil {
		return
	}

	// Marshal the Plugins field
	ct.More()
	stream.WriteObjectField("plugins")
	stream.WriteVal(s.Plugins)
	if stream.Error != nil {
		return
	}

	// Marshal the Resources field
	if !IsEmpty(s.Resources) {
	ct.More()
	stream.WriteObjectField("resources")
	stream.WriteVal(s.Resources)
	if stream.Error != nil {
		return
	}
	}
	stream.WriteObjectEnd()
}

func (s *Build) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Build) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	OutputReceived := false
	PluginsReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "output":
			iter.ReadVal(&s.Output)
			if iter.Error != nil {
				return
			}
			OutputReceived = true
		case "plugins":
			iter.ReadVal(&s.Plugins)
			if iter.Error != nil {
				return
			}
			PluginsReceived = true
		case "resources":
			iter.ReadVal(&s.Resources)
			if iter.Error != nil {
				return
			}
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !OutputReceived {
		iter.ReportError("validating Build", "\"output\" is required but was not present")
	}

	if !PluginsReceived {
		iter.ReportError("validating Build", "\"plugins\" is required but was not present")
	}
}







// MarshalJSON serializes to JSON
func (s *CertificateAndKey) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s CertificateAndKey) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Certificate field
	ct.More()
	stream.WriteObjectField("certificate")
	stream.WriteString(s.Certificate)

	// Marshal the Key field
	ct.More()
	stream.WriteObjectField("key")
	stream.WriteString(s.Key)

	// Marshal the SecretName field
	ct.More()
	stream.WriteObjectField("secretName")
	stream.WriteString(s.SecretName)
	stream.WriteObjectEnd()
}

func (s *CertificateAndKey) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *CertificateAndKey) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	CertificateReceived := false
	KeyReceived := false
	SecretNameReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "certificate":
			s.Certificate = iter.ReadString()
			if iter.Error != nil {
				return
			}
			CertificateReceived = true
		case "key":
			s.Key = iter.ReadString()
			if iter.Error != nil {
				return
			}
			KeyReceived = true
		case "secretName":
			s.SecretName = iter.ReadString()
			if iter.Error != nil {
				return
			}
			SecretNameReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !CertificateReceived {
		iter.ReportError("validating CertificateAndKey", "\"certificate\" is required but was not present")
	}

	if !KeyReceived {
		iter.ReportError("validating CertificateAndKey", "\"key\" is required but was not present")
	}

	if !SecretNameReceived {
		iter.ReportError("validating CertificateAndKey", "\"secretName\" is required but was not present")
	}
}


// MarshalJSON serializes to JSON
func (s *ClientSecret) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s ClientSecret) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Key field
	ct.More()
	stream.WriteObjectField("key")
	stream.WriteString(s.Key)

	// Marshal the SecretName field
	ct.More()
	stream.WriteObjectField("secretName")
	stream.WriteString(s.SecretName)
	stream.WriteObjectEnd()
}

func (s *ClientSecret) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *ClientSecret) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	KeyReceived := false
	SecretNameReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "key":
			s.Key = iter.ReadString()
			if iter.Error != nil {
				return
			}
			KeyReceived = true
		case "secretName":
			s.SecretName = iter.ReadString()
			if iter.Error != nil {
				return
			}
			SecretNameReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !KeyReceived {
		iter.ReportError("validating ClientSecret", "\"key\" is required but was not present")
	}

	if !SecretNameReceived {
		iter.ReportError("validating ClientSecret", "\"secretName\" is required but was not present")
	}
}























// MarshalJSON serializes to JSON
func (s *Logging) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Logging) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Loggers field
	if !IsEmpty(s.Loggers) {
	ct.More()
	stream.WriteObjectField("loggers")
	stream.WriteVal(s.Loggers)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Name field
	if !IsEmpty(s.Name) {
	ct.More()
	stream.WriteObjectField("name")
	stream.WriteString(s.Name)
	}

	// Marshal the Type field
	ct.More()
	stream.WriteObjectField("type")
	stream.WriteString(s.Type)
	stream.WriteObjectEnd()
}

func (s *Logging) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Logging) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TypeReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "loggers":
			iter.ReadVal(&s.Loggers)
			if iter.Error != nil {
				return
			}
		case "name":
			s.Name = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "type":
			s.Type = iter.ReadString()
			if iter.Error != nil {
				return
			}
			TypeReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TypeReceived {
		iter.ReportError("validating Logging", "\"type\" is required but was not present")
	}
}







// MarshalJSON serializes to JSON
func (s *MetricsConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s MetricsConfig) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Type field
	ct.More()
	stream.WriteObjectField("type")
	stream.WriteString(s.Type)

	// Marshal the ValueFrom field

	// ValueFrom is required
	if s.ValueFrom == nil {
		stream.Error = errors.New("ValueFrom (valueFrom) is a required")
		return
	}
	ct.More()
	stream.WriteObjectField("valueFrom")
	stream.WriteVal(s.ValueFrom)
	if stream.Error != nil {
		return
	}
	stream.WriteObjectEnd()
}

func (s *MetricsConfig) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *MetricsConfig) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TypeReceived := false
	ValueFromReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "type":
			s.Type = iter.ReadString()
			if s.Type != "jmxPrometheusExporter" {
				iter.ReportError(
					"type",
					fmt.Sprintf("Expected %s, got \"%s\"", "jmxPrometheusExporter", s.Type),
				)
			}
			if iter.Error != nil {
				return
			}
			TypeReceived = true
		case "valueFrom":
			iter.ReadVal(&s.ValueFrom)
			if iter.Error != nil {
				return
			}
			ValueFromReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TypeReceived {
		iter.ReportError("validating MetricsConfig", "\"type\" is required but was not present")
	}

	if !ValueFromReceived {
		iter.ReportError("validating MetricsConfig", "\"valueFrom\" is required but was not present")
	}
}




// MarshalJSON serializes to JSON
func (s *Output) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Output) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Image field
	ct.More()
	stream.WriteObjectField("image")
	stream.WriteString(s.Image)

	// Marshal the PushSecret field
	if !IsEmpty(s.PushSecret) {
	ct.More()
	stream.WriteObjectField("pushSecret")
	stream.WriteString(s.PushSecret)
	}

	// Marshal the Type field
	ct.More()
	stream.WriteObjectField("type")
	stream.WriteString(s.Type)
	stream.WriteObjectEnd()
}

func (s *Output) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Output) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	ImageReceived := false
	TypeReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "image":
			s.Image = iter.ReadString()
			if iter.Error != nil {
				return
			}
			ImageReceived = true
		case "pushSecret":
			s.PushSecret = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "type":
			s.Type = iter.ReadString()
			if iter.Error != nil {
				return
			}
			TypeReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !ImageReceived {
		iter.ReportError("validating Output", "\"image\" is required but was not present")
	}

	if !TypeReceived {
		iter.ReportError("validating Output", "\"type\" is required but was not present")
	}
}


// MarshalJSON serializes to JSON
func (s *PasswordSecret) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s PasswordSecret) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Password field
	ct.More()
	stream.WriteObjectField("password")
	stream.WriteString(s.Password)

	// Marshal the SecretName field
	ct.More()
	stream.WriteObjectField("secretName")
	stream.WriteString(s.SecretName)
	stream.WriteObjectEnd()
}

func (s *PasswordSecret) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *PasswordSecret) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	PasswordReceived := false
	SecretNameReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "password":
			s.Password = iter.ReadString()
			if iter.Error != nil {
				return
			}
			PasswordReceived = true
		case "secretName":
			s.SecretName = iter.ReadString()
			if iter.Error != nil {
				return
			}
			SecretNameReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !PasswordReceived {
		iter.ReportError("validating PasswordSecret", "\"password\" is required but was not present")
	}

	if !SecretNameReceived {
		iter.ReportError("validating PasswordSecret", "\"secretName\" is required but was not present")
	}
}


// MarshalJSON serializes to JSON
func (s *PluginsItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s PluginsItems) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Artifacts field
	ct.More()
	stream.WriteObjectField("artifacts")
	stream.WriteVal(s.Artifacts)
	if stream.Error != nil {
		return
	}

	// Marshal the Name field
	ct.More()
	stream.WriteObjectField("name")
	stream.WriteString(s.Name)
	stream.WriteObjectEnd()
}

func (s *PluginsItems) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *PluginsItems) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	ArtifactsReceived := false
	NameReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "artifacts":
			iter.ReadVal(&s.Artifacts)
			if iter.Error != nil {
				return
			}
			ArtifactsReceived = true
		case "name":
			s.Name = iter.ReadString()
			if iter.Error != nil {
				return
			}
			NameReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !ArtifactsReceived {
		iter.ReportError("validating PluginsItems", "\"artifacts\" is required but was not present")
	}

	if !NameReceived {
		iter.ReportError("validating PluginsItems", "\"name\" is required but was not present")
	}
}









// MarshalJSON serializes to JSON
func (s *Rack) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Rack) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the TopologyKey field
	ct.More()
	stream.WriteObjectField("topologyKey")
	stream.WriteString(s.TopologyKey)
	stream.WriteObjectEnd()
}

func (s *Rack) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Rack) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TopologyKeyReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "topologyKey":
			s.TopologyKey = iter.ReadString()
			if iter.Error != nil {
				return
			}
			TopologyKeyReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TopologyKeyReceived {
		iter.ReportError("validating Rack", "\"topologyKey\" is required but was not present")
	}
}



// MarshalJSON serializes to JSON
func (s *RefreshToken) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s RefreshToken) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Key field
	ct.More()
	stream.WriteObjectField("key")
	stream.WriteString(s.Key)

	// Marshal the SecretName field
	ct.More()
	stream.WriteObjectField("secretName")
	stream.WriteString(s.SecretName)
	stream.WriteObjectEnd()
}

func (s *RefreshToken) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *RefreshToken) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	KeyReceived := false
	SecretNameReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "key":
			s.Key = iter.ReadString()
			if iter.Error != nil {
				return
			}
			KeyReceived = true
		case "secretName":
			s.SecretName = iter.ReadString()
			if iter.Error != nil {
				return
			}
			SecretNameReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !KeyReceived {
		iter.ReportError("validating RefreshToken", "\"key\" is required but was not present")
	}

	if !SecretNameReceived {
		iter.ReportError("validating RefreshToken", "\"secretName\" is required but was not present")
	}
}











// MarshalJSON serializes to JSON
func (s *Spec) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Spec) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Affinity field
	if !IsEmpty(s.Affinity) {
	ct.More()
	stream.WriteObjectField("affinity")
	stream.WriteVal(s.Affinity)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Authentication field
	if !IsEmpty(s.Authentication) {
	ct.More()
	stream.WriteObjectField("authentication")
	stream.WriteVal(s.Authentication)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the BootstrapServers field
	ct.More()
	stream.WriteObjectField("bootstrapServers")
	stream.WriteString(s.BootstrapServers)

	// Marshal the Build field
	if !IsEmpty(s.Build) {
	ct.More()
	stream.WriteObjectField("build")
	stream.WriteVal(s.Build)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the BuildResources field
	if !IsEmpty(s.BuildResources) {
	ct.More()
	stream.WriteObjectField("buildResources")
	stream.WriteVal(s.BuildResources)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the ClientRackInitImage field
	if !IsEmpty(s.ClientRackInitImage) {
	ct.More()
	stream.WriteObjectField("clientRackInitImage")
	stream.WriteString(s.ClientRackInitImage)
	}

	// Marshal the Config field
	if !IsEmpty(s.Config) {
	ct.More()
	stream.WriteObjectField("config")
	stream.WriteVal(s.Config)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the ExternalConfiguration field
	if !IsEmpty(s.ExternalConfiguration) {
	ct.More()
	stream.WriteObjectField("externalConfiguration")
	stream.WriteVal(s.ExternalConfiguration)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Image field
	if !IsEmpty(s.Image) {
	ct.More()
	stream.WriteObjectField("image")
	stream.WriteString(s.Image)
	}

	// Marshal the InsecureSourceRepository field
	if !IsEmpty(s.InsecureSourceRepository) {
	ct.More()
	stream.WriteObjectField("insecureSourceRepository")
	stream.WriteVal(s.InsecureSourceRepository)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the JvmOptions field
	if !IsEmpty(s.JvmOptions) {
	ct.More()
	stream.WriteObjectField("jvmOptions")
	stream.WriteVal(s.JvmOptions)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the LivenessProbe field
	if !IsEmpty(s.LivenessProbe) {
	ct.More()
	stream.WriteObjectField("livenessProbe")
	stream.WriteVal(s.LivenessProbe)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Logging field
	if !IsEmpty(s.Logging) {
	ct.More()
	stream.WriteObjectField("logging")
	stream.WriteVal(s.Logging)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Metrics field
	if !IsEmpty(s.Metrics) {
	ct.More()
	stream.WriteObjectField("metrics")
	stream.WriteVal(s.Metrics)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the MetricsConfig field
	if !IsEmpty(s.MetricsConfig) {
	ct.More()
	stream.WriteObjectField("metricsConfig")
	stream.WriteVal(s.MetricsConfig)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Rack field
	if !IsEmpty(s.Rack) {
	ct.More()
	stream.WriteObjectField("rack")
	stream.WriteVal(s.Rack)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the ReadinessProbe field
	if !IsEmpty(s.ReadinessProbe) {
	ct.More()
	stream.WriteObjectField("readinessProbe")
	stream.WriteVal(s.ReadinessProbe)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Replicas field
	if !IsEmpty(s.Replicas) {
	ct.More()
	stream.WriteObjectField("replicas")
	stream.WriteVal(s.Replicas)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Resources field
	if !IsEmpty(s.Resources) {
	ct.More()
	stream.WriteObjectField("resources")
	stream.WriteVal(s.Resources)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Template field
	if !IsEmpty(s.Template) {
	ct.More()
	stream.WriteObjectField("template")
	stream.WriteVal(s.Template)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Tls field
	if !IsEmpty(s.Tls) {
	ct.More()
	stream.WriteObjectField("tls")
	stream.WriteVal(s.Tls)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Tolerations field
	if !IsEmpty(s.Tolerations) {
	ct.More()
	stream.WriteObjectField("tolerations")
	stream.WriteVal(s.Tolerations)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Tracing field
	if !IsEmpty(s.Tracing) {
	ct.More()
	stream.WriteObjectField("tracing")
	stream.WriteVal(s.Tracing)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Version field
	if !IsEmpty(s.Version) {
	ct.More()
	stream.WriteObjectField("version")
	stream.WriteString(s.Version)
	}
	stream.WriteObjectEnd()
}

func (s *Spec) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Spec) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	BootstrapServersReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "affinity":
			iter.ReadVal(&s.Affinity)
			if iter.Error != nil {
				return
			}
		case "authentication":
			iter.ReadVal(&s.Authentication)
			if iter.Error != nil {
				return
			}
		case "bootstrapServers":
			s.BootstrapServers = iter.ReadString()
			if iter.Error != nil {
				return
			}
			BootstrapServersReceived = true
		case "build":
			iter.ReadVal(&s.Build)
			if iter.Error != nil {
				return
			}
		case "buildResources":
			iter.ReadVal(&s.BuildResources)
			if iter.Error != nil {
				return
			}
		case "clientRackInitImage":
			s.ClientRackInitImage = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "config":
			iter.ReadVal(&s.Config)
			if iter.Error != nil {
				return
			}
		case "externalConfiguration":
			iter.ReadVal(&s.ExternalConfiguration)
			if iter.Error != nil {
				return
			}
		case "image":
			s.Image = iter.ReadString()
			if iter.Error != nil {
				return
			}
		case "insecureSourceRepository":
			s.InsecureSourceRepository = iter.ReadBool()
			if iter.Error != nil {
				return
			}
		case "jvmOptions":
			iter.ReadVal(&s.JvmOptions)
			if iter.Error != nil {
				return
			}
		case "livenessProbe":
			iter.ReadVal(&s.LivenessProbe)
			if iter.Error != nil {
				return
			}
		case "logging":
			iter.ReadVal(&s.Logging)
			if iter.Error != nil {
				return
			}
		case "metrics":
			iter.ReadVal(&s.Metrics)
			if iter.Error != nil {
				return
			}
		case "metricsConfig":
			iter.ReadVal(&s.MetricsConfig)
			if iter.Error != nil {
				return
			}
		case "rack":
			iter.ReadVal(&s.Rack)
			if iter.Error != nil {
				return
			}
		case "readinessProbe":
			iter.ReadVal(&s.ReadinessProbe)
			if iter.Error != nil {
				return
			}
		case "replicas":
			iter.ReadVal(&s.Replicas)
			if iter.Error != nil {
				return
			}
		case "resources":
			iter.ReadVal(&s.Resources)
			if iter.Error != nil {
				return
			}
		case "template":
			iter.ReadVal(&s.Template)
			if iter.Error != nil {
				return
			}
		case "tls":
			iter.ReadVal(&s.Tls)
			if iter.Error != nil {
				return
			}
		case "tolerations":
			iter.ReadVal(&s.Tolerations)
			if iter.Error != nil {
				return
			}
		case "tracing":
			iter.ReadVal(&s.Tracing)
			if iter.Error != nil {
				return
			}
		case "version":
			s.Version = iter.ReadString()
			if iter.Error != nil {
				return
			}
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !BootstrapServersReceived {
		iter.ReportError("validating Spec", "\"bootstrapServers\" is required but was not present")
	}
}






// MarshalJSON serializes to JSON
func (s *TlsTrustedCertificatesItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s TlsTrustedCertificatesItems) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Certificate field
	ct.More()
	stream.WriteObjectField("certificate")
	stream.WriteString(s.Certificate)

	// Marshal the SecretName field
	ct.More()
	stream.WriteObjectField("secretName")
	stream.WriteString(s.SecretName)
	stream.WriteObjectEnd()
}

func (s *TlsTrustedCertificatesItems) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *TlsTrustedCertificatesItems) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	CertificateReceived := false
	SecretNameReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "certificate":
			s.Certificate = iter.ReadString()
			if iter.Error != nil {
				return
			}
			CertificateReceived = true
		case "secretName":
			s.SecretName = iter.ReadString()
			if iter.Error != nil {
				return
			}
			SecretNameReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !CertificateReceived {
		iter.ReportError("validating TlsTrustedCertificatesItems", "\"certificate\" is required but was not present")
	}

	if !SecretNameReceived {
		iter.ReportError("validating TlsTrustedCertificatesItems", "\"secretName\" is required but was not present")
	}
}




// MarshalJSON serializes to JSON
func (s *Tracing) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s Tracing) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Type field
	ct.More()
	stream.WriteObjectField("type")
	stream.WriteString(s.Type)
	stream.WriteObjectEnd()
}

func (s *Tracing) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *Tracing) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	TypeReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "type":
			s.Type = iter.ReadString()
			if s.Type != "jaeger" {
				iter.ReportError(
					"type",
					fmt.Sprintf("Expected %s, got \"%s\"", "jaeger", s.Type),
				)
			}
			if iter.Error != nil {
				return
			}
			TypeReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !TypeReceived {
		iter.ReportError("validating Tracing", "\"type\" is required but was not present")
	}
}


// MarshalJSON serializes to JSON
func (s *TrustedCertificatesItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s TrustedCertificatesItems) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the Certificate field
	ct.More()
	stream.WriteObjectField("certificate")
	stream.WriteString(s.Certificate)

	// Marshal the SecretName field
	ct.More()
	stream.WriteObjectField("secretName")
	stream.WriteString(s.SecretName)
	stream.WriteObjectEnd()
}

func (s *TrustedCertificatesItems) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *TrustedCertificatesItems) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	CertificateReceived := false
	SecretNameReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "certificate":
			s.Certificate = iter.ReadString()
			if iter.Error != nil {
				return
			}
			CertificateReceived = true
		case "secretName":
			s.SecretName = iter.ReadString()
			if iter.Error != nil {
				return
			}
			SecretNameReceived = true
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !CertificateReceived {
		iter.ReportError("validating TrustedCertificatesItems", "\"certificate\" is required but was not present")
	}

	if !SecretNameReceived {
		iter.ReportError("validating TrustedCertificatesItems", "\"secretName\" is required but was not present")
	}
}



// MarshalJSON serializes to JSON
func (s *VolumesItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	stream := jsoniter.ConfigDefault.BorrowStream(buf)
	s.MarshalJSONStream(stream)
	stream.Flush()
	err := stream.Error
	jsoniter.ConfigDefault.ReturnStream(stream)

	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s VolumesItems) MarshalJSONStream(stream *jsoniter.Stream) {
	stream.WriteObjectStart()
	ct := commaTracker{stream:stream}

	// Marshal the ConfigMap field
	if !IsEmpty(s.ConfigMap) {
	ct.More()
	stream.WriteObjectField("configMap")
	stream.WriteVal(s.ConfigMap)
	if stream.Error != nil {
		return
	}
	}

	// Marshal the Name field
	ct.More()
	stream.WriteObjectField("name")
	stream.WriteString(s.Name)

	// Marshal the Secret field
	if !IsEmpty(s.Secret) {
	ct.More()
	stream.WriteObjectField("secret")
	stream.WriteVal(s.Secret)
	if stream.Error != nil {
		return
	}
	}
	stream.WriteObjectEnd()
}

func (s *VolumesItems) UnmarshalJSON(data []byte) error {
	iter := jsoniter.ConfigDefault.BorrowIterator(data)
	s.UnmarshalJSONIterator(iter)
	err := iter.Error
	jsoniter.ConfigDefault.ReturnIterator(iter)
	return err
}

func (s *VolumesItems) UnmarshalJSONIterator(iter *jsoniter.Iterator) {
	NameReceived := false

	for field := iter.ReadObject(); field != ""; field = iter.ReadObject() {
		switch field {
		case "configMap":
			iter.ReadVal(&s.ConfigMap)
			if iter.Error != nil {
				return
			}
		case "name":
			s.Name = iter.ReadString()
			if iter.Error != nil {
				return
			}
			NameReceived = true
		case "secret":
			iter.ReadVal(&s.Secret)
			if iter.Error != nil {
				return
			}
		default:
			// Ignore the additional property
			iter.Skip()
		}
	}

	if !NameReceived {
		iter.ReportError("validating VolumesItems", "\"name\" is required but was not present")
	}
}

