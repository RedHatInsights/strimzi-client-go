// Code partially generated by github.com/atombender/go-jsonschema

package v1beta2

import (
	"encoding/json"
	"fmt"
	"reflect"

	apiextensions "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// KafkaMirrorMaker2
type KafkaMirrorMaker2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// The specification of the Kafka MirrorMaker 2 cluster.
	Spec *KafkaMirrorMaker2Spec `json:"spec,omitempty" yaml:"spec,omitempty" mapstructure:"spec,omitempty"`

	// The status of the Kafka MirrorMaker 2 cluster.
	Status *KafkaMirrorMaker2Status `json:"status,omitempty" yaml:"status,omitempty" mapstructure:"status,omitempty"`
}

// +kubebuilder:object:root=true
// KafkaMirrorMaker2List contains a list of instances.
type KafkaMirrorMaker2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`

	// A list of KafkaMirrorMaker2 objects.
	Items []KafkaMirrorMaker2 `json:"items,omitempty"`
}

// The specification of the Kafka MirrorMaker 2 cluster.
type KafkaMirrorMaker2Spec struct {
	// The image of the init container used for initializing the `client.rack`.
	ClientRackInitImage *string `json:"clientRackInitImage,omitempty" yaml:"clientRackInitImage,omitempty" mapstructure:"clientRackInitImage,omitempty"`

	// Kafka clusters for mirroring.
	Clusters []KafkaMirrorMaker2SpecClustersElem `json:"clusters,omitempty" yaml:"clusters,omitempty" mapstructure:"clusters,omitempty"`

	// The cluster alias used for Kafka Connect. The value must match the alias of the
	// *target* Kafka cluster as specified in the `spec.clusters` configuration. The
	// target Kafka cluster is used by the underlying Kafka Connect framework for its
	// internal topics.
	ConnectCluster string `json:"connectCluster" yaml:"connectCluster" mapstructure:"connectCluster"`

	// Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to
	// configure connectors.
	ExternalConfiguration *KafkaMirrorMaker2SpecExternalConfiguration `json:"externalConfiguration,omitempty" yaml:"externalConfiguration,omitempty" mapstructure:"externalConfiguration,omitempty"`

	// The container image used for Kafka Connect pods. If no image name is explicitly
	// specified, it is determined based on the `spec.version` configuration. The
	// image names are specifically mapped to corresponding versions in the Cluster
	// Operator configuration.
	Image *string `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// JMX Options.
	JmxOptions *KafkaMirrorMaker2SpecJmxOptions `json:"jmxOptions,omitempty" yaml:"jmxOptions,omitempty" mapstructure:"jmxOptions,omitempty"`

	// JVM Options for pods.
	JvmOptions *KafkaMirrorMaker2SpecJvmOptions `json:"jvmOptions,omitempty" yaml:"jvmOptions,omitempty" mapstructure:"jvmOptions,omitempty"`

	// Pod liveness checking.
	LivenessProbe *KafkaMirrorMaker2SpecLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// Logging configuration for Kafka Connect.
	Logging *KafkaMirrorMaker2SpecLogging `json:"logging,omitempty" yaml:"logging,omitempty" mapstructure:"logging,omitempty"`

	// Metrics configuration.
	MetricsConfig *KafkaMirrorMaker2SpecMetricsConfig `json:"metricsConfig,omitempty" yaml:"metricsConfig,omitempty" mapstructure:"metricsConfig,omitempty"`

	// Configuration of the MirrorMaker 2 connectors.
	Mirrors []KafkaMirrorMaker2SpecMirrorsElem `json:"mirrors,omitempty" yaml:"mirrors,omitempty" mapstructure:"mirrors,omitempty"`

	// Configuration of the node label which will be used as the `client.rack`
	// consumer configuration.
	Rack *KafkaMirrorMaker2SpecRack `json:"rack,omitempty" yaml:"rack,omitempty" mapstructure:"rack,omitempty"`

	// Pod readiness checking.
	ReadinessProbe *KafkaMirrorMaker2SpecReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// The number of pods in the Kafka Connect group. Defaults to `3`.
	Replicas *int32 `json:"replicas,omitempty" yaml:"replicas,omitempty" mapstructure:"replicas,omitempty"`

	// The maximum limits for CPU and memory resources and the requested initial
	// resources.
	Resources *KafkaMirrorMaker2SpecResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Template for Kafka Connect and Kafka Mirror Maker 2 resources. The template
	// allows users to specify how the `Pods`, `Service`, and other services are
	// generated.
	Template *KafkaMirrorMaker2SpecTemplate `json:"template,omitempty" yaml:"template,omitempty" mapstructure:"template,omitempty"`

	// The configuration of tracing in Kafka Connect.
	Tracing *KafkaMirrorMaker2SpecTracing `json:"tracing,omitempty" yaml:"tracing,omitempty" mapstructure:"tracing,omitempty"`

	// The Kafka Connect version. Defaults to the latest version. Consult the user
	// documentation to understand the process required to upgrade or downgrade the
	// version.
	Version *string `json:"version,omitempty" yaml:"version,omitempty" mapstructure:"version,omitempty"`
}

type KafkaMirrorMaker2SpecClustersElem struct {
	// Alias used to reference the Kafka cluster.
	Alias string `json:"alias" yaml:"alias" mapstructure:"alias"`

	// Authentication configuration for connecting to the cluster.
	Authentication *KafkaMirrorMaker2SpecClustersElemAuthentication `json:"authentication,omitempty" yaml:"authentication,omitempty" mapstructure:"authentication,omitempty"`

	// A comma-separated list of `host:port` pairs for establishing the connection to
	// the Kafka cluster.
	BootstrapServers string `json:"bootstrapServers" yaml:"bootstrapServers" mapstructure:"bootstrapServers"`

	// The MirrorMaker 2 cluster config. Properties with the following prefixes cannot
	// be set: ssl., sasl., security., listeners, plugin.path, rest.,
	// bootstrap.servers, consumer.interceptor.classes, producer.interceptor.classes
	// (with the exception of: ssl.endpoint.identification.algorithm,
	// ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
	Config *apiextensions.JSON `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// TLS configuration for connecting MirrorMaker 2 connectors to a cluster.
	Tls *KafkaMirrorMaker2SpecClustersElemTls `json:"tls,omitempty" yaml:"tls,omitempty" mapstructure:"tls,omitempty"`
}

// Authentication configuration for connecting to the cluster.
type KafkaMirrorMaker2SpecClustersElemAuthentication struct {
	// Link to Kubernetes Secret containing the access token which was obtained from
	// the authorization server.
	AccessToken *KafkaMirrorMaker2SpecClustersElemAuthenticationAccessToken `json:"accessToken,omitempty" yaml:"accessToken,omitempty" mapstructure:"accessToken,omitempty"`

	// Configure whether access token should be treated as JWT. This should be set to
	// `false` if the authorization server returns opaque tokens. Defaults to `true`.
	AccessTokenIsJwt *bool `json:"accessTokenIsJwt,omitempty" yaml:"accessTokenIsJwt,omitempty" mapstructure:"accessTokenIsJwt,omitempty"`

	// OAuth audience to use when authenticating against the authorization server.
	// Some authorization servers require the audience to be explicitly set. The
	// possible values depend on how the authorization server is configured. By
	// default, `audience` is not specified when performing the token endpoint
	// request.
	Audience *string `json:"audience,omitempty" yaml:"audience,omitempty" mapstructure:"audience,omitempty"`

	// Reference to the `Secret` which holds the certificate and private key pair.
	CertificateAndKey *KafkaMirrorMaker2SpecClustersElemAuthenticationCertificateAndKey `json:"certificateAndKey,omitempty" yaml:"certificateAndKey,omitempty" mapstructure:"certificateAndKey,omitempty"`

	// OAuth Client ID which the Kafka client can use to authenticate against the
	// OAuth server and use the token endpoint URI.
	ClientId *string `json:"clientId,omitempty" yaml:"clientId,omitempty" mapstructure:"clientId,omitempty"`

	// Link to Kubernetes Secret containing the OAuth client secret which the Kafka
	// client can use to authenticate against the OAuth server and use the token
	// endpoint URI.
	ClientSecret *KafkaMirrorMaker2SpecClustersElemAuthenticationClientSecret `json:"clientSecret,omitempty" yaml:"clientSecret,omitempty" mapstructure:"clientSecret,omitempty"`

	// The connect timeout in seconds when connecting to authorization server. If not
	// set, the effective connect timeout is 60 seconds.
	ConnectTimeoutSeconds *int32 `json:"connectTimeoutSeconds,omitempty" yaml:"connectTimeoutSeconds,omitempty" mapstructure:"connectTimeoutSeconds,omitempty"`

	// Enable or disable TLS hostname verification. Default value is `false`.
	DisableTlsHostnameVerification *bool `json:"disableTlsHostnameVerification,omitempty" yaml:"disableTlsHostnameVerification,omitempty" mapstructure:"disableTlsHostnameVerification,omitempty"`

	// Enable or disable OAuth metrics. Default value is `false`.
	EnableMetrics *bool `json:"enableMetrics,omitempty" yaml:"enableMetrics,omitempty" mapstructure:"enableMetrics,omitempty"`

	// The maximum number of retries to attempt if an initial HTTP request fails. If
	// not set, the default is to not attempt any retries.
	HttpRetries *int32 `json:"httpRetries,omitempty" yaml:"httpRetries,omitempty" mapstructure:"httpRetries,omitempty"`

	// The pause to take before retrying a failed HTTP request. If not set, the
	// default is to not pause at all but to immediately repeat a request.
	HttpRetryPauseMs *int32 `json:"httpRetryPauseMs,omitempty" yaml:"httpRetryPauseMs,omitempty" mapstructure:"httpRetryPauseMs,omitempty"`

	// Whether the Accept header should be set in requests to the authorization
	// servers. The default value is `true`.
	IncludeAcceptHeader *bool `json:"includeAcceptHeader,omitempty" yaml:"includeAcceptHeader,omitempty" mapstructure:"includeAcceptHeader,omitempty"`

	// Set or limit time-to-live of the access tokens to the specified number of
	// seconds. This should be set if the authorization server returns opaque tokens.
	MaxTokenExpirySeconds *int32 `json:"maxTokenExpirySeconds,omitempty" yaml:"maxTokenExpirySeconds,omitempty" mapstructure:"maxTokenExpirySeconds,omitempty"`

	// Reference to the `Secret` which holds the password.
	PasswordSecret *KafkaMirrorMaker2SpecClustersElemAuthenticationPasswordSecret `json:"passwordSecret,omitempty" yaml:"passwordSecret,omitempty" mapstructure:"passwordSecret,omitempty"`

	// The read timeout in seconds when connecting to authorization server. If not
	// set, the effective read timeout is 60 seconds.
	ReadTimeoutSeconds *int32 `json:"readTimeoutSeconds,omitempty" yaml:"readTimeoutSeconds,omitempty" mapstructure:"readTimeoutSeconds,omitempty"`

	// Link to Kubernetes Secret containing the refresh token which can be used to
	// obtain access token from the authorization server.
	RefreshToken *KafkaMirrorMaker2SpecClustersElemAuthenticationRefreshToken `json:"refreshToken,omitempty" yaml:"refreshToken,omitempty" mapstructure:"refreshToken,omitempty"`

	// OAuth scope to use when authenticating against the authorization server. Some
	// authorization servers require this to be set. The possible values depend on how
	// authorization server is configured. By default `scope` is not specified when
	// doing the token endpoint request.
	Scope *string `json:"scope,omitempty" yaml:"scope,omitempty" mapstructure:"scope,omitempty"`

	// Trusted certificates for TLS connection to the OAuth server.
	TlsTrustedCertificates []KafkaMirrorMaker2SpecClustersElemAuthenticationTlsTrustedCertificatesElem `json:"tlsTrustedCertificates,omitempty" yaml:"tlsTrustedCertificates,omitempty" mapstructure:"tlsTrustedCertificates,omitempty"`

	// Authorization server token endpoint URI.
	TokenEndpointUri *string `json:"tokenEndpointUri,omitempty" yaml:"tokenEndpointUri,omitempty" mapstructure:"tokenEndpointUri,omitempty"`

	// Authentication type. Currently the supported types are `tls`, `scram-sha-256`,
	// `scram-sha-512`, `plain`, and 'oauth'. `scram-sha-256` and `scram-sha-512`
	// types use SASL SCRAM-SHA-256 and SASL SCRAM-SHA-512 Authentication,
	// respectively. `plain` type uses SASL PLAIN Authentication. `oauth` type uses
	// SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication.
	// The `tls` type is supported only over TLS connections.
	Type KafkaMirrorMaker2SpecClustersElemAuthenticationType `json:"type" yaml:"type" mapstructure:"type"`

	// Username used for the authentication.
	Username *string `json:"username,omitempty" yaml:"username,omitempty" mapstructure:"username,omitempty"`
}

// Link to Kubernetes Secret containing the access token which was obtained from
// the authorization server.
type KafkaMirrorMaker2SpecClustersElemAuthenticationAccessToken struct {
	// The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key" yaml:"key" mapstructure:"key"`

	// The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName" yaml:"secretName" mapstructure:"secretName"`
}

// Reference to the `Secret` which holds the certificate and private key pair.
type KafkaMirrorMaker2SpecClustersElemAuthenticationCertificateAndKey struct {
	// The name of the file certificate in the Secret.
	Certificate string `json:"certificate" yaml:"certificate" mapstructure:"certificate"`

	// The name of the private key in the Secret.
	Key string `json:"key" yaml:"key" mapstructure:"key"`

	// The name of the Secret containing the certificate.
	SecretName string `json:"secretName" yaml:"secretName" mapstructure:"secretName"`
}

// Link to Kubernetes Secret containing the OAuth client secret which the Kafka
// client can use to authenticate against the OAuth server and use the token
// endpoint URI.
type KafkaMirrorMaker2SpecClustersElemAuthenticationClientSecret struct {
	// The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key" yaml:"key" mapstructure:"key"`

	// The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName" yaml:"secretName" mapstructure:"secretName"`
}

// Reference to the `Secret` which holds the password.
type KafkaMirrorMaker2SpecClustersElemAuthenticationPasswordSecret struct {
	// The name of the key in the Secret under which the password is stored.
	Password string `json:"password" yaml:"password" mapstructure:"password"`

	// The name of the Secret containing the password.
	SecretName string `json:"secretName" yaml:"secretName" mapstructure:"secretName"`
}

// Link to Kubernetes Secret containing the refresh token which can be used to
// obtain access token from the authorization server.
type KafkaMirrorMaker2SpecClustersElemAuthenticationRefreshToken struct {
	// The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key" yaml:"key" mapstructure:"key"`

	// The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName" yaml:"secretName" mapstructure:"secretName"`
}

type KafkaMirrorMaker2SpecClustersElemAuthenticationTlsTrustedCertificatesElem struct {
	// The name of the file certificate in the Secret.
	Certificate string `json:"certificate" yaml:"certificate" mapstructure:"certificate"`

	// The name of the Secret containing the certificate.
	SecretName string `json:"secretName" yaml:"secretName" mapstructure:"secretName"`
}

type KafkaMirrorMaker2SpecClustersElemAuthenticationType string

const KafkaMirrorMaker2SpecClustersElemAuthenticationTypeOauth KafkaMirrorMaker2SpecClustersElemAuthenticationType = "oauth"
const KafkaMirrorMaker2SpecClustersElemAuthenticationTypePlain KafkaMirrorMaker2SpecClustersElemAuthenticationType = "plain"
const KafkaMirrorMaker2SpecClustersElemAuthenticationTypeScramSha256 KafkaMirrorMaker2SpecClustersElemAuthenticationType = "scram-sha-256"
const KafkaMirrorMaker2SpecClustersElemAuthenticationTypeScramSha512 KafkaMirrorMaker2SpecClustersElemAuthenticationType = "scram-sha-512"
const KafkaMirrorMaker2SpecClustersElemAuthenticationTypeTls KafkaMirrorMaker2SpecClustersElemAuthenticationType = "tls"

// The MirrorMaker 2 cluster config. Properties with the following prefixes cannot
// be set: ssl., sasl., security., listeners, plugin.path, rest.,
// bootstrap.servers, consumer.interceptor.classes, producer.interceptor.classes
// (with the exception of: ssl.endpoint.identification.algorithm,
// ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
//type KafkaMirrorMaker2SpecClustersElemConfig map[string]interface{}

// TLS configuration for connecting MirrorMaker 2 connectors to a cluster.
type KafkaMirrorMaker2SpecClustersElemTls struct {
	// Trusted certificates for TLS connection.
	TrustedCertificates []KafkaMirrorMaker2SpecClustersElemTlsTrustedCertificatesElem `json:"trustedCertificates,omitempty" yaml:"trustedCertificates,omitempty" mapstructure:"trustedCertificates,omitempty"`
}

type KafkaMirrorMaker2SpecClustersElemTlsTrustedCertificatesElem struct {
	// The name of the file certificate in the Secret.
	Certificate string `json:"certificate" yaml:"certificate" mapstructure:"certificate"`

	// The name of the Secret containing the certificate.
	SecretName string `json:"secretName" yaml:"secretName" mapstructure:"secretName"`
}

// Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to
// configure connectors.
type KafkaMirrorMaker2SpecExternalConfiguration struct {
	// Makes data from a Secret or ConfigMap available in the Kafka Connect pods as
	// environment variables.
	Env []KafkaMirrorMaker2SpecExternalConfigurationEnvElem `json:"env,omitempty" yaml:"env,omitempty" mapstructure:"env,omitempty"`

	// Makes data from a Secret or ConfigMap available in the Kafka Connect pods as
	// volumes.
	Volumes []KafkaMirrorMaker2SpecExternalConfigurationVolumesElem `json:"volumes,omitempty" yaml:"volumes,omitempty" mapstructure:"volumes,omitempty"`
}

type KafkaMirrorMaker2SpecExternalConfigurationEnvElem struct {
	// Name of the environment variable which will be passed to the Kafka Connect
	// pods. The name of the environment variable cannot start with `KAFKA_` or
	// `STRIMZI_`.
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Value of the environment variable which will be passed to the Kafka Connect
	// pods. It can be passed either as a reference to Secret or ConfigMap field. The
	// field has to specify exactly one Secret or ConfigMap.
	ValueFrom KafkaMirrorMaker2SpecExternalConfigurationEnvElemValueFrom `json:"valueFrom" yaml:"valueFrom" mapstructure:"valueFrom"`
}

// Value of the environment variable which will be passed to the Kafka Connect
// pods. It can be passed either as a reference to Secret or ConfigMap field. The
// field has to specify exactly one Secret or ConfigMap.
type KafkaMirrorMaker2SpecExternalConfigurationEnvElemValueFrom struct {
	// Reference to a key in a ConfigMap.
	ConfigMapKeyRef *KafkaMirrorMaker2SpecExternalConfigurationEnvElemValueFromConfigMapKeyRef `json:"configMapKeyRef,omitempty" yaml:"configMapKeyRef,omitempty" mapstructure:"configMapKeyRef,omitempty"`

	// Reference to a key in a Secret.
	SecretKeyRef *KafkaMirrorMaker2SpecExternalConfigurationEnvElemValueFromSecretKeyRef `json:"secretKeyRef,omitempty" yaml:"secretKeyRef,omitempty" mapstructure:"secretKeyRef,omitempty"`
}

// Reference to a key in a ConfigMap.
type KafkaMirrorMaker2SpecExternalConfigurationEnvElemValueFromConfigMapKeyRef struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty" yaml:"optional,omitempty" mapstructure:"optional,omitempty"`
}

// Reference to a key in a Secret.
type KafkaMirrorMaker2SpecExternalConfigurationEnvElemValueFromSecretKeyRef struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty" yaml:"optional,omitempty" mapstructure:"optional,omitempty"`
}

type KafkaMirrorMaker2SpecExternalConfigurationVolumesElem struct {
	// Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be
	// specified.
	ConfigMap *KafkaMirrorMaker2SpecExternalConfigurationVolumesElemConfigMap `json:"configMap,omitempty" yaml:"configMap,omitempty" mapstructure:"configMap,omitempty"`

	// Name of the volume which will be added to the Kafka Connect pods.
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be
	// specified.
	Secret *KafkaMirrorMaker2SpecExternalConfigurationVolumesElemSecret `json:"secret,omitempty" yaml:"secret,omitempty" mapstructure:"secret,omitempty"`
}

// Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be
// specified.
type KafkaMirrorMaker2SpecExternalConfigurationVolumesElemConfigMap struct {
	// DefaultMode corresponds to the JSON schema field "defaultMode".
	DefaultMode *int32 `json:"defaultMode,omitempty" yaml:"defaultMode,omitempty" mapstructure:"defaultMode,omitempty"`

	// Items corresponds to the JSON schema field "items".
	Items []KafkaMirrorMaker2SpecExternalConfigurationVolumesElemConfigMapItemsElem `json:"items,omitempty" yaml:"items,omitempty" mapstructure:"items,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty" yaml:"optional,omitempty" mapstructure:"optional,omitempty"`
}

type KafkaMirrorMaker2SpecExternalConfigurationVolumesElemConfigMapItemsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Mode corresponds to the JSON schema field "mode".
	Mode *int32 `json:"mode,omitempty" yaml:"mode,omitempty" mapstructure:"mode,omitempty"`

	// Path corresponds to the JSON schema field "path".
	Path *string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`
}

// Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be
// specified.
type KafkaMirrorMaker2SpecExternalConfigurationVolumesElemSecret struct {
	// DefaultMode corresponds to the JSON schema field "defaultMode".
	DefaultMode *int32 `json:"defaultMode,omitempty" yaml:"defaultMode,omitempty" mapstructure:"defaultMode,omitempty"`

	// Items corresponds to the JSON schema field "items".
	Items []KafkaMirrorMaker2SpecExternalConfigurationVolumesElemSecretItemsElem `json:"items,omitempty" yaml:"items,omitempty" mapstructure:"items,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty" yaml:"optional,omitempty" mapstructure:"optional,omitempty"`

	// SecretName corresponds to the JSON schema field "secretName".
	SecretName *string `json:"secretName,omitempty" yaml:"secretName,omitempty" mapstructure:"secretName,omitempty"`
}

type KafkaMirrorMaker2SpecExternalConfigurationVolumesElemSecretItemsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Mode corresponds to the JSON schema field "mode".
	Mode *int32 `json:"mode,omitempty" yaml:"mode,omitempty" mapstructure:"mode,omitempty"`

	// Path corresponds to the JSON schema field "path".
	Path *string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`
}

// JMX Options.
type KafkaMirrorMaker2SpecJmxOptions struct {
	// Authentication configuration for connecting to the JMX port.
	Authentication *KafkaMirrorMaker2SpecJmxOptionsAuthentication `json:"authentication,omitempty" yaml:"authentication,omitempty" mapstructure:"authentication,omitempty"`
}

// Authentication configuration for connecting to the JMX port.
type KafkaMirrorMaker2SpecJmxOptionsAuthentication struct {
	// Authentication type. Currently the only supported types are
	// `password`.`password` type creates a username and protected port with no TLS.
	Type KafkaMirrorMaker2SpecJmxOptionsAuthenticationType `json:"type" yaml:"type" mapstructure:"type"`
}

type KafkaMirrorMaker2SpecJmxOptionsAuthenticationType string

const KafkaMirrorMaker2SpecJmxOptionsAuthenticationTypePassword KafkaMirrorMaker2SpecJmxOptionsAuthenticationType = "password"

// JVM Options for pods.
type KafkaMirrorMaker2SpecJvmOptions struct {
	// A map of -XX options to the JVM.
	XX KafkaMirrorMaker2SpecJvmOptionsXX `json:"-XX,omitempty" yaml:"-XX,omitempty" mapstructure:"-XX,omitempty"`

	// -Xms option to to the JVM.
	Xms *string `json:"-Xms,omitempty" yaml:"-Xms,omitempty" mapstructure:"-Xms,omitempty"`

	// -Xmx option to to the JVM.
	Xmx *string `json:"-Xmx,omitempty" yaml:"-Xmx,omitempty" mapstructure:"-Xmx,omitempty"`

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	GcLoggingEnabled *bool `json:"gcLoggingEnabled,omitempty" yaml:"gcLoggingEnabled,omitempty" mapstructure:"gcLoggingEnabled,omitempty"`

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	JavaSystemProperties []KafkaMirrorMaker2SpecJvmOptionsJavaSystemPropertiesElem `json:"javaSystemProperties,omitempty" yaml:"javaSystemProperties,omitempty" mapstructure:"javaSystemProperties,omitempty"`
}

type KafkaMirrorMaker2SpecJvmOptionsJavaSystemPropertiesElem struct {
	// The system property name.
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// The system property value.
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

// A map of -XX options to the JVM.
type KafkaMirrorMaker2SpecJvmOptionsXX map[string]string

// Pod liveness checking.
type KafkaMirrorMaker2SpecLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

// Logging configuration for Kafka Connect.
type KafkaMirrorMaker2SpecLogging struct {
	// A Map from logger name to logger level.
	Loggers KafkaMirrorMaker2SpecLoggingLoggers `json:"loggers,omitempty" yaml:"loggers,omitempty" mapstructure:"loggers,omitempty"`

	// Logging type, must be either 'inline' or 'external'.
	Type KafkaMirrorMaker2SpecLoggingType `json:"type" yaml:"type" mapstructure:"type"`

	// `ConfigMap` entry where the logging configuration is stored.
	ValueFrom *KafkaMirrorMaker2SpecLoggingValueFrom `json:"valueFrom,omitempty" yaml:"valueFrom,omitempty" mapstructure:"valueFrom,omitempty"`
}

// A Map from logger name to logger level.
type KafkaMirrorMaker2SpecLoggingLoggers map[string]string

type KafkaMirrorMaker2SpecLoggingType string

const KafkaMirrorMaker2SpecLoggingTypeExternal KafkaMirrorMaker2SpecLoggingType = "external"
const KafkaMirrorMaker2SpecLoggingTypeInline KafkaMirrorMaker2SpecLoggingType = "inline"

// `ConfigMap` entry where the logging configuration is stored.
type KafkaMirrorMaker2SpecLoggingValueFrom struct {
	// Reference to the key in the ConfigMap containing the configuration.
	ConfigMapKeyRef *KafkaMirrorMaker2SpecLoggingValueFromConfigMapKeyRef `json:"configMapKeyRef,omitempty" yaml:"configMapKeyRef,omitempty" mapstructure:"configMapKeyRef,omitempty"`
}

// Reference to the key in the ConfigMap containing the configuration.
type KafkaMirrorMaker2SpecLoggingValueFromConfigMapKeyRef struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty" yaml:"optional,omitempty" mapstructure:"optional,omitempty"`
}

// Metrics configuration.
type KafkaMirrorMaker2SpecMetricsConfig struct {
	// Metrics type. Only 'jmxPrometheusExporter' supported currently.
	Type KafkaMirrorMaker2SpecMetricsConfigType `json:"type" yaml:"type" mapstructure:"type"`

	// ConfigMap entry where the Prometheus JMX Exporter configuration is stored.
	ValueFrom KafkaMirrorMaker2SpecMetricsConfigValueFrom `json:"valueFrom" yaml:"valueFrom" mapstructure:"valueFrom"`
}

type KafkaMirrorMaker2SpecMetricsConfigType string

const KafkaMirrorMaker2SpecMetricsConfigTypeJmxPrometheusExporter KafkaMirrorMaker2SpecMetricsConfigType = "jmxPrometheusExporter"

// ConfigMap entry where the Prometheus JMX Exporter configuration is stored.
type KafkaMirrorMaker2SpecMetricsConfigValueFrom struct {
	// Reference to the key in the ConfigMap containing the configuration.
	ConfigMapKeyRef *KafkaMirrorMaker2SpecMetricsConfigValueFromConfigMapKeyRef `json:"configMapKeyRef,omitempty" yaml:"configMapKeyRef,omitempty" mapstructure:"configMapKeyRef,omitempty"`
}

// Reference to the key in the ConfigMap containing the configuration.
type KafkaMirrorMaker2SpecMetricsConfigValueFromConfigMapKeyRef struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty" yaml:"optional,omitempty" mapstructure:"optional,omitempty"`
}

type KafkaMirrorMaker2SpecMirrorsElem struct {
	// The specification of the Kafka MirrorMaker 2 checkpoint connector.
	CheckpointConnector *KafkaMirrorMaker2SpecMirrorsElemCheckpointConnector `json:"checkpointConnector,omitempty" yaml:"checkpointConnector,omitempty" mapstructure:"checkpointConnector,omitempty"`

	// A regular expression matching the consumer groups to exclude from mirroring.
	// Comma-separated lists are also supported.
	GroupsBlacklistPattern *string `json:"groupsBlacklistPattern,omitempty" yaml:"groupsBlacklistPattern,omitempty" mapstructure:"groupsBlacklistPattern,omitempty"`

	// A regular expression matching the consumer groups to exclude from mirroring.
	// Comma-separated lists are also supported.
	GroupsExcludePattern *string `json:"groupsExcludePattern,omitempty" yaml:"groupsExcludePattern,omitempty" mapstructure:"groupsExcludePattern,omitempty"`

	// A regular expression matching the consumer groups to be mirrored.
	// Comma-separated lists are also supported.
	GroupsPattern *string `json:"groupsPattern,omitempty" yaml:"groupsPattern,omitempty" mapstructure:"groupsPattern,omitempty"`

	// The specification of the Kafka MirrorMaker 2 heartbeat connector.
	HeartbeatConnector *KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnector `json:"heartbeatConnector,omitempty" yaml:"heartbeatConnector,omitempty" mapstructure:"heartbeatConnector,omitempty"`

	// The alias of the source cluster used by the Kafka MirrorMaker 2 connectors. The
	// alias must match a cluster in the list at `spec.clusters`.
	SourceCluster string `json:"sourceCluster" yaml:"sourceCluster" mapstructure:"sourceCluster"`

	// The specification of the Kafka MirrorMaker 2 source connector.
	SourceConnector *KafkaMirrorMaker2SpecMirrorsElemSourceConnector `json:"sourceConnector,omitempty" yaml:"sourceConnector,omitempty" mapstructure:"sourceConnector,omitempty"`

	// The alias of the target cluster used by the Kafka MirrorMaker 2 connectors. The
	// alias must match a cluster in the list at `spec.clusters`.
	TargetCluster string `json:"targetCluster" yaml:"targetCluster" mapstructure:"targetCluster"`

	// A regular expression matching the topics to exclude from mirroring.
	// Comma-separated lists are also supported.
	TopicsBlacklistPattern *string `json:"topicsBlacklistPattern,omitempty" yaml:"topicsBlacklistPattern,omitempty" mapstructure:"topicsBlacklistPattern,omitempty"`

	// A regular expression matching the topics to exclude from mirroring.
	// Comma-separated lists are also supported.
	TopicsExcludePattern *string `json:"topicsExcludePattern,omitempty" yaml:"topicsExcludePattern,omitempty" mapstructure:"topicsExcludePattern,omitempty"`

	// A regular expression matching the topics to be mirrored, for example,
	// "topic1\|topic2\|topic3". Comma-separated lists are also supported.
	TopicsPattern *string `json:"topicsPattern,omitempty" yaml:"topicsPattern,omitempty" mapstructure:"topicsPattern,omitempty"`
}

// The specification of the Kafka MirrorMaker 2 checkpoint connector.
type KafkaMirrorMaker2SpecMirrorsElemCheckpointConnector struct {
	// Automatic restart of connector and tasks configuration.
	AutoRestart *KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorAutoRestart `json:"autoRestart,omitempty" yaml:"autoRestart,omitempty" mapstructure:"autoRestart,omitempty"`

	// The Kafka Connector configuration. The following properties cannot be set:
	// connector.class, tasks.max.
	Config *apiextensions.JSON `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Whether the connector should be paused. Defaults to false.
	Pause *bool `json:"pause,omitempty" yaml:"pause,omitempty" mapstructure:"pause,omitempty"`

	// The state the connector should be in. Defaults to running.
	State *KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorState `json:"state,omitempty" yaml:"state,omitempty" mapstructure:"state,omitempty"`

	// The maximum number of tasks for the Kafka Connector.
	TasksMax *int32 `json:"tasksMax,omitempty" yaml:"tasksMax,omitempty" mapstructure:"tasksMax,omitempty"`
}

// Automatic restart of connector and tasks configuration.
type KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorAutoRestart struct {
	// Whether automatic restart for failed connectors and tasks should be enabled or
	// disabled.
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// The maximum number of connector restarts that the operator will try. If the
	// connector remains in a failed state after reaching this limit, it must be
	// restarted manually by the user. Defaults to an unlimited number of restarts.
	MaxRestarts *int32 `json:"maxRestarts,omitempty" yaml:"maxRestarts,omitempty" mapstructure:"maxRestarts,omitempty"`
}

// The Kafka Connector configuration. The following properties cannot be set:
// connector.class, tasks.max.
//type KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorConfig map[string]interface{}

type KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorState string

const KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorStatePaused KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorState = "paused"
const KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorStateRunning KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorState = "running"
const KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorStateStopped KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorState = "stopped"

// The specification of the Kafka MirrorMaker 2 heartbeat connector.
type KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnector struct {
	// Automatic restart of connector and tasks configuration.
	AutoRestart *KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorAutoRestart `json:"autoRestart,omitempty" yaml:"autoRestart,omitempty" mapstructure:"autoRestart,omitempty"`

	// The Kafka Connector configuration. The following properties cannot be set:
	// connector.class, tasks.max.
	Config *apiextensions.JSON `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Whether the connector should be paused. Defaults to false.
	Pause *bool `json:"pause,omitempty" yaml:"pause,omitempty" mapstructure:"pause,omitempty"`

	// The state the connector should be in. Defaults to running.
	State *KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorState `json:"state,omitempty" yaml:"state,omitempty" mapstructure:"state,omitempty"`

	// The maximum number of tasks for the Kafka Connector.
	TasksMax *int32 `json:"tasksMax,omitempty" yaml:"tasksMax,omitempty" mapstructure:"tasksMax,omitempty"`
}

// Automatic restart of connector and tasks configuration.
type KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorAutoRestart struct {
	// Whether automatic restart for failed connectors and tasks should be enabled or
	// disabled.
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// The maximum number of connector restarts that the operator will try. If the
	// connector remains in a failed state after reaching this limit, it must be
	// restarted manually by the user. Defaults to an unlimited number of restarts.
	MaxRestarts *int32 `json:"maxRestarts,omitempty" yaml:"maxRestarts,omitempty" mapstructure:"maxRestarts,omitempty"`
}

// The Kafka Connector configuration. The following properties cannot be set:
// connector.class, tasks.max.
//type KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorConfig map[string]interface{}

type KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorState string

const KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorStatePaused KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorState = "paused"
const KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorStateRunning KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorState = "running"
const KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorStateStopped KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorState = "stopped"

// The specification of the Kafka MirrorMaker 2 source connector.
type KafkaMirrorMaker2SpecMirrorsElemSourceConnector struct {
	// Automatic restart of connector and tasks configuration.
	AutoRestart *KafkaMirrorMaker2SpecMirrorsElemSourceConnectorAutoRestart `json:"autoRestart,omitempty" yaml:"autoRestart,omitempty" mapstructure:"autoRestart,omitempty"`

	// The Kafka Connector configuration. The following properties cannot be set:
	// connector.class, tasks.max.
	Config *apiextensions.JSON `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Whether the connector should be paused. Defaults to false.
	Pause *bool `json:"pause,omitempty" yaml:"pause,omitempty" mapstructure:"pause,omitempty"`

	// The state the connector should be in. Defaults to running.
	State *KafkaMirrorMaker2SpecMirrorsElemSourceConnectorState `json:"state,omitempty" yaml:"state,omitempty" mapstructure:"state,omitempty"`

	// The maximum number of tasks for the Kafka Connector.
	TasksMax *int32 `json:"tasksMax,omitempty" yaml:"tasksMax,omitempty" mapstructure:"tasksMax,omitempty"`
}

// Automatic restart of connector and tasks configuration.
type KafkaMirrorMaker2SpecMirrorsElemSourceConnectorAutoRestart struct {
	// Whether automatic restart for failed connectors and tasks should be enabled or
	// disabled.
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// The maximum number of connector restarts that the operator will try. If the
	// connector remains in a failed state after reaching this limit, it must be
	// restarted manually by the user. Defaults to an unlimited number of restarts.
	MaxRestarts *int32 `json:"maxRestarts,omitempty" yaml:"maxRestarts,omitempty" mapstructure:"maxRestarts,omitempty"`
}

// The Kafka Connector configuration. The following properties cannot be set:
// connector.class, tasks.max.
//type KafkaMirrorMaker2SpecMirrorsElemSourceConnectorConfig map[string]interface{}

type KafkaMirrorMaker2SpecMirrorsElemSourceConnectorState string

const KafkaMirrorMaker2SpecMirrorsElemSourceConnectorStatePaused KafkaMirrorMaker2SpecMirrorsElemSourceConnectorState = "paused"
const KafkaMirrorMaker2SpecMirrorsElemSourceConnectorStateRunning KafkaMirrorMaker2SpecMirrorsElemSourceConnectorState = "running"
const KafkaMirrorMaker2SpecMirrorsElemSourceConnectorStateStopped KafkaMirrorMaker2SpecMirrorsElemSourceConnectorState = "stopped"

// Configuration of the node label which will be used as the `client.rack` consumer
// configuration.
type KafkaMirrorMaker2SpecRack struct {
	// A key that matches labels assigned to the Kubernetes cluster nodes. The value
	// of the label is used to set a broker's `broker.rack` config, and the
	// `client.rack` config for Kafka Connect or MirrorMaker 2.
	TopologyKey string `json:"topologyKey" yaml:"topologyKey" mapstructure:"topologyKey"`
}

// Pod readiness checking.
type KafkaMirrorMaker2SpecReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

// The maximum limits for CPU and memory resources and the requested initial
// resources.
type KafkaMirrorMaker2SpecResources struct {
	// Claims corresponds to the JSON schema field "claims".
	Claims []KafkaMirrorMaker2SpecResourcesClaimsElem `json:"claims,omitempty" yaml:"claims,omitempty" mapstructure:"claims,omitempty"`

	// Limits corresponds to the JSON schema field "limits".
	Limits *apiextensions.JSON `json:"limits,omitempty" yaml:"limits,omitempty" mapstructure:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests *apiextensions.JSON `json:"requests,omitempty" yaml:"requests,omitempty" mapstructure:"requests,omitempty"`
}

type KafkaMirrorMaker2SpecResourcesClaimsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

//type KafkaMirrorMaker2SpecResourcesLimits map[string]interface{}

//type KafkaMirrorMaker2SpecResourcesRequests map[string]interface{}

// Template for Kafka Connect and Kafka Mirror Maker 2 resources. The template
// allows users to specify how the `Pods`, `Service`, and other services are
// generated.
type KafkaMirrorMaker2SpecTemplate struct {
	// Template for Kafka Connect API `Service`.
	ApiService *KafkaMirrorMaker2SpecTemplateApiService `json:"apiService,omitempty" yaml:"apiService,omitempty" mapstructure:"apiService,omitempty"`

	// Template for the Kafka Connect BuildConfig used to build new container images.
	// The BuildConfig is used only on OpenShift.
	BuildConfig *KafkaMirrorMaker2SpecTemplateBuildConfig `json:"buildConfig,omitempty" yaml:"buildConfig,omitempty" mapstructure:"buildConfig,omitempty"`

	// Template for the Kafka Connect Build container. The build container is used
	// only on Kubernetes.
	BuildContainer *KafkaMirrorMaker2SpecTemplateBuildContainer `json:"buildContainer,omitempty" yaml:"buildContainer,omitempty" mapstructure:"buildContainer,omitempty"`

	// Template for Kafka Connect Build `Pods`. The build pod is used only on
	// Kubernetes.
	BuildPod *KafkaMirrorMaker2SpecTemplateBuildPod `json:"buildPod,omitempty" yaml:"buildPod,omitempty" mapstructure:"buildPod,omitempty"`

	// Template for the Kafka Connect Build service account.
	BuildServiceAccount *KafkaMirrorMaker2SpecTemplateBuildServiceAccount `json:"buildServiceAccount,omitempty" yaml:"buildServiceAccount,omitempty" mapstructure:"buildServiceAccount,omitempty"`

	// Template for the Kafka Connect ClusterRoleBinding.
	ClusterRoleBinding *KafkaMirrorMaker2SpecTemplateClusterRoleBinding `json:"clusterRoleBinding,omitempty" yaml:"clusterRoleBinding,omitempty" mapstructure:"clusterRoleBinding,omitempty"`

	// Template for the Kafka Connect container.
	ConnectContainer *KafkaMirrorMaker2SpecTemplateConnectContainer `json:"connectContainer,omitempty" yaml:"connectContainer,omitempty" mapstructure:"connectContainer,omitempty"`

	// Template for Kafka Connect `Deployment`.
	Deployment *KafkaMirrorMaker2SpecTemplateDeployment `json:"deployment,omitempty" yaml:"deployment,omitempty" mapstructure:"deployment,omitempty"`

	// Template for Kafka Connect headless `Service`.
	HeadlessService *KafkaMirrorMaker2SpecTemplateHeadlessService `json:"headlessService,omitempty" yaml:"headlessService,omitempty" mapstructure:"headlessService,omitempty"`

	// Template for the Kafka init container.
	InitContainer *KafkaMirrorMaker2SpecTemplateInitContainer `json:"initContainer,omitempty" yaml:"initContainer,omitempty" mapstructure:"initContainer,omitempty"`

	// Template for Secret of the Kafka Connect Cluster JMX authentication.
	JmxSecret *KafkaMirrorMaker2SpecTemplateJmxSecret `json:"jmxSecret,omitempty" yaml:"jmxSecret,omitempty" mapstructure:"jmxSecret,omitempty"`

	// Template for Kafka Connect `Pods`.
	Pod *KafkaMirrorMaker2SpecTemplatePod `json:"pod,omitempty" yaml:"pod,omitempty" mapstructure:"pod,omitempty"`

	// Template for Kafka Connect `PodDisruptionBudget`.
	PodDisruptionBudget *KafkaMirrorMaker2SpecTemplatePodDisruptionBudget `json:"podDisruptionBudget,omitempty" yaml:"podDisruptionBudget,omitempty" mapstructure:"podDisruptionBudget,omitempty"`

	// Template for Kafka Connect `StrimziPodSet` resource.
	PodSet *KafkaMirrorMaker2SpecTemplatePodSet `json:"podSet,omitempty" yaml:"podSet,omitempty" mapstructure:"podSet,omitempty"`

	// Template for the Kafka Connect service account.
	ServiceAccount *KafkaMirrorMaker2SpecTemplateServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`
}

// Template for Kafka Connect API `Service`.
type KafkaMirrorMaker2SpecTemplateApiService struct {
	// Specifies the IP Families used by the service. Available options are `IPv4` and
	// `IPv6`. If unspecified, Kubernetes will choose the default value based on the
	// `ipFamilyPolicy` setting.
	IpFamilies []KafkaMirrorMaker2SpecTemplateApiServiceIpFamiliesElem `json:"ipFamilies,omitempty" yaml:"ipFamilies,omitempty" mapstructure:"ipFamilies,omitempty"`

	// Specifies the IP Family Policy used by the service. Available options are
	// `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a
	// single IP family. `PreferDualStack` is for two IP families on dual-stack
	// configured clusters or a single IP family on single-stack clusters.
	// `RequireDualStack` fails unless there are two IP families on dual-stack
	// configured clusters. If unspecified, Kubernetes will choose the default value
	// based on the service type.
	IpFamilyPolicy *KafkaMirrorMaker2SpecTemplateApiServiceIpFamilyPolicy `json:"ipFamilyPolicy,omitempty" yaml:"ipFamilyPolicy,omitempty" mapstructure:"ipFamilyPolicy,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaMirrorMaker2SpecTemplateApiServiceMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateApiServiceIpFamiliesElem string

const KafkaMirrorMaker2SpecTemplateApiServiceIpFamiliesElemIPv4 KafkaMirrorMaker2SpecTemplateApiServiceIpFamiliesElem = "IPv4"
const KafkaMirrorMaker2SpecTemplateApiServiceIpFamiliesElemIPv6 KafkaMirrorMaker2SpecTemplateApiServiceIpFamiliesElem = "IPv6"

type KafkaMirrorMaker2SpecTemplateApiServiceIpFamilyPolicy string

const KafkaMirrorMaker2SpecTemplateApiServiceIpFamilyPolicyPreferDualStack KafkaMirrorMaker2SpecTemplateApiServiceIpFamilyPolicy = "PreferDualStack"
const KafkaMirrorMaker2SpecTemplateApiServiceIpFamilyPolicyRequireDualStack KafkaMirrorMaker2SpecTemplateApiServiceIpFamilyPolicy = "RequireDualStack"
const KafkaMirrorMaker2SpecTemplateApiServiceIpFamilyPolicySingleStack KafkaMirrorMaker2SpecTemplateApiServiceIpFamilyPolicy = "SingleStack"

// Metadata applied to the resource.
type KafkaMirrorMaker2SpecTemplateApiServiceMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations KafkaMirrorMaker2SpecTemplateApiServiceMetadataAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Labels added to the Kubernetes resource.
	Labels KafkaMirrorMaker2SpecTemplateApiServiceMetadataLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`
}

// Annotations added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateApiServiceMetadataAnnotations map[string]string

// Labels added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateApiServiceMetadataLabels map[string]string

// Template for the Kafka Connect BuildConfig used to build new container images.
// The BuildConfig is used only on OpenShift.
type KafkaMirrorMaker2SpecTemplateBuildConfig struct {
	// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
	Metadata *KafkaMirrorMaker2SpecTemplateBuildConfigMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Container Registry Secret with the credentials for pulling the base image.
	PullSecret *string `json:"pullSecret,omitempty" yaml:"pullSecret,omitempty" mapstructure:"pullSecret,omitempty"`
}

// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
type KafkaMirrorMaker2SpecTemplateBuildConfigMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations KafkaMirrorMaker2SpecTemplateBuildConfigMetadataAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Labels added to the Kubernetes resource.
	Labels KafkaMirrorMaker2SpecTemplateBuildConfigMetadataLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`
}

// Annotations added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateBuildConfigMetadataAnnotations map[string]string

// Labels added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateBuildConfigMetadataLabels map[string]string

// Template for the Kafka Connect Build container. The build container is used only
// on Kubernetes.
type KafkaMirrorMaker2SpecTemplateBuildContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaMirrorMaker2SpecTemplateBuildContainerEnvElem `json:"env,omitempty" yaml:"env,omitempty" mapstructure:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaMirrorMaker2SpecTemplateBuildContainerSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

// Security context for the container.
type KafkaMirrorMaker2SpecTemplateBuildContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaMirrorMaker2SpecTemplateBuildContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty" yaml:"procMount,omitempty" mapstructure:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaMirrorMaker2SpecTemplateBuildContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty" yaml:"seLinuxOptions,omitempty" mapstructure:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaMirrorMaker2SpecTemplateBuildContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaMirrorMaker2SpecTemplateBuildContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty" yaml:"windowsOptions,omitempty" mapstructure:"windowsOptions,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty" yaml:"add,omitempty" mapstructure:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty" yaml:"level,omitempty" mapstructure:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty" yaml:"role,omitempty" mapstructure:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty" yaml:"user,omitempty" mapstructure:"user,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty" yaml:"localhostProfile,omitempty" mapstructure:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty" yaml:"gmsaCredentialSpec,omitempty" mapstructure:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty" yaml:"gmsaCredentialSpecName,omitempty" mapstructure:"gmsaCredentialSpecName,omitempty"`

	// HostProcess corresponds to the JSON schema field "hostProcess".
	HostProcess *bool `json:"hostProcess,omitempty" yaml:"hostProcess,omitempty" mapstructure:"hostProcess,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty" yaml:"runAsUserName,omitempty" mapstructure:"runAsUserName,omitempty"`
}

// Template for Kafka Connect Build `Pods`. The build pod is used only on
// Kubernetes.
type KafkaMirrorMaker2SpecTemplateBuildPod struct {
	// The pod's affinity rules.
	Affinity *KafkaMirrorMaker2SpecTemplateBuildPodAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	EnableServiceLinks *bool `json:"enableServiceLinks,omitempty" yaml:"enableServiceLinks,omitempty" mapstructure:"enableServiceLinks,omitempty"`

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	HostAliases []KafkaMirrorMaker2SpecTemplateBuildPodHostAliasesElem `json:"hostAliases,omitempty" yaml:"hostAliases,omitempty" mapstructure:"hostAliases,omitempty"`

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []KafkaMirrorMaker2SpecTemplateBuildPodImagePullSecretsElem `json:"imagePullSecrets,omitempty" yaml:"imagePullSecrets,omitempty" mapstructure:"imagePullSecrets,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaMirrorMaker2SpecTemplateBuildPodMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// The name of the priority class used to assign priority to the pods.
	PriorityClassName *string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	SchedulerName *string `json:"schedulerName,omitempty" yaml:"schedulerName,omitempty" mapstructure:"schedulerName,omitempty"`

	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaMirrorMaker2SpecTemplateBuildPodSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	TerminationGracePeriodSeconds *int32 `json:"terminationGracePeriodSeconds,omitempty" yaml:"terminationGracePeriodSeconds,omitempty" mapstructure:"terminationGracePeriodSeconds,omitempty"`

	// Defines the total amount (for example `1Gi`) of local storage required for
	// temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
	TmpDirSizeLimit *string `json:"tmpDirSizeLimit,omitempty" yaml:"tmpDirSizeLimit,omitempty" mapstructure:"tmpDirSizeLimit,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaMirrorMaker2SpecTemplateBuildPodTolerationsElem `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// The pod's topology spread constraints.
	TopologySpreadConstraints []KafkaMirrorMaker2SpecTemplateBuildPodTopologySpreadConstraintsElem `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`
}

// The pod's affinity rules.
type KafkaMirrorMaker2SpecTemplateBuildPodAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinity `json:"nodeAffinity,omitempty" yaml:"nodeAffinity,omitempty" mapstructure:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinity `json:"podAffinity,omitempty" yaml:"podAffinity,omitempty" mapstructure:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty" yaml:"podAntiAffinity,omitempty" mapstructure:"podAntiAffinity,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty" yaml:"preferredDuringSchedulingIgnoredDuringExecution,omitempty" mapstructure:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty" yaml:"requiredDuringSchedulingIgnoredDuringExecution,omitempty" mapstructure:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty" yaml:"preference,omitempty" mapstructure:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty" yaml:"weight,omitempty" mapstructure:"weight,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty" yaml:"matchFields,omitempty" mapstructure:"matchFields,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty" yaml:"nodeSelectorTerms,omitempty" mapstructure:"nodeSelectorTerms,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty" yaml:"matchFields,omitempty" mapstructure:"matchFields,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty" yaml:"preferredDuringSchedulingIgnoredDuringExecution,omitempty" mapstructure:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty" yaml:"requiredDuringSchedulingIgnoredDuringExecution,omitempty" mapstructure:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty" yaml:"podAffinityTerm,omitempty" mapstructure:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty" yaml:"weight,omitempty" mapstructure:"weight,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty" yaml:"labelSelector,omitempty" mapstructure:"labelSelector,omitempty"`

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	MatchLabelKeys []string `json:"matchLabelKeys,omitempty" yaml:"matchLabelKeys,omitempty" mapstructure:"matchLabelKeys,omitempty"`

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	MismatchLabelKeys []string `json:"mismatchLabelKeys,omitempty" yaml:"mismatchLabelKeys,omitempty" mapstructure:"mismatchLabelKeys,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty" yaml:"namespaceSelector,omitempty" mapstructure:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty" yaml:"namespaces,omitempty" mapstructure:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty" yaml:"topologyKey,omitempty" mapstructure:"topologyKey,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty" yaml:"labelSelector,omitempty" mapstructure:"labelSelector,omitempty"`

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	MatchLabelKeys []string `json:"matchLabelKeys,omitempty" yaml:"matchLabelKeys,omitempty" mapstructure:"matchLabelKeys,omitempty"`

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	MismatchLabelKeys []string `json:"mismatchLabelKeys,omitempty" yaml:"mismatchLabelKeys,omitempty" mapstructure:"mismatchLabelKeys,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector `json:"namespaceSelector,omitempty" yaml:"namespaceSelector,omitempty" mapstructure:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty" yaml:"namespaces,omitempty" mapstructure:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty" yaml:"topologyKey,omitempty" mapstructure:"topologyKey,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty" yaml:"preferredDuringSchedulingIgnoredDuringExecution,omitempty" mapstructure:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty" yaml:"requiredDuringSchedulingIgnoredDuringExecution,omitempty" mapstructure:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty" yaml:"podAffinityTerm,omitempty" mapstructure:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty" yaml:"weight,omitempty" mapstructure:"weight,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty" yaml:"labelSelector,omitempty" mapstructure:"labelSelector,omitempty"`

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	MatchLabelKeys []string `json:"matchLabelKeys,omitempty" yaml:"matchLabelKeys,omitempty" mapstructure:"matchLabelKeys,omitempty"`

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	MismatchLabelKeys []string `json:"mismatchLabelKeys,omitempty" yaml:"mismatchLabelKeys,omitempty" mapstructure:"mismatchLabelKeys,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty" yaml:"namespaceSelector,omitempty" mapstructure:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty" yaml:"namespaces,omitempty" mapstructure:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty" yaml:"topologyKey,omitempty" mapstructure:"topologyKey,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty" yaml:"labelSelector,omitempty" mapstructure:"labelSelector,omitempty"`

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	MatchLabelKeys []string `json:"matchLabelKeys,omitempty" yaml:"matchLabelKeys,omitempty" mapstructure:"matchLabelKeys,omitempty"`

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	MismatchLabelKeys []string `json:"mismatchLabelKeys,omitempty" yaml:"mismatchLabelKeys,omitempty" mapstructure:"mismatchLabelKeys,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector `json:"namespaceSelector,omitempty" yaml:"namespaceSelector,omitempty" mapstructure:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty" yaml:"namespaces,omitempty" mapstructure:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty" yaml:"topologyKey,omitempty" mapstructure:"topologyKey,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplateBuildPodHostAliasesElem struct {
	// Hostnames corresponds to the JSON schema field "hostnames".
	Hostnames []string `json:"hostnames,omitempty" yaml:"hostnames,omitempty" mapstructure:"hostnames,omitempty"`

	// Ip corresponds to the JSON schema field "ip".
	Ip *string `json:"ip,omitempty" yaml:"ip,omitempty" mapstructure:"ip,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodImagePullSecretsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// Metadata applied to the resource.
type KafkaMirrorMaker2SpecTemplateBuildPodMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations KafkaMirrorMaker2SpecTemplateBuildPodMetadataAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Labels added to the Kubernetes resource.
	Labels KafkaMirrorMaker2SpecTemplateBuildPodMetadataLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`
}

// Annotations added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateBuildPodMetadataAnnotations map[string]string

// Labels added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateBuildPodMetadataLabels map[string]string

// Configures pod-level security attributes and common container settings.
type KafkaMirrorMaker2SpecTemplateBuildPodSecurityContext struct {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	FsGroup *int32 `json:"fsGroup,omitempty" yaml:"fsGroup,omitempty" mapstructure:"fsGroup,omitempty"`

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty" yaml:"fsGroupChangePolicy,omitempty" mapstructure:"fsGroupChangePolicy,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaMirrorMaker2SpecTemplateBuildPodSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty" yaml:"seLinuxOptions,omitempty" mapstructure:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaMirrorMaker2SpecTemplateBuildPodSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	SupplementalGroups []int32 `json:"supplementalGroups,omitempty" yaml:"supplementalGroups,omitempty" mapstructure:"supplementalGroups,omitempty"`

	// Sysctls corresponds to the JSON schema field "sysctls".
	Sysctls []KafkaMirrorMaker2SpecTemplateBuildPodSecurityContextSysctlsElem `json:"sysctls,omitempty" yaml:"sysctls,omitempty" mapstructure:"sysctls,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaMirrorMaker2SpecTemplateBuildPodSecurityContextWindowsOptions `json:"windowsOptions,omitempty" yaml:"windowsOptions,omitempty" mapstructure:"windowsOptions,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty" yaml:"level,omitempty" mapstructure:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty" yaml:"role,omitempty" mapstructure:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty" yaml:"user,omitempty" mapstructure:"user,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty" yaml:"localhostProfile,omitempty" mapstructure:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodSecurityContextSysctlsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty" yaml:"gmsaCredentialSpec,omitempty" mapstructure:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty" yaml:"gmsaCredentialSpecName,omitempty" mapstructure:"gmsaCredentialSpecName,omitempty"`

	// HostProcess corresponds to the JSON schema field "hostProcess".
	HostProcess *bool `json:"hostProcess,omitempty" yaml:"hostProcess,omitempty" mapstructure:"hostProcess,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty" yaml:"runAsUserName,omitempty" mapstructure:"runAsUserName,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty" yaml:"effect,omitempty" mapstructure:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty" yaml:"tolerationSeconds,omitempty" mapstructure:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodTopologySpreadConstraintsElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaMirrorMaker2SpecTemplateBuildPodTopologySpreadConstraintsElemLabelSelector `json:"labelSelector,omitempty" yaml:"labelSelector,omitempty" mapstructure:"labelSelector,omitempty"`

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	MatchLabelKeys []string `json:"matchLabelKeys,omitempty" yaml:"matchLabelKeys,omitempty" mapstructure:"matchLabelKeys,omitempty"`

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	MaxSkew *int32 `json:"maxSkew,omitempty" yaml:"maxSkew,omitempty" mapstructure:"maxSkew,omitempty"`

	// MinDomains corresponds to the JSON schema field "minDomains".
	MinDomains *int32 `json:"minDomains,omitempty" yaml:"minDomains,omitempty" mapstructure:"minDomains,omitempty"`

	// NodeAffinityPolicy corresponds to the JSON schema field "nodeAffinityPolicy".
	NodeAffinityPolicy *string `json:"nodeAffinityPolicy,omitempty" yaml:"nodeAffinityPolicy,omitempty" mapstructure:"nodeAffinityPolicy,omitempty"`

	// NodeTaintsPolicy corresponds to the JSON schema field "nodeTaintsPolicy".
	NodeTaintsPolicy *string `json:"nodeTaintsPolicy,omitempty" yaml:"nodeTaintsPolicy,omitempty" mapstructure:"nodeTaintsPolicy,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty" yaml:"topologyKey,omitempty" mapstructure:"topologyKey,omitempty"`

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	WhenUnsatisfiable *string `json:"whenUnsatisfiable,omitempty" yaml:"whenUnsatisfiable,omitempty" mapstructure:"whenUnsatisfiable,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodTopologySpreadConstraintsElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplateBuildPodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplateBuildPodTopologySpreadConstraintsElemLabelSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateBuildPodTopologySpreadConstraintsElemLabelSelectorMatchLabels map[string]string

// Template for the Kafka Connect Build service account.
type KafkaMirrorMaker2SpecTemplateBuildServiceAccount struct {
	// Metadata applied to the resource.
	Metadata *KafkaMirrorMaker2SpecTemplateBuildServiceAccountMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaMirrorMaker2SpecTemplateBuildServiceAccountMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations KafkaMirrorMaker2SpecTemplateBuildServiceAccountMetadataAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Labels added to the Kubernetes resource.
	Labels KafkaMirrorMaker2SpecTemplateBuildServiceAccountMetadataLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`
}

// Annotations added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateBuildServiceAccountMetadataAnnotations map[string]string

// Labels added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateBuildServiceAccountMetadataLabels map[string]string

// Template for the Kafka Connect ClusterRoleBinding.
type KafkaMirrorMaker2SpecTemplateClusterRoleBinding struct {
	// Metadata applied to the resource.
	Metadata *KafkaMirrorMaker2SpecTemplateClusterRoleBindingMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaMirrorMaker2SpecTemplateClusterRoleBindingMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations KafkaMirrorMaker2SpecTemplateClusterRoleBindingMetadataAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Labels added to the Kubernetes resource.
	Labels KafkaMirrorMaker2SpecTemplateClusterRoleBindingMetadataLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`
}

// Annotations added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateClusterRoleBindingMetadataAnnotations map[string]string

// Labels added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateClusterRoleBindingMetadataLabels map[string]string

// Template for the Kafka Connect container.
type KafkaMirrorMaker2SpecTemplateConnectContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaMirrorMaker2SpecTemplateConnectContainerEnvElem `json:"env,omitempty" yaml:"env,omitempty" mapstructure:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateConnectContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

// Security context for the container.
type KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty" yaml:"procMount,omitempty" mapstructure:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty" yaml:"seLinuxOptions,omitempty" mapstructure:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty" yaml:"windowsOptions,omitempty" mapstructure:"windowsOptions,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty" yaml:"add,omitempty" mapstructure:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty" yaml:"level,omitempty" mapstructure:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty" yaml:"role,omitempty" mapstructure:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty" yaml:"user,omitempty" mapstructure:"user,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty" yaml:"localhostProfile,omitempty" mapstructure:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty" yaml:"gmsaCredentialSpec,omitempty" mapstructure:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty" yaml:"gmsaCredentialSpecName,omitempty" mapstructure:"gmsaCredentialSpecName,omitempty"`

	// HostProcess corresponds to the JSON schema field "hostProcess".
	HostProcess *bool `json:"hostProcess,omitempty" yaml:"hostProcess,omitempty" mapstructure:"hostProcess,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty" yaml:"runAsUserName,omitempty" mapstructure:"runAsUserName,omitempty"`
}

// Template for Kafka Connect `Deployment`.
type KafkaMirrorMaker2SpecTemplateDeployment struct {
	// Pod replacement strategy for deployment configuration changes. Valid values are
	// `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`.
	DeploymentStrategy *KafkaMirrorMaker2SpecTemplateDeploymentDeploymentStrategy `json:"deploymentStrategy,omitempty" yaml:"deploymentStrategy,omitempty" mapstructure:"deploymentStrategy,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaMirrorMaker2SpecTemplateDeploymentMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateDeploymentDeploymentStrategy string

const KafkaMirrorMaker2SpecTemplateDeploymentDeploymentStrategyRecreate KafkaMirrorMaker2SpecTemplateDeploymentDeploymentStrategy = "Recreate"
const KafkaMirrorMaker2SpecTemplateDeploymentDeploymentStrategyRollingUpdate KafkaMirrorMaker2SpecTemplateDeploymentDeploymentStrategy = "RollingUpdate"

// Metadata applied to the resource.
type KafkaMirrorMaker2SpecTemplateDeploymentMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations KafkaMirrorMaker2SpecTemplateDeploymentMetadataAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Labels added to the Kubernetes resource.
	Labels KafkaMirrorMaker2SpecTemplateDeploymentMetadataLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`
}

// Annotations added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateDeploymentMetadataAnnotations map[string]string

// Labels added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateDeploymentMetadataLabels map[string]string

// Template for Kafka Connect headless `Service`.
type KafkaMirrorMaker2SpecTemplateHeadlessService struct {
	// Specifies the IP Families used by the service. Available options are `IPv4` and
	// `IPv6`. If unspecified, Kubernetes will choose the default value based on the
	// `ipFamilyPolicy` setting.
	IpFamilies []KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamiliesElem `json:"ipFamilies,omitempty" yaml:"ipFamilies,omitempty" mapstructure:"ipFamilies,omitempty"`

	// Specifies the IP Family Policy used by the service. Available options are
	// `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a
	// single IP family. `PreferDualStack` is for two IP families on dual-stack
	// configured clusters or a single IP family on single-stack clusters.
	// `RequireDualStack` fails unless there are two IP families on dual-stack
	// configured clusters. If unspecified, Kubernetes will choose the default value
	// based on the service type.
	IpFamilyPolicy *KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamilyPolicy `json:"ipFamilyPolicy,omitempty" yaml:"ipFamilyPolicy,omitempty" mapstructure:"ipFamilyPolicy,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaMirrorMaker2SpecTemplateHeadlessServiceMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamiliesElem string

const KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamiliesElemIPv4 KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamiliesElem = "IPv4"
const KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamiliesElemIPv6 KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamiliesElem = "IPv6"

type KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamilyPolicy string

const KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamilyPolicyPreferDualStack KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamilyPolicy = "PreferDualStack"
const KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamilyPolicyRequireDualStack KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamilyPolicy = "RequireDualStack"
const KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamilyPolicySingleStack KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamilyPolicy = "SingleStack"

// Metadata applied to the resource.
type KafkaMirrorMaker2SpecTemplateHeadlessServiceMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations KafkaMirrorMaker2SpecTemplateHeadlessServiceMetadataAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Labels added to the Kubernetes resource.
	Labels KafkaMirrorMaker2SpecTemplateHeadlessServiceMetadataLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`
}

// Annotations added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateHeadlessServiceMetadataAnnotations map[string]string

// Labels added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateHeadlessServiceMetadataLabels map[string]string

// Template for the Kafka init container.
type KafkaMirrorMaker2SpecTemplateInitContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaMirrorMaker2SpecTemplateInitContainerEnvElem `json:"env,omitempty" yaml:"env,omitempty" mapstructure:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaMirrorMaker2SpecTemplateInitContainerSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateInitContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

// Security context for the container.
type KafkaMirrorMaker2SpecTemplateInitContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaMirrorMaker2SpecTemplateInitContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty" yaml:"procMount,omitempty" mapstructure:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaMirrorMaker2SpecTemplateInitContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty" yaml:"seLinuxOptions,omitempty" mapstructure:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaMirrorMaker2SpecTemplateInitContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaMirrorMaker2SpecTemplateInitContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty" yaml:"windowsOptions,omitempty" mapstructure:"windowsOptions,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateInitContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty" yaml:"add,omitempty" mapstructure:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateInitContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty" yaml:"level,omitempty" mapstructure:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty" yaml:"role,omitempty" mapstructure:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty" yaml:"user,omitempty" mapstructure:"user,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateInitContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty" yaml:"localhostProfile,omitempty" mapstructure:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type KafkaMirrorMaker2SpecTemplateInitContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty" yaml:"gmsaCredentialSpec,omitempty" mapstructure:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty" yaml:"gmsaCredentialSpecName,omitempty" mapstructure:"gmsaCredentialSpecName,omitempty"`

	// HostProcess corresponds to the JSON schema field "hostProcess".
	HostProcess *bool `json:"hostProcess,omitempty" yaml:"hostProcess,omitempty" mapstructure:"hostProcess,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty" yaml:"runAsUserName,omitempty" mapstructure:"runAsUserName,omitempty"`
}

// Template for Secret of the Kafka Connect Cluster JMX authentication.
type KafkaMirrorMaker2SpecTemplateJmxSecret struct {
	// Metadata applied to the resource.
	Metadata *KafkaMirrorMaker2SpecTemplateJmxSecretMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaMirrorMaker2SpecTemplateJmxSecretMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations KafkaMirrorMaker2SpecTemplateJmxSecretMetadataAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Labels added to the Kubernetes resource.
	Labels KafkaMirrorMaker2SpecTemplateJmxSecretMetadataLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`
}

// Annotations added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateJmxSecretMetadataAnnotations map[string]string

// Labels added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateJmxSecretMetadataLabels map[string]string

// Template for Kafka Connect `Pods`.
type KafkaMirrorMaker2SpecTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaMirrorMaker2SpecTemplatePodAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	EnableServiceLinks *bool `json:"enableServiceLinks,omitempty" yaml:"enableServiceLinks,omitempty" mapstructure:"enableServiceLinks,omitempty"`

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	HostAliases []KafkaMirrorMaker2SpecTemplatePodHostAliasesElem `json:"hostAliases,omitempty" yaml:"hostAliases,omitempty" mapstructure:"hostAliases,omitempty"`

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []KafkaMirrorMaker2SpecTemplatePodImagePullSecretsElem `json:"imagePullSecrets,omitempty" yaml:"imagePullSecrets,omitempty" mapstructure:"imagePullSecrets,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaMirrorMaker2SpecTemplatePodMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// The name of the priority class used to assign priority to the pods.
	PriorityClassName *string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	SchedulerName *string `json:"schedulerName,omitempty" yaml:"schedulerName,omitempty" mapstructure:"schedulerName,omitempty"`

	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaMirrorMaker2SpecTemplatePodSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	TerminationGracePeriodSeconds *int32 `json:"terminationGracePeriodSeconds,omitempty" yaml:"terminationGracePeriodSeconds,omitempty" mapstructure:"terminationGracePeriodSeconds,omitempty"`

	// Defines the total amount (for example `1Gi`) of local storage required for
	// temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
	TmpDirSizeLimit *string `json:"tmpDirSizeLimit,omitempty" yaml:"tmpDirSizeLimit,omitempty" mapstructure:"tmpDirSizeLimit,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaMirrorMaker2SpecTemplatePodTolerationsElem `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// The pod's topology spread constraints.
	TopologySpreadConstraints []KafkaMirrorMaker2SpecTemplatePodTopologySpreadConstraintsElem `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`
}

// The pod's affinity rules.
type KafkaMirrorMaker2SpecTemplatePodAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinity `json:"nodeAffinity,omitempty" yaml:"nodeAffinity,omitempty" mapstructure:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinity `json:"podAffinity,omitempty" yaml:"podAffinity,omitempty" mapstructure:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty" yaml:"podAntiAffinity,omitempty" mapstructure:"podAntiAffinity,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty" yaml:"preferredDuringSchedulingIgnoredDuringExecution,omitempty" mapstructure:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty" yaml:"requiredDuringSchedulingIgnoredDuringExecution,omitempty" mapstructure:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty" yaml:"preference,omitempty" mapstructure:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty" yaml:"weight,omitempty" mapstructure:"weight,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty" yaml:"matchFields,omitempty" mapstructure:"matchFields,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty" yaml:"nodeSelectorTerms,omitempty" mapstructure:"nodeSelectorTerms,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty" yaml:"matchFields,omitempty" mapstructure:"matchFields,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty" yaml:"preferredDuringSchedulingIgnoredDuringExecution,omitempty" mapstructure:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty" yaml:"requiredDuringSchedulingIgnoredDuringExecution,omitempty" mapstructure:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty" yaml:"podAffinityTerm,omitempty" mapstructure:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty" yaml:"weight,omitempty" mapstructure:"weight,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty" yaml:"labelSelector,omitempty" mapstructure:"labelSelector,omitempty"`

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	MatchLabelKeys []string `json:"matchLabelKeys,omitempty" yaml:"matchLabelKeys,omitempty" mapstructure:"matchLabelKeys,omitempty"`

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	MismatchLabelKeys []string `json:"mismatchLabelKeys,omitempty" yaml:"mismatchLabelKeys,omitempty" mapstructure:"mismatchLabelKeys,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty" yaml:"namespaceSelector,omitempty" mapstructure:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty" yaml:"namespaces,omitempty" mapstructure:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty" yaml:"topologyKey,omitempty" mapstructure:"topologyKey,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty" yaml:"labelSelector,omitempty" mapstructure:"labelSelector,omitempty"`

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	MatchLabelKeys []string `json:"matchLabelKeys,omitempty" yaml:"matchLabelKeys,omitempty" mapstructure:"matchLabelKeys,omitempty"`

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	MismatchLabelKeys []string `json:"mismatchLabelKeys,omitempty" yaml:"mismatchLabelKeys,omitempty" mapstructure:"mismatchLabelKeys,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector `json:"namespaceSelector,omitempty" yaml:"namespaceSelector,omitempty" mapstructure:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty" yaml:"namespaces,omitempty" mapstructure:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty" yaml:"topologyKey,omitempty" mapstructure:"topologyKey,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty" yaml:"preferredDuringSchedulingIgnoredDuringExecution,omitempty" mapstructure:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty" yaml:"requiredDuringSchedulingIgnoredDuringExecution,omitempty" mapstructure:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty" yaml:"podAffinityTerm,omitempty" mapstructure:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty" yaml:"weight,omitempty" mapstructure:"weight,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty" yaml:"labelSelector,omitempty" mapstructure:"labelSelector,omitempty"`

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	MatchLabelKeys []string `json:"matchLabelKeys,omitempty" yaml:"matchLabelKeys,omitempty" mapstructure:"matchLabelKeys,omitempty"`

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	MismatchLabelKeys []string `json:"mismatchLabelKeys,omitempty" yaml:"mismatchLabelKeys,omitempty" mapstructure:"mismatchLabelKeys,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty" yaml:"namespaceSelector,omitempty" mapstructure:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty" yaml:"namespaces,omitempty" mapstructure:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty" yaml:"topologyKey,omitempty" mapstructure:"topologyKey,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty" yaml:"labelSelector,omitempty" mapstructure:"labelSelector,omitempty"`

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	MatchLabelKeys []string `json:"matchLabelKeys,omitempty" yaml:"matchLabelKeys,omitempty" mapstructure:"matchLabelKeys,omitempty"`

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	MismatchLabelKeys []string `json:"mismatchLabelKeys,omitempty" yaml:"mismatchLabelKeys,omitempty" mapstructure:"mismatchLabelKeys,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector `json:"namespaceSelector,omitempty" yaml:"namespaceSelector,omitempty" mapstructure:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty" yaml:"namespaces,omitempty" mapstructure:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty" yaml:"topologyKey,omitempty" mapstructure:"topologyKey,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]string

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels map[string]string

// Template for Kafka Connect `PodDisruptionBudget`.
type KafkaMirrorMaker2SpecTemplatePodDisruptionBudget struct {
	// Maximum number of unavailable pods to allow automatic Pod eviction. A Pod
	// eviction is allowed when the `maxUnavailable` number of pods or fewer are
	// unavailable after the eviction. Setting this value to 0 prevents all voluntary
	// evictions, so the pods must be evicted manually. Defaults to 1.
	MaxUnavailable *int32 `json:"maxUnavailable,omitempty" yaml:"maxUnavailable,omitempty" mapstructure:"maxUnavailable,omitempty"`

	// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
	Metadata *KafkaMirrorMaker2SpecTemplatePodDisruptionBudgetMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
type KafkaMirrorMaker2SpecTemplatePodDisruptionBudgetMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations KafkaMirrorMaker2SpecTemplatePodDisruptionBudgetMetadataAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Labels added to the Kubernetes resource.
	Labels KafkaMirrorMaker2SpecTemplatePodDisruptionBudgetMetadataLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`
}

// Annotations added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplatePodDisruptionBudgetMetadataAnnotations map[string]string

// Labels added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplatePodDisruptionBudgetMetadataLabels map[string]string

type KafkaMirrorMaker2SpecTemplatePodHostAliasesElem struct {
	// Hostnames corresponds to the JSON schema field "hostnames".
	Hostnames []string `json:"hostnames,omitempty" yaml:"hostnames,omitempty" mapstructure:"hostnames,omitempty"`

	// Ip corresponds to the JSON schema field "ip".
	Ip *string `json:"ip,omitempty" yaml:"ip,omitempty" mapstructure:"ip,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodImagePullSecretsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// Metadata applied to the resource.
type KafkaMirrorMaker2SpecTemplatePodMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations KafkaMirrorMaker2SpecTemplatePodMetadataAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Labels added to the Kubernetes resource.
	Labels KafkaMirrorMaker2SpecTemplatePodMetadataLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`
}

// Annotations added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplatePodMetadataAnnotations map[string]string

// Labels added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplatePodMetadataLabels map[string]string

// Configures pod-level security attributes and common container settings.
type KafkaMirrorMaker2SpecTemplatePodSecurityContext struct {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	FsGroup *int32 `json:"fsGroup,omitempty" yaml:"fsGroup,omitempty" mapstructure:"fsGroup,omitempty"`

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty" yaml:"fsGroupChangePolicy,omitempty" mapstructure:"fsGroupChangePolicy,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaMirrorMaker2SpecTemplatePodSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty" yaml:"seLinuxOptions,omitempty" mapstructure:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaMirrorMaker2SpecTemplatePodSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	SupplementalGroups []int32 `json:"supplementalGroups,omitempty" yaml:"supplementalGroups,omitempty" mapstructure:"supplementalGroups,omitempty"`

	// Sysctls corresponds to the JSON schema field "sysctls".
	Sysctls []KafkaMirrorMaker2SpecTemplatePodSecurityContextSysctlsElem `json:"sysctls,omitempty" yaml:"sysctls,omitempty" mapstructure:"sysctls,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaMirrorMaker2SpecTemplatePodSecurityContextWindowsOptions `json:"windowsOptions,omitempty" yaml:"windowsOptions,omitempty" mapstructure:"windowsOptions,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty" yaml:"level,omitempty" mapstructure:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty" yaml:"role,omitempty" mapstructure:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty" yaml:"user,omitempty" mapstructure:"user,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty" yaml:"localhostProfile,omitempty" mapstructure:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodSecurityContextSysctlsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty" yaml:"gmsaCredentialSpec,omitempty" mapstructure:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty" yaml:"gmsaCredentialSpecName,omitempty" mapstructure:"gmsaCredentialSpecName,omitempty"`

	// HostProcess corresponds to the JSON schema field "hostProcess".
	HostProcess *bool `json:"hostProcess,omitempty" yaml:"hostProcess,omitempty" mapstructure:"hostProcess,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty" yaml:"runAsUserName,omitempty" mapstructure:"runAsUserName,omitempty"`
}

// Template for Kafka Connect `StrimziPodSet` resource.
type KafkaMirrorMaker2SpecTemplatePodSet struct {
	// Metadata applied to the resource.
	Metadata *KafkaMirrorMaker2SpecTemplatePodSetMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaMirrorMaker2SpecTemplatePodSetMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations KafkaMirrorMaker2SpecTemplatePodSetMetadataAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Labels added to the Kubernetes resource.
	Labels KafkaMirrorMaker2SpecTemplatePodSetMetadataLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`
}

// Annotations added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplatePodSetMetadataAnnotations map[string]string

// Labels added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplatePodSetMetadataLabels map[string]string

type KafkaMirrorMaker2SpecTemplatePodTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty" yaml:"effect,omitempty" mapstructure:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty" yaml:"tolerationSeconds,omitempty" mapstructure:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodTopologySpreadConstraintsElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaMirrorMaker2SpecTemplatePodTopologySpreadConstraintsElemLabelSelector `json:"labelSelector,omitempty" yaml:"labelSelector,omitempty" mapstructure:"labelSelector,omitempty"`

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	MatchLabelKeys []string `json:"matchLabelKeys,omitempty" yaml:"matchLabelKeys,omitempty" mapstructure:"matchLabelKeys,omitempty"`

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	MaxSkew *int32 `json:"maxSkew,omitempty" yaml:"maxSkew,omitempty" mapstructure:"maxSkew,omitempty"`

	// MinDomains corresponds to the JSON schema field "minDomains".
	MinDomains *int32 `json:"minDomains,omitempty" yaml:"minDomains,omitempty" mapstructure:"minDomains,omitempty"`

	// NodeAffinityPolicy corresponds to the JSON schema field "nodeAffinityPolicy".
	NodeAffinityPolicy *string `json:"nodeAffinityPolicy,omitempty" yaml:"nodeAffinityPolicy,omitempty" mapstructure:"nodeAffinityPolicy,omitempty"`

	// NodeTaintsPolicy corresponds to the JSON schema field "nodeTaintsPolicy".
	NodeTaintsPolicy *string `json:"nodeTaintsPolicy,omitempty" yaml:"nodeTaintsPolicy,omitempty" mapstructure:"nodeTaintsPolicy,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty" yaml:"topologyKey,omitempty" mapstructure:"topologyKey,omitempty"`

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	WhenUnsatisfiable *string `json:"whenUnsatisfiable,omitempty" yaml:"whenUnsatisfiable,omitempty" mapstructure:"whenUnsatisfiable,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodTopologySpreadConstraintsElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaMirrorMaker2SpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty" yaml:"matchExpressions,omitempty" mapstructure:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels KafkaMirrorMaker2SpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels `json:"matchLabels,omitempty" yaml:"matchLabels,omitempty" mapstructure:"matchLabels,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty" yaml:"operator,omitempty" mapstructure:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

type KafkaMirrorMaker2SpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels map[string]string

// Template for the Kafka Connect service account.
type KafkaMirrorMaker2SpecTemplateServiceAccount struct {
	// Metadata applied to the resource.
	Metadata *KafkaMirrorMaker2SpecTemplateServiceAccountMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaMirrorMaker2SpecTemplateServiceAccountMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations KafkaMirrorMaker2SpecTemplateServiceAccountMetadataAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Labels added to the Kubernetes resource.
	Labels KafkaMirrorMaker2SpecTemplateServiceAccountMetadataLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`
}

// Annotations added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateServiceAccountMetadataAnnotations map[string]string

// Labels added to the Kubernetes resource.
type KafkaMirrorMaker2SpecTemplateServiceAccountMetadataLabels map[string]string

// The configuration of tracing in Kafka Connect.
type KafkaMirrorMaker2SpecTracing struct {
	// Type of the tracing used. Currently the only supported type is `opentelemetry`
	// for OpenTelemetry tracing. As of Strimzi 0.37.0, `jaeger` type is not supported
	// anymore and this option is ignored.
	Type KafkaMirrorMaker2SpecTracingType `json:"type" yaml:"type" mapstructure:"type"`
}

type KafkaMirrorMaker2SpecTracingType string

const KafkaMirrorMaker2SpecTracingTypeJaeger KafkaMirrorMaker2SpecTracingType = "jaeger"
const KafkaMirrorMaker2SpecTracingTypeOpentelemetry KafkaMirrorMaker2SpecTracingType = "opentelemetry"

// The status of the Kafka MirrorMaker 2 cluster.
type KafkaMirrorMaker2Status struct {
	// List of MirrorMaker 2 connector auto restart statuses.
	AutoRestartStatuses []KafkaMirrorMaker2StatusAutoRestartStatusesElem `json:"autoRestartStatuses,omitempty" yaml:"autoRestartStatuses,omitempty" mapstructure:"autoRestartStatuses,omitempty"`

	// List of status conditions.
	Conditions []KafkaMirrorMaker2StatusConditionsElem `json:"conditions,omitempty" yaml:"conditions,omitempty" mapstructure:"conditions,omitempty"`

	// The list of connector plugins available in this Kafka Connect deployment.
	ConnectorPlugins []KafkaMirrorMaker2StatusConnectorPluginsElem `json:"connectorPlugins,omitempty" yaml:"connectorPlugins,omitempty" mapstructure:"connectorPlugins,omitempty"`

	// List of MirrorMaker 2 connector statuses, as reported by the Kafka Connect REST
	// API.
	Connectors []*apiextensions.JSON `json:"connectors,omitempty" yaml:"connectors,omitempty" mapstructure:"connectors,omitempty"`

	// Label selector for pods providing this resource.
	LabelSelector *string `json:"labelSelector,omitempty" yaml:"labelSelector,omitempty" mapstructure:"labelSelector,omitempty"`

	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration *int32 `json:"observedGeneration,omitempty" yaml:"observedGeneration,omitempty" mapstructure:"observedGeneration,omitempty"`

	// The current number of pods being used to provide this resource.
	Replicas *int32 `json:"replicas,omitempty" yaml:"replicas,omitempty" mapstructure:"replicas,omitempty"`

	// The URL of the REST API endpoint for managing and monitoring Kafka Connect
	// connectors.
	Url *string `json:"url,omitempty" yaml:"url,omitempty" mapstructure:"url,omitempty"`
}

type KafkaMirrorMaker2StatusAutoRestartStatusesElem struct {
	// The name of the connector being restarted.
	ConnectorName *string `json:"connectorName,omitempty" yaml:"connectorName,omitempty" mapstructure:"connectorName,omitempty"`

	// The number of times the connector or task is restarted.
	Count *int32 `json:"count,omitempty" yaml:"count,omitempty" mapstructure:"count,omitempty"`

	// The last time the automatic restart was attempted. The required format is
	// 'yyyy-MM-ddTHH:mm:ssZ' in the UTC time zone.
	LastRestartTimestamp *string `json:"lastRestartTimestamp,omitempty" yaml:"lastRestartTimestamp,omitempty" mapstructure:"lastRestartTimestamp,omitempty"`
}

type KafkaMirrorMaker2StatusConditionsElem struct {
	// Last time the condition of a type changed from one status to another. The
	// required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" yaml:"lastTransitionTime,omitempty" mapstructure:"lastTransitionTime,omitempty"`

	// Human-readable message indicating details about the condition's last
	// transition.
	Message *string `json:"message,omitempty" yaml:"message,omitempty" mapstructure:"message,omitempty"`

	// The reason for the condition's last transition (a single word in CamelCase).
	Reason *string `json:"reason,omitempty" yaml:"reason,omitempty" mapstructure:"reason,omitempty"`

	// The status of the condition, either True, False or Unknown.
	Status *string `json:"status,omitempty" yaml:"status,omitempty" mapstructure:"status,omitempty"`

	// The unique identifier of a condition, used to distinguish between other
	// conditions in the resource.
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type KafkaMirrorMaker2StatusConnectorPluginsElem struct {
	// The class of the connector plugin.
	Class *string `json:"class,omitempty" yaml:"class,omitempty" mapstructure:"class,omitempty"`

	// The type of the connector plugin. The available types are `sink` and `source`.
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// The version of the connector plugin.
	Version *string `json:"version,omitempty" yaml:"version,omitempty" mapstructure:"version,omitempty"`
}

//type KafkaMirrorMaker2StatusConnectorsElem map[string]interface{}

var enumValues_KafkaMirrorMaker2SpecClustersElemAuthenticationType = []interface{}{
	"tls",
	"scram-sha-256",
	"scram-sha-512",
	"plain",
	"oauth",
}
var enumValues_KafkaMirrorMaker2SpecJmxOptionsAuthenticationType = []interface{}{
	"password",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecClustersElemAuthenticationTlsTrustedCertificatesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate in KafkaMirrorMaker2SpecClustersElemAuthenticationTlsTrustedCertificatesElem: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName in KafkaMirrorMaker2SpecClustersElemAuthenticationTlsTrustedCertificatesElem: required")
	}
	type Plain KafkaMirrorMaker2SpecClustersElemAuthenticationTlsTrustedCertificatesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecClustersElemAuthenticationTlsTrustedCertificatesElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecMetricsConfigType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaMirrorMaker2SpecMetricsConfigType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaMirrorMaker2SpecMetricsConfigType, v)
	}
	*j = KafkaMirrorMaker2SpecMetricsConfigType(v)
	return nil
}

var enumValues_KafkaMirrorMaker2SpecMetricsConfigType = []interface{}{
	"jmxPrometheusExporter",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecLogging) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in KafkaMirrorMaker2SpecLogging: required")
	}
	type Plain KafkaMirrorMaker2SpecLogging
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecLogging(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecLoggingType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaMirrorMaker2SpecLoggingType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaMirrorMaker2SpecLoggingType, v)
	}
	*j = KafkaMirrorMaker2SpecLoggingType(v)
	return nil
}

var enumValues_KafkaMirrorMaker2SpecLoggingType = []interface{}{
	"inline",
	"external",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecJmxOptionsAuthentication) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in KafkaMirrorMaker2SpecJmxOptionsAuthentication: required")
	}
	type Plain KafkaMirrorMaker2SpecJmxOptionsAuthentication
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecJmxOptionsAuthentication(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecTemplateDeploymentDeploymentStrategy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaMirrorMaker2SpecTemplateDeploymentDeploymentStrategy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaMirrorMaker2SpecTemplateDeploymentDeploymentStrategy, v)
	}
	*j = KafkaMirrorMaker2SpecTemplateDeploymentDeploymentStrategy(v)
	return nil
}

var enumValues_KafkaMirrorMaker2SpecTemplateDeploymentDeploymentStrategy = []interface{}{
	"RollingUpdate",
	"Recreate",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecClustersElemAuthenticationPasswordSecret) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["password"]; !ok || v == nil {
		return fmt.Errorf("field password in KafkaMirrorMaker2SpecClustersElemAuthenticationPasswordSecret: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName in KafkaMirrorMaker2SpecClustersElemAuthenticationPasswordSecret: required")
	}
	type Plain KafkaMirrorMaker2SpecClustersElemAuthenticationPasswordSecret
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecClustersElemAuthenticationPasswordSecret(plain)
	return nil
}

var enumValues_KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamiliesElem = []interface{}{
	"IPv4",
	"IPv6",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecJmxOptionsAuthenticationType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaMirrorMaker2SpecJmxOptionsAuthenticationType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaMirrorMaker2SpecJmxOptionsAuthenticationType, v)
	}
	*j = KafkaMirrorMaker2SpecJmxOptionsAuthenticationType(v)
	return nil
}

var enumValues_KafkaMirrorMaker2SpecTemplateApiServiceIpFamilyPolicy = []interface{}{
	"SingleStack",
	"PreferDualStack",
	"RequireDualStack",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecExternalConfigurationVolumesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in KafkaMirrorMaker2SpecExternalConfigurationVolumesElem: required")
	}
	type Plain KafkaMirrorMaker2SpecExternalConfigurationVolumesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecExternalConfigurationVolumesElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecExternalConfigurationEnvElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in KafkaMirrorMaker2SpecExternalConfigurationEnvElem: required")
	}
	if v, ok := raw["valueFrom"]; !ok || v == nil {
		return fmt.Errorf("field valueFrom in KafkaMirrorMaker2SpecExternalConfigurationEnvElem: required")
	}
	type Plain KafkaMirrorMaker2SpecExternalConfigurationEnvElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecExternalConfigurationEnvElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecClustersElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["alias"]; !ok || v == nil {
		return fmt.Errorf("field alias in KafkaMirrorMaker2SpecClustersElem: required")
	}
	if v, ok := raw["bootstrapServers"]; !ok || v == nil {
		return fmt.Errorf("field bootstrapServers in KafkaMirrorMaker2SpecClustersElem: required")
	}
	type Plain KafkaMirrorMaker2SpecClustersElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecClustersElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecClustersElemTlsTrustedCertificatesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate in KafkaMirrorMaker2SpecClustersElemTlsTrustedCertificatesElem: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName in KafkaMirrorMaker2SpecClustersElemTlsTrustedCertificatesElem: required")
	}
	type Plain KafkaMirrorMaker2SpecClustersElemTlsTrustedCertificatesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecClustersElemTlsTrustedCertificatesElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecClustersElemAuthentication) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in KafkaMirrorMaker2SpecClustersElemAuthentication: required")
	}
	type Plain KafkaMirrorMaker2SpecClustersElemAuthentication
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecClustersElemAuthentication(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecClustersElemAuthenticationType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaMirrorMaker2SpecClustersElemAuthenticationType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaMirrorMaker2SpecClustersElemAuthenticationType, v)
	}
	*j = KafkaMirrorMaker2SpecClustersElemAuthenticationType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamiliesElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamiliesElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamiliesElem, v)
	}
	*j = KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamiliesElem(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecMetricsConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in KafkaMirrorMaker2SpecMetricsConfig: required")
	}
	if v, ok := raw["valueFrom"]; !ok || v == nil {
		return fmt.Errorf("field valueFrom in KafkaMirrorMaker2SpecMetricsConfig: required")
	}
	type Plain KafkaMirrorMaker2SpecMetricsConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecMetricsConfig(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecClustersElemAuthenticationRefreshToken) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key in KafkaMirrorMaker2SpecClustersElemAuthenticationRefreshToken: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName in KafkaMirrorMaker2SpecClustersElemAuthenticationRefreshToken: required")
	}
	type Plain KafkaMirrorMaker2SpecClustersElemAuthenticationRefreshToken
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecClustersElemAuthenticationRefreshToken(plain)
	return nil
}

var enumValues_KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorState = []interface{}{
	"paused",
	"stopped",
	"running",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorState) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorState {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorState, v)
	}
	*j = KafkaMirrorMaker2SpecMirrorsElemCheckpointConnectorState(v)
	return nil
}

var enumValues_KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamilyPolicy = []interface{}{
	"SingleStack",
	"PreferDualStack",
	"RequireDualStack",
}
var enumValues_KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorState = []interface{}{
	"paused",
	"stopped",
	"running",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecClustersElemAuthenticationClientSecret) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key in KafkaMirrorMaker2SpecClustersElemAuthenticationClientSecret: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName in KafkaMirrorMaker2SpecClustersElemAuthenticationClientSecret: required")
	}
	type Plain KafkaMirrorMaker2SpecClustersElemAuthenticationClientSecret
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecClustersElemAuthenticationClientSecret(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamilyPolicy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamilyPolicy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamilyPolicy, v)
	}
	*j = KafkaMirrorMaker2SpecTemplateHeadlessServiceIpFamilyPolicy(v)
	return nil
}

var enumValues_KafkaMirrorMaker2SpecTracingType = []interface{}{
	"jaeger",
	"opentelemetry",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecTracingType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaMirrorMaker2SpecTracingType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaMirrorMaker2SpecTracingType, v)
	}
	*j = KafkaMirrorMaker2SpecTracingType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorState) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorState {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorState, v)
	}
	*j = KafkaMirrorMaker2SpecMirrorsElemHeartbeatConnectorState(v)
	return nil
}

var enumValues_KafkaMirrorMaker2SpecMirrorsElemSourceConnectorState = []interface{}{
	"paused",
	"stopped",
	"running",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecMirrorsElemSourceConnectorState) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaMirrorMaker2SpecMirrorsElemSourceConnectorState {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaMirrorMaker2SpecMirrorsElemSourceConnectorState, v)
	}
	*j = KafkaMirrorMaker2SpecMirrorsElemSourceConnectorState(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecTracing) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in KafkaMirrorMaker2SpecTracing: required")
	}
	type Plain KafkaMirrorMaker2SpecTracing
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecTracing(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecClustersElemAuthenticationCertificateAndKey) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate in KafkaMirrorMaker2SpecClustersElemAuthenticationCertificateAndKey: required")
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key in KafkaMirrorMaker2SpecClustersElemAuthenticationCertificateAndKey: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName in KafkaMirrorMaker2SpecClustersElemAuthenticationCertificateAndKey: required")
	}
	type Plain KafkaMirrorMaker2SpecClustersElemAuthenticationCertificateAndKey
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecClustersElemAuthenticationCertificateAndKey(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2Spec) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["connectCluster"]; !ok || v == nil {
		return fmt.Errorf("field connectCluster in KafkaMirrorMaker2Spec: required")
	}
	type Plain KafkaMirrorMaker2Spec
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2Spec(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecMirrorsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["sourceCluster"]; !ok || v == nil {
		return fmt.Errorf("field sourceCluster in KafkaMirrorMaker2SpecMirrorsElem: required")
	}
	if v, ok := raw["targetCluster"]; !ok || v == nil {
		return fmt.Errorf("field targetCluster in KafkaMirrorMaker2SpecMirrorsElem: required")
	}
	type Plain KafkaMirrorMaker2SpecMirrorsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecMirrorsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecRack) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["topologyKey"]; !ok || v == nil {
		return fmt.Errorf("field topologyKey in KafkaMirrorMaker2SpecRack: required")
	}
	type Plain KafkaMirrorMaker2SpecRack
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecRack(plain)
	return nil
}

var enumValues_KafkaMirrorMaker2SpecTemplateApiServiceIpFamiliesElem = []interface{}{
	"IPv4",
	"IPv6",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecTemplateApiServiceIpFamiliesElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaMirrorMaker2SpecTemplateApiServiceIpFamiliesElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaMirrorMaker2SpecTemplateApiServiceIpFamiliesElem, v)
	}
	*j = KafkaMirrorMaker2SpecTemplateApiServiceIpFamiliesElem(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecTemplateApiServiceIpFamilyPolicy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaMirrorMaker2SpecTemplateApiServiceIpFamilyPolicy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaMirrorMaker2SpecTemplateApiServiceIpFamilyPolicy, v)
	}
	*j = KafkaMirrorMaker2SpecTemplateApiServiceIpFamilyPolicy(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaMirrorMaker2SpecClustersElemAuthenticationAccessToken) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key in KafkaMirrorMaker2SpecClustersElemAuthenticationAccessToken: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName in KafkaMirrorMaker2SpecClustersElemAuthenticationAccessToken: required")
	}
	type Plain KafkaMirrorMaker2SpecClustersElemAuthenticationAccessToken
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaMirrorMaker2SpecClustersElemAuthenticationAccessToken(plain)
	return nil
}
