// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package v1beta2

import "fmt"
import "encoding/json"
import "reflect"

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
import apiextensions "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecLogging) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaConnectS2ISpecLogging
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecLogging(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecAuthenticationAccessToken) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaConnectS2ISpecAuthenticationAccessToken
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecAuthenticationAccessToken(plain)
	return nil
}

// Reference to the `Secret` which holds the certificate and private key pair.
type KafkaConnectS2ISpecAuthenticationCertificateAndKey struct {
	// The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// The name of the private key in the Secret.
	Key string `json:"key"`

	// The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecAuthenticationCertificateAndKey) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate: required")
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaConnectS2ISpecAuthenticationCertificateAndKey
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecAuthenticationCertificateAndKey(plain)
	return nil
}

// Link to Kubernetes Secret containing the OAuth client secret which the Kafka
// client can use to authenticate against the OAuth server and use the token
// endpoint URI.
type KafkaConnectS2ISpecAuthenticationClientSecret struct {
	// The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key"`

	// The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecAuthenticationClientSecret) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaConnectS2ISpecAuthenticationClientSecret
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecAuthenticationClientSecret(plain)
	return nil
}

// Reference to the `Secret` which holds the password.
type KafkaConnectS2ISpecAuthenticationPasswordSecret struct {
	// The name of the key in the Secret under which the password is stored.
	Password string `json:"password"`

	// The name of the Secret containing the password.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecAuthenticationPasswordSecret) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["password"]; !ok || v == nil {
		return fmt.Errorf("field password: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaConnectS2ISpecAuthenticationPasswordSecret
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecAuthenticationPasswordSecret(plain)
	return nil
}

// Link to Kubernetes Secret containing the refresh token which can be used to
// obtain access token from the authorization server.
type KafkaConnectS2ISpecAuthenticationRefreshToken struct {
	// The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key"`

	// The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecAuthenticationRefreshToken) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaConnectS2ISpecAuthenticationRefreshToken
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecAuthenticationRefreshToken(plain)
	return nil
}

type KafkaConnectS2ISpecAuthenticationTlsTrustedCertificatesElem struct {
	// The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecAuthenticationTlsTrustedCertificatesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaConnectS2ISpecAuthenticationTlsTrustedCertificatesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecAuthenticationTlsTrustedCertificatesElem(plain)
	return nil
}

type KafkaConnectS2ISpecAuthenticationType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpec) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["bootstrapServers"]; !ok || v == nil {
		return fmt.Errorf("field bootstrapServers: required")
	}
	type Plain KafkaConnectS2ISpec
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpec(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecAuthenticationType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaConnectS2ISpecAuthenticationType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaConnectS2ISpecAuthenticationType, v)
	}
	*j = KafkaConnectS2ISpecAuthenticationType(v)
	return nil
}

const KafkaConnectS2ISpecAuthenticationTypeTls KafkaConnectS2ISpecAuthenticationType = "tls"
const KafkaConnectS2ISpecAuthenticationTypeScramSha512 KafkaConnectS2ISpecAuthenticationType = "scram-sha-512"
const KafkaConnectS2ISpecAuthenticationTypePlain KafkaConnectS2ISpecAuthenticationType = "plain"
const KafkaConnectS2ISpecAuthenticationTypeOauth KafkaConnectS2ISpecAuthenticationType = "oauth"

// Authentication configuration for Kafka Connect.
type KafkaConnectS2ISpecAuthentication struct {
	// Link to Kubernetes Secret containing the access token which was obtained from
	// the authorization server.
	AccessToken *KafkaConnectS2ISpecAuthenticationAccessToken `json:"accessToken,omitempty"`

	// Configure whether access token should be treated as JWT. This should be set to
	// `false` if the authorization server returns opaque tokens. Defaults to `true`.
	AccessTokenIsJwt *bool `json:"accessTokenIsJwt,omitempty"`

	// OAuth audience to use when authenticating against the authorization server.
	// Some authorization servers require the audience to be explicitly set. The
	// possible values depend on how the authorization server is configured. By
	// default, `audience` is not specified when performing the token endpoint
	// request.
	Audience *string `json:"audience,omitempty"`

	// Reference to the `Secret` which holds the certificate and private key pair.
	CertificateAndKey *KafkaConnectS2ISpecAuthenticationCertificateAndKey `json:"certificateAndKey,omitempty"`

	// OAuth Client ID which the Kafka client can use to authenticate against the
	// OAuth server and use the token endpoint URI.
	ClientId *string `json:"clientId,omitempty"`

	// Link to Kubernetes Secret containing the OAuth client secret which the Kafka
	// client can use to authenticate against the OAuth server and use the token
	// endpoint URI.
	ClientSecret *KafkaConnectS2ISpecAuthenticationClientSecret `json:"clientSecret,omitempty"`

	// Enable or disable TLS hostname verification. Default value is `false`.
	DisableTlsHostnameVerification *bool `json:"disableTlsHostnameVerification,omitempty"`

	// Set or limit time-to-live of the access tokens to the specified number of
	// seconds. This should be set if the authorization server returns opaque tokens.
	MaxTokenExpirySeconds *int32 `json:"maxTokenExpirySeconds,omitempty"`

	// Reference to the `Secret` which holds the password.
	PasswordSecret *KafkaConnectS2ISpecAuthenticationPasswordSecret `json:"passwordSecret,omitempty"`

	// Link to Kubernetes Secret containing the refresh token which can be used to
	// obtain access token from the authorization server.
	RefreshToken *KafkaConnectS2ISpecAuthenticationRefreshToken `json:"refreshToken,omitempty"`

	// OAuth scope to use when authenticating against the authorization server. Some
	// authorization servers require this to be set. The possible values depend on how
	// authorization server is configured. By default `scope` is not specified when
	// doing the token endpoint request.
	Scope *string `json:"scope,omitempty"`

	// Trusted certificates for TLS connection to the OAuth server.
	TlsTrustedCertificates []KafkaConnectS2ISpecAuthenticationTlsTrustedCertificatesElem `json:"tlsTrustedCertificates,omitempty"`

	// Authorization server token endpoint URI.
	TokenEndpointUri *string `json:"tokenEndpointUri,omitempty"`

	// Authentication type. Currently the only supported types are `tls`,
	// `scram-sha-512`, and `plain`. `scram-sha-512` type uses SASL SCRAM-SHA-512
	// Authentication. `plain` type uses SASL PLAIN Authentication. `oauth` type uses
	// SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication.
	// The `tls` type is supported only over TLS connections.
	Type KafkaConnectS2ISpecAuthenticationType `json:"type"`

	// Username used for the authentication.
	Username *string `json:"username,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecAuthentication) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaConnectS2ISpecAuthentication
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecAuthentication(plain)
	return nil
}

type KafkaConnectS2ISpecBuildOutputType string

// The specification of the Kafka Connect Source-to-Image (S2I) cluster.
type KafkaConnectS2ISpec struct {
	// Authentication configuration for Kafka Connect.
	Authentication *KafkaConnectS2ISpecAuthentication `json:"authentication,omitempty"`

	// Bootstrap servers to connect to. This should be given as a comma separated list
	// of _<hostname>_:‍_<port>_ pairs.
	BootstrapServers string `json:"bootstrapServers"`

	// Configures how the Connect container image should be built. Optional.
	Build *KafkaConnectS2ISpecBuild `json:"build,omitempty"`

	// CPU and memory resources to reserve.
	BuildResources *KafkaConnectS2ISpecBuildResources_1 `json:"buildResources,omitempty"`

	// The image of the init container used for initializing the `client.rack`.
	ClientRackInitImage *string `json:"clientRackInitImage,omitempty"`

	// The Kafka Connect configuration. Properties with the following prefixes cannot
	// be set: ssl., sasl., security., listeners, plugin.path, rest.,
	// bootstrap.servers, consumer.interceptor.classes, producer.interceptor.classes
	// (with the exception of: ssl.endpoint.identification.algorithm,
	// ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
	Config *apiextensions.JSON `json:"config,omitempty"`

	// Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to
	// configure connectors.
	ExternalConfiguration *KafkaConnectS2ISpecExternalConfiguration `json:"externalConfiguration,omitempty"`

	// The docker image for the pods.
	Image *string `json:"image,omitempty"`

	// When true this configures the source repository with the 'Local' reference
	// policy and an import policy that accepts insecure source tags.
	InsecureSourceRepository *bool `json:"insecureSourceRepository,omitempty"`

	// JMX Options.
	JmxOptions *KafkaConnectS2ISpecJmxOptions `json:"jmxOptions,omitempty"`

	// JVM Options for pods.
	JvmOptions *KafkaConnectS2ISpecJvmOptions `json:"jvmOptions,omitempty"`

	// Pod liveness checking.
	LivenessProbe *KafkaConnectS2ISpecLivenessProbe `json:"livenessProbe,omitempty"`

	// Logging configuration for Kafka Connect.
	Logging *KafkaConnectS2ISpecLogging `json:"logging,omitempty"`

	// Metrics configuration.
	MetricsConfig *KafkaConnectS2ISpecMetricsConfig `json:"metricsConfig,omitempty"`

	// Configuration of the node label which will be used as the client.rack consumer
	// configuration.
	Rack *KafkaConnectS2ISpecRack `json:"rack,omitempty"`

	// Pod readiness checking.
	ReadinessProbe *KafkaConnectS2ISpecReadinessProbe `json:"readinessProbe,omitempty"`

	// The number of pods in the Kafka Connect group.
	Replicas *int32 `json:"replicas,omitempty"`

	// The maximum limits for CPU and memory resources and the requested initial
	// resources.
	Resources *KafkaConnectS2ISpecResources `json:"resources,omitempty"`

	// Template for Kafka Connect and Kafka Connect S2I resources. The template allows
	// users to specify how the `Deployment`, `Pods` and `Service` are generated.
	Template *KafkaConnectS2ISpecTemplate `json:"template,omitempty"`

	// TLS configuration.
	Tls *KafkaConnectS2ISpecTls `json:"tls,omitempty"`

	// The configuration of tracing in Kafka Connect.
	Tracing *KafkaConnectS2ISpecTracing `json:"tracing,omitempty"`

	// The Kafka Connect version. Defaults to {DefaultKafkaVersion}. Consult the user
	// documentation to understand the process required to upgrade or downgrade the
	// version.
	Version *string `json:"version,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecBuildOutputType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaConnectS2ISpecBuildOutputType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaConnectS2ISpecBuildOutputType, v)
	}
	*j = KafkaConnectS2ISpecBuildOutputType(v)
	return nil
}

const KafkaConnectS2ISpecBuildOutputTypeDocker KafkaConnectS2ISpecBuildOutputType = "docker"
const KafkaConnectS2ISpecBuildOutputTypeImagestream KafkaConnectS2ISpecBuildOutputType = "imagestream"

// Configures where should the newly built image be stored. Required.
type KafkaConnectS2ISpecBuildOutput struct {
	// Configures additional options which will be passed to the Kaniko executor when
	// building the new Connect image. Allowed options are: --customPlatform,
	// --insecure, --insecure-pull, --insecure-registry, --log-format,
	// --log-timestamp, --registry-mirror, --reproducible, --single-snapshot,
	// --skip-tls-verify, --skip-tls-verify-pull, --skip-tls-verify-registry,
	// --verbosity, --snapshotMode, --use-new-run. These options will be used only on
	// Kubernetes where the Kaniko executor is used. They will be ignored on
	// OpenShift. The options are described in the
	// link:https://github.com/GoogleContainerTools/kaniko[Kaniko GitHub repository^].
	// Changing this field does not trigger new build of the Kafka Connect image.
	AdditionalKanikoOptions []string `json:"additionalKanikoOptions,omitempty"`

	// The name of the image which will be built. Required.
	Image string `json:"image"`

	// Container Registry Secret with the credentials for pushing the newly built
	// image.
	PushSecret *string `json:"pushSecret,omitempty"`

	// Output type. Must be either `docker` for pushing the newly build image to
	// Docker compatible registry or `imagestream` for pushing the image to OpenShift
	// ImageStream. Required.
	Type KafkaConnectS2ISpecBuildOutputType `json:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecBuildOutput) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["image"]; !ok || v == nil {
		return fmt.Errorf("field image: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaConnectS2ISpecBuildOutput
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecBuildOutput(plain)
	return nil
}

type KafkaConnectS2ISpecBuildPluginsElemArtifactsElemType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecTracing) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaConnectS2ISpecTracing
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecTracing(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecBuildPluginsElemArtifactsElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaConnectS2ISpecBuildPluginsElemArtifactsElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaConnectS2ISpecBuildPluginsElemArtifactsElemType, v)
	}
	*j = KafkaConnectS2ISpecBuildPluginsElemArtifactsElemType(v)
	return nil
}

const KafkaConnectS2ISpecBuildPluginsElemArtifactsElemTypeJar KafkaConnectS2ISpecBuildPluginsElemArtifactsElemType = "jar"

// Link to Kubernetes Secret containing the access token which was obtained from
// the authorization server.
type KafkaConnectS2ISpecAuthenticationAccessToken struct {
	// The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key"`

	// The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName"`
}

const KafkaConnectS2ISpecBuildPluginsElemArtifactsElemTypeZip KafkaConnectS2ISpecBuildPluginsElemArtifactsElemType = "zip"
const KafkaConnectS2ISpecBuildPluginsElemArtifactsElemTypeOther KafkaConnectS2ISpecBuildPluginsElemArtifactsElemType = "other"

type KafkaConnectS2ISpecBuildPluginsElemArtifactsElem struct {
	// Name under which the artifact will be stored.
	FileName *string `json:"fileName,omitempty"`

	// SHA512 checksum of the artifact. Optional. If specified, the checksum will be
	// verified while building the new container. If not specified, the downloaded
	// artifact will not be verified.
	Sha512Sum *string `json:"sha512sum,omitempty"`

	// Artifact type. Currently, the supported artifact types are `tgz`, `jar`, and
	// `zip`.
	Type KafkaConnectS2ISpecBuildPluginsElemArtifactsElemType `json:"type"`

	// URL of the artifact which will be downloaded. Strimzi does not do any security
	// scanning of the downloaded artifacts. For security reasons, you should first
	// verify the artifacts manually and configure the checksum verification to make
	// sure the same artifact is used in the automated build. Required.
	Url string `json:"url"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecBuildPluginsElemArtifactsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	if v, ok := raw["url"]; !ok || v == nil {
		return fmt.Errorf("field url: required")
	}
	type Plain KafkaConnectS2ISpecBuildPluginsElemArtifactsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecBuildPluginsElemArtifactsElem(plain)
	return nil
}

type KafkaConnectS2ISpecBuildPluginsElem struct {
	// List of artifacts which belong to this connector plugin. Required.
	Artifacts []KafkaConnectS2ISpecBuildPluginsElemArtifactsElem `json:"artifacts"`

	// The unique name of the connector plugin. Will be used to generate the path
	// where the connector artifacts will be stored. The name has to be unique within
	// the KafkaConnect resource. The name has to follow the following pattern:
	// `^[a-z][-_a-z0-9]*[a-z]$`. Required.
	Name string `json:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecBuildPluginsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["artifacts"]; !ok || v == nil {
		return fmt.Errorf("field artifacts: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain KafkaConnectS2ISpecBuildPluginsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecBuildPluginsElem(plain)
	return nil
}

////type KafkaConnectS2ISpecBuildResourcesLimits map[string]interface{}

////type KafkaConnectS2ISpecBuildResourcesRequests map[string]interface{}

// CPU and memory resources to reserve for the build.
type KafkaConnectS2ISpecBuildResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits *apiextensions.JSON `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests *apiextensions.JSON `json:"requests,omitempty"`
}

// Configures how the Connect container image should be built. Optional.
type KafkaConnectS2ISpecBuild struct {
	// Configures where should the newly built image be stored. Required.
	Output KafkaConnectS2ISpecBuildOutput `json:"output"`

	// List of connector plugins which should be added to the Kafka Connect. Required.
	Plugins []KafkaConnectS2ISpecBuildPluginsElem `json:"plugins"`

	// CPU and memory resources to reserve for the build.
	Resources *KafkaConnectS2ISpecBuildResources `json:"resources,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecBuild) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["output"]; !ok || v == nil {
		return fmt.Errorf("field output: required")
	}
	if v, ok := raw["plugins"]; !ok || v == nil {
		return fmt.Errorf("field plugins: required")
	}
	type Plain KafkaConnectS2ISpecBuild
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecBuild(plain)
	return nil
}

//type KafkaConnectS2ISpecBuildResourcesLimits_1 map[string]interface{}

//type KafkaConnectS2ISpecBuildResourcesRequests_1 map[string]interface{}

// CPU and memory resources to reserve.
type KafkaConnectS2ISpecBuildResources_1 struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits *apiextensions.JSON `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests *apiextensions.JSON `json:"requests,omitempty"`
}

// The Kafka Connect configuration. Properties with the following prefixes cannot
// be set: ssl., sasl., security., listeners, plugin.path, rest.,
// bootstrap.servers, consumer.interceptor.classes, producer.interceptor.classes
// (with the exception of: ssl.endpoint.identification.algorithm,
// ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
//type KafkaConnectS2ISpecConfig map[string]interface{}

// Reference to a key in a ConfigMap.
type KafkaConnectS2ISpecExternalConfigurationEnvElemValueFromConfigMapKeyRef struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty"`
}

// Reference to a key in a Secret.
type KafkaConnectS2ISpecExternalConfigurationEnvElemValueFromSecretKeyRef struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty"`
}

// Value of the environment variable which will be passed to the Kafka Connect
// pods. It can be passed either as a reference to Secret or ConfigMap field. The
// field has to specify exactly one Secret or ConfigMap.
type KafkaConnectS2ISpecExternalConfigurationEnvElemValueFrom struct {
	// Reference to a key in a ConfigMap.
	ConfigMapKeyRef *KafkaConnectS2ISpecExternalConfigurationEnvElemValueFromConfigMapKeyRef `json:"configMapKeyRef,omitempty"`

	// Reference to a key in a Secret.
	SecretKeyRef *KafkaConnectS2ISpecExternalConfigurationEnvElemValueFromSecretKeyRef `json:"secretKeyRef,omitempty"`
}

type KafkaConnectS2ISpecExternalConfigurationEnvElem struct {
	// Name of the environment variable which will be passed to the Kafka Connect
	// pods. The name of the environment variable cannot start with `KAFKA_` or
	// `STRIMZI_`.
	Name string `json:"name"`

	// Value of the environment variable which will be passed to the Kafka Connect
	// pods. It can be passed either as a reference to Secret or ConfigMap field. The
	// field has to specify exactly one Secret or ConfigMap.
	ValueFrom KafkaConnectS2ISpecExternalConfigurationEnvElemValueFrom `json:"valueFrom"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecExternalConfigurationEnvElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["valueFrom"]; !ok || v == nil {
		return fmt.Errorf("field valueFrom: required")
	}
	type Plain KafkaConnectS2ISpecExternalConfigurationEnvElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecExternalConfigurationEnvElem(plain)
	return nil
}

type KafkaConnectS2ISpecExternalConfigurationVolumesElemConfigMapItemsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Mode corresponds to the JSON schema field "mode".
	Mode *int32 `json:"mode,omitempty"`

	// Path corresponds to the JSON schema field "path".
	Path *string `json:"path,omitempty"`
}

// Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be
// specified.
type KafkaConnectS2ISpecExternalConfigurationVolumesElemConfigMap struct {
	// DefaultMode corresponds to the JSON schema field "defaultMode".
	DefaultMode *int32 `json:"defaultMode,omitempty"`

	// Items corresponds to the JSON schema field "items".
	Items []KafkaConnectS2ISpecExternalConfigurationVolumesElemConfigMapItemsElem `json:"items,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty"`
}

type KafkaConnectS2ISpecExternalConfigurationVolumesElemSecretItemsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Mode corresponds to the JSON schema field "mode".
	Mode *int32 `json:"mode,omitempty"`

	// Path corresponds to the JSON schema field "path".
	Path *string `json:"path,omitempty"`
}

// Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be
// specified.
type KafkaConnectS2ISpecExternalConfigurationVolumesElemSecret struct {
	// DefaultMode corresponds to the JSON schema field "defaultMode".
	DefaultMode *int32 `json:"defaultMode,omitempty"`

	// Items corresponds to the JSON schema field "items".
	Items []KafkaConnectS2ISpecExternalConfigurationVolumesElemSecretItemsElem `json:"items,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty"`

	// SecretName corresponds to the JSON schema field "secretName".
	SecretName *string `json:"secretName,omitempty"`
}

type KafkaConnectS2ISpecExternalConfigurationVolumesElem struct {
	// Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be
	// specified.
	ConfigMap *KafkaConnectS2ISpecExternalConfigurationVolumesElemConfigMap `json:"configMap,omitempty"`

	// Name of the volume which will be added to the Kafka Connect pods.
	Name string `json:"name"`

	// Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be
	// specified.
	Secret *KafkaConnectS2ISpecExternalConfigurationVolumesElemSecret `json:"secret,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecExternalConfigurationVolumesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain KafkaConnectS2ISpecExternalConfigurationVolumesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecExternalConfigurationVolumesElem(plain)
	return nil
}

// Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to
// configure connectors.
type KafkaConnectS2ISpecExternalConfiguration struct {
	// Makes data from a Secret or ConfigMap available in the Kafka Connect pods as
	// environment variables.
	Env []KafkaConnectS2ISpecExternalConfigurationEnvElem `json:"env,omitempty"`

	// Makes data from a Secret or ConfigMap available in the Kafka Connect pods as
	// volumes.
	Volumes []KafkaConnectS2ISpecExternalConfigurationVolumesElem `json:"volumes,omitempty"`
}

type KafkaConnectS2ISpecJmxOptionsAuthenticationType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecTracingType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaConnectS2ISpecTracingType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaConnectS2ISpecTracingType, v)
	}
	*j = KafkaConnectS2ISpecTracingType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecJmxOptionsAuthenticationType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaConnectS2ISpecJmxOptionsAuthenticationType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaConnectS2ISpecJmxOptionsAuthenticationType, v)
	}
	*j = KafkaConnectS2ISpecJmxOptionsAuthenticationType(v)
	return nil
}

const KafkaConnectS2ISpecJmxOptionsAuthenticationTypePassword KafkaConnectS2ISpecJmxOptionsAuthenticationType = "password"

// Authentication configuration for connecting to the JMX port.
type KafkaConnectS2ISpecJmxOptionsAuthentication struct {
	// Authentication type. Currently the only supported types are
	// `password`.`password` type creates a username and protected port with no TLS.
	Type KafkaConnectS2ISpecJmxOptionsAuthenticationType `json:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecJmxOptionsAuthentication) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaConnectS2ISpecJmxOptionsAuthentication
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecJmxOptionsAuthentication(plain)
	return nil
}

// JMX Options.
type KafkaConnectS2ISpecJmxOptions struct {
	// Authentication configuration for connecting to the JMX port.
	Authentication *KafkaConnectS2ISpecJmxOptionsAuthentication `json:"authentication,omitempty"`
}

const KafkaConnectS2ISpecBuildPluginsElemArtifactsElemTypeTgz KafkaConnectS2ISpecBuildPluginsElemArtifactsElemType = "tgz"

type KafkaConnectS2ISpecJvmOptionsJavaSystemPropertiesElem struct {
	// The system property name.
	Name *string `json:"name,omitempty"`

	// The system property value.
	Value *string `json:"value,omitempty"`
}

// JVM Options for pods.
type KafkaConnectS2ISpecJvmOptions struct {
	// A map of -XX options to the JVM.
	XX *apiextensions.JSON `json:"-XX,omitempty"`

	// -Xms option to to the JVM.
	Xms *string `json:"-Xms,omitempty"`

	// -Xmx option to to the JVM.
	Xmx *string `json:"-Xmx,omitempty"`

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	GcLoggingEnabled *bool `json:"gcLoggingEnabled,omitempty"`

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	JavaSystemProperties []KafkaConnectS2ISpecJvmOptionsJavaSystemPropertiesElem `json:"javaSystemProperties,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecTemplateApiServiceIpFamilyPolicy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaConnectS2ISpecTemplateApiServiceIpFamilyPolicy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaConnectS2ISpecTemplateApiServiceIpFamilyPolicy, v)
	}
	*j = KafkaConnectS2ISpecTemplateApiServiceIpFamilyPolicy(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecTemplateDeploymentDeploymentStrategy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaConnectS2ISpecTemplateDeploymentDeploymentStrategy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaConnectS2ISpecTemplateDeploymentDeploymentStrategy, v)
	}
	*j = KafkaConnectS2ISpecTemplateDeploymentDeploymentStrategy(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecTemplateApiServiceIpFamiliesElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaConnectS2ISpecTemplateApiServiceIpFamiliesElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaConnectS2ISpecTemplateApiServiceIpFamiliesElem, v)
	}
	*j = KafkaConnectS2ISpecTemplateApiServiceIpFamiliesElem(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecTlsTrustedCertificatesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaConnectS2ISpecTlsTrustedCertificatesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecTlsTrustedCertificatesElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecLoggingType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaConnectS2ISpecLoggingType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaConnectS2ISpecLoggingType, v)
	}
	*j = KafkaConnectS2ISpecLoggingType(v)
	return nil
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// KafkaConnectS2I
type KafkaConnectS2I struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// The specification of the Kafka Connect Source-to-Image (S2I) cluster.
	Spec *KafkaConnectS2ISpec `json:"spec,omitempty"`

	// The status of the Kafka Connect Source-to-Image (S2I) cluster.
	Status *KafkaConnectS2IStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
// KafkaConnectorList contains a list of instances.
type KafkaConnectS2IList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`

	// A list of Kafka objects.
	Items []Kafka `json:"items,omitempty"`
}

func init() {
	SchemeBuilder.Register(&KafkaConnectS2I{}, &KafkaConnectS2IList{})
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecRack) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["topologyKey"]; !ok || v == nil {
		return fmt.Errorf("field topologyKey: required")
	}
	type Plain KafkaConnectS2ISpecRack
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecRack(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecMetricsConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	if v, ok := raw["valueFrom"]; !ok || v == nil {
		return fmt.Errorf("field valueFrom: required")
	}
	type Plain KafkaConnectS2ISpecMetricsConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaConnectS2ISpecMetricsConfig(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaConnectS2ISpecMetricsConfigType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaConnectS2ISpecMetricsConfigType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaConnectS2ISpecMetricsConfigType, v)
	}
	*j = KafkaConnectS2ISpecMetricsConfigType(v)
	return nil
}

// A map of -XX options to the JVM.
//type KafkaConnectS2ISpecJvmOptionsXX map[string]interface{}

// Pod liveness checking.
type KafkaConnectS2ISpecLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// Logging configuration for Kafka Connect.
type KafkaConnectS2ISpecLogging struct {
	// A Map from logger name to logger level.
	Loggers *apiextensions.JSON `json:"loggers,omitempty"`

	// Logging type, must be either 'inline' or 'external'.
	Type KafkaConnectS2ISpecLoggingType `json:"type"`

	// `ConfigMap` entry where the logging configuration is stored.
	ValueFrom *KafkaConnectS2ISpecLoggingValueFrom `json:"valueFrom,omitempty"`
}

// A Map from logger name to logger level.
//type KafkaConnectS2ISpecLoggingLoggers map[string]interface{}

type KafkaConnectS2ISpecLoggingType string

const KafkaConnectS2ISpecLoggingTypeExternal KafkaConnectS2ISpecLoggingType = "external"
const KafkaConnectS2ISpecLoggingTypeInline KafkaConnectS2ISpecLoggingType = "inline"

// `ConfigMap` entry where the logging configuration is stored.
type KafkaConnectS2ISpecLoggingValueFrom struct {
	// Reference to the key in the ConfigMap containing the configuration.
	ConfigMapKeyRef *KafkaConnectS2ISpecLoggingValueFromConfigMapKeyRef `json:"configMapKeyRef,omitempty"`
}

// Reference to the key in the ConfigMap containing the configuration.
type KafkaConnectS2ISpecLoggingValueFromConfigMapKeyRef struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty"`
}

// Metrics configuration.
type KafkaConnectS2ISpecMetricsConfig struct {
	// Metrics type. Only 'jmxPrometheusExporter' supported currently.
	Type KafkaConnectS2ISpecMetricsConfigType `json:"type"`

	// ConfigMap entry where the Prometheus JMX Exporter configuration is stored. For
	// details of the structure of this configuration, see the {JMXExporter}.
	ValueFrom KafkaConnectS2ISpecMetricsConfigValueFrom `json:"valueFrom"`
}

type KafkaConnectS2ISpecMetricsConfigType string

const KafkaConnectS2ISpecMetricsConfigTypeJmxPrometheusExporter KafkaConnectS2ISpecMetricsConfigType = "jmxPrometheusExporter"

// ConfigMap entry where the Prometheus JMX Exporter configuration is stored. For
// details of the structure of this configuration, see the {JMXExporter}.
type KafkaConnectS2ISpecMetricsConfigValueFrom struct {
	// Reference to the key in the ConfigMap containing the configuration.
	ConfigMapKeyRef *KafkaConnectS2ISpecMetricsConfigValueFromConfigMapKeyRef `json:"configMapKeyRef,omitempty"`
}

// Reference to the key in the ConfigMap containing the configuration.
type KafkaConnectS2ISpecMetricsConfigValueFromConfigMapKeyRef struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty"`
}

// Configuration of the node label which will be used as the client.rack consumer
// configuration.
type KafkaConnectS2ISpecRack struct {
	// A key that matches labels assigned to the Kubernetes cluster nodes. The value
	// of the label is used to set the broker's `broker.rack` config and `client.rack`
	// in Kafka Connect.
	TopologyKey string `json:"topologyKey"`
}

// Pod readiness checking.
type KafkaConnectS2ISpecReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// The maximum limits for CPU and memory resources and the requested initial
// resources.
type KafkaConnectS2ISpecResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits *apiextensions.JSON `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests *apiextensions.JSON `json:"requests,omitempty"`
}

//type KafkaConnectS2ISpecResourcesLimits map[string]interface{}

//type KafkaConnectS2ISpecResourcesRequests map[string]interface{}

// Template for Kafka Connect and Kafka Connect S2I resources. The template allows
// users to specify how the `Deployment`, `Pods` and `Service` are generated.
type KafkaConnectS2ISpecTemplate struct {
	// Template for Kafka Connect API `Service`.
	ApiService *KafkaConnectS2ISpecTemplateApiService `json:"apiService,omitempty"`

	// Template for the Kafka Connect BuildConfig used to build new container images.
	// The BuildConfig is used only on OpenShift.
	BuildConfig *KafkaConnectS2ISpecTemplateBuildConfig `json:"buildConfig,omitempty"`

	// Template for the Kafka Connect Build container. The build container is used
	// only on Kubernetes.
	BuildContainer *KafkaConnectS2ISpecTemplateBuildContainer `json:"buildContainer,omitempty"`

	// Template for Kafka Connect Build `Pods`. The build pod is used only on
	// Kubernetes.
	BuildPod *KafkaConnectS2ISpecTemplateBuildPod `json:"buildPod,omitempty"`

	// Template for the Kafka Connect Build service account.
	BuildServiceAccount *KafkaConnectS2ISpecTemplateBuildServiceAccount `json:"buildServiceAccount,omitempty"`

	// Template for the Kafka Connect ClusterRoleBinding.
	ClusterRoleBinding *KafkaConnectS2ISpecTemplateClusterRoleBinding `json:"clusterRoleBinding,omitempty"`

	// Template for the Kafka Connect container.
	ConnectContainer *KafkaConnectS2ISpecTemplateConnectContainer `json:"connectContainer,omitempty"`

	// Template for Kafka Connect `Deployment`.
	Deployment *KafkaConnectS2ISpecTemplateDeployment `json:"deployment,omitempty"`

	// Template for the Kafka init container.
	InitContainer *KafkaConnectS2ISpecTemplateInitContainer `json:"initContainer,omitempty"`

	// Template for Kafka Connect `Pods`.
	Pod *KafkaConnectS2ISpecTemplatePod `json:"pod,omitempty"`

	// Template for Kafka Connect `PodDisruptionBudget`.
	PodDisruptionBudget *KafkaConnectS2ISpecTemplatePodDisruptionBudget `json:"podDisruptionBudget,omitempty"`

	// Template for the Kafka Connect service account.
	ServiceAccount *KafkaConnectS2ISpecTemplateServiceAccount `json:"serviceAccount,omitempty"`
}

// Template for Kafka Connect API `Service`.
type KafkaConnectS2ISpecTemplateApiService struct {
	// Specifies the IP Families used by the service. Available options are `IPv4` and
	// `IPv6. If unspecified, Kubernetes will choose the default value based on the
	// `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.
	IpFamilies []KafkaConnectS2ISpecTemplateApiServiceIpFamiliesElem `json:"ipFamilies,omitempty"`

	// Specifies the IP Family Policy used by the service. Available options are
	// `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a
	// single IP family. `PreferDualStack` is for two IP families on dual-stack
	// configured clusters or a single IP family on single-stack clusters.
	// `RequireDualStack` fails unless there are two IP families on dual-stack
	// configured clusters. If unspecified, Kubernetes will choose the default value
	// based on the service type. Available on Kubernetes 1.20 and newer.
	IpFamilyPolicy *KafkaConnectS2ISpecTemplateApiServiceIpFamilyPolicy `json:"ipFamilyPolicy,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaConnectS2ISpecTemplateApiServiceMetadata `json:"metadata,omitempty"`
}

type KafkaConnectS2ISpecTemplateApiServiceIpFamiliesElem string

const KafkaConnectS2ISpecTemplateApiServiceIpFamiliesElemIPv4 KafkaConnectS2ISpecTemplateApiServiceIpFamiliesElem = "IPv4"
const KafkaConnectS2ISpecTemplateApiServiceIpFamiliesElemIPv6 KafkaConnectS2ISpecTemplateApiServiceIpFamiliesElem = "IPv6"

type KafkaConnectS2ISpecTemplateApiServiceIpFamilyPolicy string

const KafkaConnectS2ISpecTemplateApiServiceIpFamilyPolicyPreferDualStack KafkaConnectS2ISpecTemplateApiServiceIpFamilyPolicy = "PreferDualStack"
const KafkaConnectS2ISpecTemplateApiServiceIpFamilyPolicyRequireDualStack KafkaConnectS2ISpecTemplateApiServiceIpFamilyPolicy = "RequireDualStack"
const KafkaConnectS2ISpecTemplateApiServiceIpFamilyPolicySingleStack KafkaConnectS2ISpecTemplateApiServiceIpFamilyPolicy = "SingleStack"

// Metadata applied to the resource.
type KafkaConnectS2ISpecTemplateApiServiceMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateApiServiceMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateApiServiceMetadataLabels map[string]interface{}

// Template for the Kafka Connect BuildConfig used to build new container images.
// The BuildConfig is used only on OpenShift.
type KafkaConnectS2ISpecTemplateBuildConfig struct {
	// Metadata applied to the resource.
	Metadata *KafkaConnectS2ISpecTemplateBuildConfigMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaConnectS2ISpecTemplateBuildConfigMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateBuildConfigMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateBuildConfigMetadataLabels map[string]interface{}

// Template for the Kafka Connect Build container. The build container is used only
// on Kubernetes.
type KafkaConnectS2ISpecTemplateBuildContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaConnectS2ISpecTemplateBuildContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaConnectS2ISpecTemplateBuildContainerSecurityContext `json:"securityContext,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

// Security context for the container.
type KafkaConnectS2ISpecTemplateBuildContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaConnectS2ISpecTemplateBuildContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaConnectS2ISpecTemplateBuildContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaConnectS2ISpecTemplateBuildContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaConnectS2ISpecTemplateBuildContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Template for Kafka Connect Build `Pods`. The build pod is used only on
// Kubernetes.
type KafkaConnectS2ISpecTemplateBuildPod struct {
	// The pod's affinity rules.
	Affinity *KafkaConnectS2ISpecTemplateBuildPodAffinity `json:"affinity,omitempty"`

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	EnableServiceLinks *bool `json:"enableServiceLinks,omitempty"`

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	HostAliases []KafkaConnectS2ISpecTemplateBuildPodHostAliasesElem `json:"hostAliases,omitempty"`

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []KafkaConnectS2ISpecTemplateBuildPodImagePullSecretsElem `json:"imagePullSecrets,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaConnectS2ISpecTemplateBuildPodMetadata `json:"metadata,omitempty"`

	// The name of the priority class used to assign priority to the pods. For more
	// information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `json:"priorityClassName,omitempty"`

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	SchedulerName *string `json:"schedulerName,omitempty"`

	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaConnectS2ISpecTemplateBuildPodSecurityContext `json:"securityContext,omitempty"`

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	TerminationGracePeriodSeconds *int32 `json:"terminationGracePeriodSeconds,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaConnectS2ISpecTemplateBuildPodTolerationsElem `json:"tolerations,omitempty"`

	// The pod's topology spread constraints.
	TopologySpreadConstraints []KafkaConnectS2ISpecTemplateBuildPodTopologySpreadConstraintsElem `json:"topologySpreadConstraints,omitempty"`
}

// The pod's affinity rules.
type KafkaConnectS2ISpecTemplateBuildPodAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector `json:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector `json:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplateBuildPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplateBuildPodHostAliasesElem struct {
	// Hostnames corresponds to the JSON schema field "hostnames".
	Hostnames []string `json:"hostnames,omitempty"`

	// Ip corresponds to the JSON schema field "ip".
	Ip *string `json:"ip,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodImagePullSecretsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`
}

// Metadata applied to the resource.
type KafkaConnectS2ISpecTemplateBuildPodMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateBuildPodMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateBuildPodMetadataLabels map[string]interface{}

// Configures pod-level security attributes and common container settings.
type KafkaConnectS2ISpecTemplateBuildPodSecurityContext struct {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	FsGroup *int32 `json:"fsGroup,omitempty"`

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaConnectS2ISpecTemplateBuildPodSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaConnectS2ISpecTemplateBuildPodSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	SupplementalGroups []int32 `json:"supplementalGroups,omitempty"`

	// Sysctls corresponds to the JSON schema field "sysctls".
	Sysctls []KafkaConnectS2ISpecTemplateBuildPodSecurityContextSysctlsElem `json:"sysctls,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaConnectS2ISpecTemplateBuildPodSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodSecurityContextSysctlsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodTopologySpreadConstraintsElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaConnectS2ISpecTemplateBuildPodTopologySpreadConstraintsElemLabelSelector `json:"labelSelector,omitempty"`

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	MaxSkew *int32 `json:"maxSkew,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	WhenUnsatisfiable *string `json:"whenUnsatisfiable,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodTopologySpreadConstraintsElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplateBuildPodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplateBuildPodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplateBuildPodTopologySpreadConstraintsElemLabelSelectorMatchLabels map[string]interface{}

// Template for the Kafka Connect Build service account.
type KafkaConnectS2ISpecTemplateBuildServiceAccount struct {
	// Metadata applied to the resource.
	Metadata *KafkaConnectS2ISpecTemplateBuildServiceAccountMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaConnectS2ISpecTemplateBuildServiceAccountMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateBuildServiceAccountMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateBuildServiceAccountMetadataLabels map[string]interface{}

// Template for the Kafka Connect ClusterRoleBinding.
type KafkaConnectS2ISpecTemplateClusterRoleBinding struct {
	// Metadata applied to the resource.
	Metadata *KafkaConnectS2ISpecTemplateClusterRoleBindingMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaConnectS2ISpecTemplateClusterRoleBindingMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateClusterRoleBindingMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateClusterRoleBindingMetadataLabels map[string]interface{}

// Template for the Kafka Connect container.
type KafkaConnectS2ISpecTemplateConnectContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaConnectS2ISpecTemplateConnectContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaConnectS2ISpecTemplateConnectContainerSecurityContext `json:"securityContext,omitempty"`
}

type KafkaConnectS2ISpecTemplateConnectContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

// Security context for the container.
type KafkaConnectS2ISpecTemplateConnectContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaConnectS2ISpecTemplateConnectContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaConnectS2ISpecTemplateConnectContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaConnectS2ISpecTemplateConnectContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaConnectS2ISpecTemplateConnectContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaConnectS2ISpecTemplateConnectContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaConnectS2ISpecTemplateConnectContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaConnectS2ISpecTemplateConnectContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaConnectS2ISpecTemplateConnectContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Template for Kafka Connect `Deployment`.
type KafkaConnectS2ISpecTemplateDeployment struct {
	// DeploymentStrategy which will be used for this Deployment. Valid values are
	// `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`.
	DeploymentStrategy *KafkaConnectS2ISpecTemplateDeploymentDeploymentStrategy `json:"deploymentStrategy,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaConnectS2ISpecTemplateDeploymentMetadata `json:"metadata,omitempty"`
}

type KafkaConnectS2ISpecTemplateDeploymentDeploymentStrategy string

const KafkaConnectS2ISpecTemplateDeploymentDeploymentStrategyRecreate KafkaConnectS2ISpecTemplateDeploymentDeploymentStrategy = "Recreate"
const KafkaConnectS2ISpecTemplateDeploymentDeploymentStrategyRollingUpdate KafkaConnectS2ISpecTemplateDeploymentDeploymentStrategy = "RollingUpdate"

// Metadata applied to the resource.
type KafkaConnectS2ISpecTemplateDeploymentMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateDeploymentMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateDeploymentMetadataLabels map[string]interface{}

// Template for the Kafka init container.
type KafkaConnectS2ISpecTemplateInitContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaConnectS2ISpecTemplateInitContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaConnectS2ISpecTemplateInitContainerSecurityContext `json:"securityContext,omitempty"`
}

type KafkaConnectS2ISpecTemplateInitContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

// Security context for the container.
type KafkaConnectS2ISpecTemplateInitContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaConnectS2ISpecTemplateInitContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaConnectS2ISpecTemplateInitContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaConnectS2ISpecTemplateInitContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaConnectS2ISpecTemplateInitContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaConnectS2ISpecTemplateInitContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaConnectS2ISpecTemplateInitContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaConnectS2ISpecTemplateInitContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaConnectS2ISpecTemplateInitContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Template for Kafka Connect `Pods`.
type KafkaConnectS2ISpecTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaConnectS2ISpecTemplatePodAffinity `json:"affinity,omitempty"`

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	EnableServiceLinks *bool `json:"enableServiceLinks,omitempty"`

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	HostAliases []KafkaConnectS2ISpecTemplatePodHostAliasesElem `json:"hostAliases,omitempty"`

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []KafkaConnectS2ISpecTemplatePodImagePullSecretsElem `json:"imagePullSecrets,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaConnectS2ISpecTemplatePodMetadata `json:"metadata,omitempty"`

	// The name of the priority class used to assign priority to the pods. For more
	// information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `json:"priorityClassName,omitempty"`

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	SchedulerName *string `json:"schedulerName,omitempty"`

	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaConnectS2ISpecTemplatePodSecurityContext `json:"securityContext,omitempty"`

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	TerminationGracePeriodSeconds *int32 `json:"terminationGracePeriodSeconds,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaConnectS2ISpecTemplatePodTolerationsElem `json:"tolerations,omitempty"`

	// The pod's topology spread constraints.
	TopologySpreadConstraints []KafkaConnectS2ISpecTemplatePodTopologySpreadConstraintsElem `json:"topologySpreadConstraints,omitempty"`
}

// The pod's affinity rules.
type KafkaConnectS2ISpecTemplatePodAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaConnectS2ISpecTemplatePodAffinityNodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaConnectS2ISpecTemplatePodAffinityPodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector `json:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector `json:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]interface{}

type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels map[string]interface{}

// Template for Kafka Connect `PodDisruptionBudget`.
type KafkaConnectS2ISpecTemplatePodDisruptionBudget struct {
	// Maximum number of unavailable pods to allow automatic Pod eviction. A Pod
	// eviction is allowed when the `maxUnavailable` number of pods or fewer are
	// unavailable after the eviction. Setting this value to 0 prevents all voluntary
	// evictions, so the pods must be evicted manually. Defaults to 1.
	MaxUnavailable *int32 `json:"maxUnavailable,omitempty"`

	// Metadata to apply to the `PodDistruptionBugetTemplate` resource.
	Metadata *KafkaConnectS2ISpecTemplatePodDisruptionBudgetMetadata `json:"metadata,omitempty"`
}

// Metadata to apply to the `PodDistruptionBugetTemplate` resource.
type KafkaConnectS2ISpecTemplatePodDisruptionBudgetMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplatePodDisruptionBudgetMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplatePodDisruptionBudgetMetadataLabels map[string]interface{}

type KafkaConnectS2ISpecTemplatePodHostAliasesElem struct {
	// Hostnames corresponds to the JSON schema field "hostnames".
	Hostnames []string `json:"hostnames,omitempty"`

	// Ip corresponds to the JSON schema field "ip".
	Ip *string `json:"ip,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodImagePullSecretsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`
}

// Metadata applied to the resource.
type KafkaConnectS2ISpecTemplatePodMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplatePodMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplatePodMetadataLabels map[string]interface{}

// Configures pod-level security attributes and common container settings.
type KafkaConnectS2ISpecTemplatePodSecurityContext struct {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	FsGroup *int32 `json:"fsGroup,omitempty"`

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaConnectS2ISpecTemplatePodSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaConnectS2ISpecTemplatePodSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	SupplementalGroups []int32 `json:"supplementalGroups,omitempty"`

	// Sysctls corresponds to the JSON schema field "sysctls".
	Sysctls []KafkaConnectS2ISpecTemplatePodSecurityContextSysctlsElem `json:"sysctls,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaConnectS2ISpecTemplatePodSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodSecurityContextSysctlsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodTopologySpreadConstraintsElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaConnectS2ISpecTemplatePodTopologySpreadConstraintsElemLabelSelector `json:"labelSelector,omitempty"`

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	MaxSkew *int32 `json:"maxSkew,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	WhenUnsatisfiable *string `json:"whenUnsatisfiable,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodTopologySpreadConstraintsElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaConnectS2ISpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaConnectS2ISpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaConnectS2ISpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels map[string]interface{}

// Template for the Kafka Connect service account.
type KafkaConnectS2ISpecTemplateServiceAccount struct {
	// Metadata applied to the resource.
	Metadata *KafkaConnectS2ISpecTemplateServiceAccountMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaConnectS2ISpecTemplateServiceAccountMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateServiceAccountMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaConnectS2ISpecTemplateServiceAccountMetadataLabels map[string]interface{}

// TLS configuration.
type KafkaConnectS2ISpecTls struct {
	// Trusted certificates for TLS connection.
	TrustedCertificates []KafkaConnectS2ISpecTlsTrustedCertificatesElem `json:"trustedCertificates,omitempty"`
}

type KafkaConnectS2ISpecTlsTrustedCertificatesElem struct {
	// The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`
}

// The configuration of tracing in Kafka Connect.
type KafkaConnectS2ISpecTracing struct {
	// Type of the tracing used. Currently the only supported type is `jaeger` for
	// Jaeger tracing.
	Type KafkaConnectS2ISpecTracingType `json:"type"`
}

type KafkaConnectS2ISpecTracingType string

const KafkaConnectS2ISpecTracingTypeJaeger KafkaConnectS2ISpecTracingType = "jaeger"

// The status of the Kafka Connect Source-to-Image (S2I) cluster.
type KafkaConnectS2IStatus struct {
	// The name of the build configuration.
	BuildConfigName *string `json:"buildConfigName,omitempty"`

	// List of status conditions.
	Conditions []KafkaConnectS2IStatusConditionsElem `json:"conditions,omitempty"`

	// The list of connector plugins available in this Kafka Connect deployment.
	ConnectorPlugins []KafkaConnectS2IStatusConnectorPluginsElem `json:"connectorPlugins,omitempty"`

	// Label selector for pods providing this resource.
	LabelSelector *string `json:"labelSelector,omitempty"`

	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration *int32 `json:"observedGeneration,omitempty"`

	// The current number of pods being used to provide this resource.
	Replicas *int32 `json:"replicas,omitempty"`

	// The URL of the REST API endpoint for managing and monitoring Kafka Connect
	// connectors.
	Url *string `json:"url,omitempty"`
}

type KafkaConnectS2IStatusConditionsElem struct {
	// Last time the condition of a type changed from one status to another. The
	// required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`

	// Human-readable message indicating details about the condition's last
	// transition.
	Message *string `json:"message,omitempty"`

	// The reason for the condition's last transition (a single word in CamelCase).
	Reason *string `json:"reason,omitempty"`

	// The status of the condition, either True, False or Unknown.
	Status *string `json:"status,omitempty"`

	// The unique identifier of a condition, used to distinguish between other
	// conditions in the resource.
	Type *string `json:"type,omitempty"`
}

type KafkaConnectS2IStatusConnectorPluginsElem struct {
	// The class of the connector plugin.
	Class *string `json:"class,omitempty"`

	// The type of the connector plugin. The available types are `sink` and `source`.
	Type *string `json:"type,omitempty"`

	// The version of the connector plugin.
	Version *string `json:"version,omitempty"`
}

var enumValues_KafkaConnectS2ISpecAuthenticationType = []interface{}{
	"tls",
	"scram-sha-512",
	"plain",
	"oauth",
}
var enumValues_KafkaConnectS2ISpecBuildOutputType = []interface{}{
	"docker",
	"imagestream",
}
var enumValues_KafkaConnectS2ISpecBuildPluginsElemArtifactsElemType = []interface{}{
	"jar",
	"tgz",
	"zip",
	"other",
}
var enumValues_KafkaConnectS2ISpecJmxOptionsAuthenticationType = []interface{}{
	"password",
}
var enumValues_KafkaConnectS2ISpecLoggingType = []interface{}{
	"inline",
	"external",
}
var enumValues_KafkaConnectS2ISpecMetricsConfigType = []interface{}{
	"jmxPrometheusExporter",
}
var enumValues_KafkaConnectS2ISpecTemplateApiServiceIpFamiliesElem = []interface{}{
	"IPv4",
	"IPv6",
}
var enumValues_KafkaConnectS2ISpecTemplateApiServiceIpFamilyPolicy = []interface{}{
	"SingleStack",
	"PreferDualStack",
	"RequireDualStack",
}
var enumValues_KafkaConnectS2ISpecTemplateDeploymentDeploymentStrategy = []interface{}{
	"RollingUpdate",
	"Recreate",
}
var enumValues_KafkaConnectS2ISpecTracingType = []interface{}{
	"jaeger",
}
