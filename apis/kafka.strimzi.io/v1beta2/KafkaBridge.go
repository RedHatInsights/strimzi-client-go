// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package v1beta2

import "fmt"
import "encoding/json"
import "reflect"

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
import apiextensions "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecTracing) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaBridgeSpecTracing
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaBridgeSpecTracing(plain)
	return nil
}

// Kafka AdminClient related configuration.
type KafkaBridgeSpecAdminClient struct {
	// The Kafka AdminClient configuration used for AdminClient instances created by
	// the bridge.
	Config *apiextensions.JSON `json:"config,omitempty"`
}

// Link to Kubernetes Secret containing the access token which was obtained from
// the authorization server.
type KafkaBridgeSpecAuthenticationAccessToken struct {
	// The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key"`

	// The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecAuthenticationAccessToken) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaBridgeSpecAuthenticationAccessToken
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaBridgeSpecAuthenticationAccessToken(plain)
	return nil
}

// Reference to the `Secret` which holds the certificate and private key pair.
type KafkaBridgeSpecAuthenticationCertificateAndKey struct {
	// The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// The name of the private key in the Secret.
	Key string `json:"key"`

	// The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecAuthenticationCertificateAndKey) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate: required")
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaBridgeSpecAuthenticationCertificateAndKey
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaBridgeSpecAuthenticationCertificateAndKey(plain)
	return nil
}

// Link to Kubernetes Secret containing the OAuth client secret which the Kafka
// client can use to authenticate against the OAuth server and use the token
// endpoint URI.
type KafkaBridgeSpecAuthenticationClientSecret struct {
	// The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key"`

	// The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecAuthenticationClientSecret) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaBridgeSpecAuthenticationClientSecret
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaBridgeSpecAuthenticationClientSecret(plain)
	return nil
}

// Reference to the `Secret` which holds the password.
type KafkaBridgeSpecAuthenticationPasswordSecret struct {
	// The name of the key in the Secret under which the password is stored.
	Password string `json:"password"`

	// The name of the Secret containing the password.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecAuthenticationPasswordSecret) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["password"]; !ok || v == nil {
		return fmt.Errorf("field password: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaBridgeSpecAuthenticationPasswordSecret
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaBridgeSpecAuthenticationPasswordSecret(plain)
	return nil
}

// The Kafka AdminClient configuration used for AdminClient instances created by
// the bridge.
//type KafkaBridgeSpecAdminClientConfig map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecAuthenticationRefreshToken) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaBridgeSpecAuthenticationRefreshToken
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaBridgeSpecAuthenticationRefreshToken(plain)
	return nil
}

type KafkaBridgeSpecAuthenticationTlsTrustedCertificatesElem struct {
	// The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecAuthenticationTlsTrustedCertificatesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaBridgeSpecAuthenticationTlsTrustedCertificatesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaBridgeSpecAuthenticationTlsTrustedCertificatesElem(plain)
	return nil
}

type KafkaBridgeSpecAuthenticationType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpec) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["bootstrapServers"]; !ok || v == nil {
		return fmt.Errorf("field bootstrapServers: required")
	}
	type Plain KafkaBridgeSpec
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaBridgeSpec(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecAuthenticationType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaBridgeSpecAuthenticationType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaBridgeSpecAuthenticationType, v)
	}
	*j = KafkaBridgeSpecAuthenticationType(v)
	return nil
}

const KafkaBridgeSpecAuthenticationTypeTls KafkaBridgeSpecAuthenticationType = "tls"
const KafkaBridgeSpecAuthenticationTypeScramSha512 KafkaBridgeSpecAuthenticationType = "scram-sha-512"
const KafkaBridgeSpecAuthenticationTypePlain KafkaBridgeSpecAuthenticationType = "plain"

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// KafkaBridge
type KafkaBridge struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// The specification of the Kafka Bridge.
	Spec *KafkaBridgeSpec `json:"spec,omitempty"`

	// The status of the Kafka Bridge.
	Status *KafkaBridgeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
// KafkaBridgeList contains a list of instances.
type KafkaBridgeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`

	// A list of Kafka objects.
	Items []Kafka `json:"items,omitempty"`
}

func init() {
	SchemeBuilder.Register(&KafkaBridge{}, &KafkaBridgeList{})
}

// Authentication configuration for connecting to the cluster.
type KafkaBridgeSpecAuthentication struct {
	// Link to Kubernetes Secret containing the access token which was obtained from
	// the authorization server.
	AccessToken *KafkaBridgeSpecAuthenticationAccessToken `json:"accessToken,omitempty"`

	// Configure whether access token should be treated as JWT. This should be set to
	// `false` if the authorization server returns opaque tokens. Defaults to `true`.
	AccessTokenIsJwt *bool `json:"accessTokenIsJwt,omitempty"`

	// OAuth audience to use when authenticating against the authorization server.
	// Some authorization servers require the audience to be explicitly set. The
	// possible values depend on how the authorization server is configured. By
	// default, `audience` is not specified when performing the token endpoint
	// request.
	Audience *string `json:"audience,omitempty"`

	// Reference to the `Secret` which holds the certificate and private key pair.
	CertificateAndKey *KafkaBridgeSpecAuthenticationCertificateAndKey `json:"certificateAndKey,omitempty"`

	// OAuth Client ID which the Kafka client can use to authenticate against the
	// OAuth server and use the token endpoint URI.
	ClientId *string `json:"clientId,omitempty"`

	// Link to Kubernetes Secret containing the OAuth client secret which the Kafka
	// client can use to authenticate against the OAuth server and use the token
	// endpoint URI.
	ClientSecret *KafkaBridgeSpecAuthenticationClientSecret `json:"clientSecret,omitempty"`

	// Enable or disable TLS hostname verification. Default value is `false`.
	DisableTlsHostnameVerification *bool `json:"disableTlsHostnameVerification,omitempty"`

	// Set or limit time-to-live of the access tokens to the specified number of
	// seconds. This should be set if the authorization server returns opaque tokens.
	MaxTokenExpirySeconds *int32 `json:"maxTokenExpirySeconds,omitempty"`

	// Reference to the `Secret` which holds the password.
	PasswordSecret *KafkaBridgeSpecAuthenticationPasswordSecret `json:"passwordSecret,omitempty"`

	// Link to Kubernetes Secret containing the refresh token which can be used to
	// obtain access token from the authorization server.
	RefreshToken *KafkaBridgeSpecAuthenticationRefreshToken `json:"refreshToken,omitempty"`

	// OAuth scope to use when authenticating against the authorization server. Some
	// authorization servers require this to be set. The possible values depend on how
	// authorization server is configured. By default `scope` is not specified when
	// doing the token endpoint request.
	Scope *string `json:"scope,omitempty"`

	// Trusted certificates for TLS connection to the OAuth server.
	TlsTrustedCertificates []KafkaBridgeSpecAuthenticationTlsTrustedCertificatesElem `json:"tlsTrustedCertificates,omitempty"`

	// Authorization server token endpoint URI.
	TokenEndpointUri *string `json:"tokenEndpointUri,omitempty"`

	// Authentication type. Currently the only supported types are `tls`,
	// `scram-sha-512`, and `plain`. `scram-sha-512` type uses SASL SCRAM-SHA-512
	// Authentication. `plain` type uses SASL PLAIN Authentication. `oauth` type uses
	// SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication.
	// The `tls` type is supported only over TLS connections.
	Type KafkaBridgeSpecAuthenticationType `json:"type"`

	// Username used for the authentication.
	Username *string `json:"username,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecAuthentication) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaBridgeSpecAuthentication
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaBridgeSpecAuthentication(plain)
	return nil
}

// The Kafka consumer configuration used for consumer instances created by the
// bridge. Properties with the following prefixes cannot be set: ssl.,
// bootstrap.servers, group.id, sasl., security. (with the exception of:
// ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol,
// ssl.enabled.protocols).
//type KafkaBridgeSpecConsumerConfig map[string]interface{}

// Kafka consumer related configuration.
type KafkaBridgeSpecConsumer struct {
	// The Kafka consumer configuration used for consumer instances created by the
	// bridge. Properties with the following prefixes cannot be set: ssl.,
	// bootstrap.servers, group.id, sasl., security. (with the exception of:
	// ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol,
	// ssl.enabled.protocols).
	Config *apiextensions.JSON `json:"config,omitempty"`
}

// CORS configuration for the HTTP Bridge.
type KafkaBridgeSpecHttpCors struct {
	// List of allowed HTTP methods.
	AllowedMethods []string `json:"allowedMethods"`

	// List of allowed origins. Java regular expressions can be used.
	AllowedOrigins []string `json:"allowedOrigins"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecHttpCors) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["allowedMethods"]; !ok || v == nil {
		return fmt.Errorf("field allowedMethods: required")
	}
	if v, ok := raw["allowedOrigins"]; !ok || v == nil {
		return fmt.Errorf("field allowedOrigins: required")
	}
	type Plain KafkaBridgeSpecHttpCors
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaBridgeSpecHttpCors(plain)
	return nil
}

// The HTTP related configuration.
type KafkaBridgeSpecHttp struct {
	// CORS configuration for the HTTP Bridge.
	Cors *KafkaBridgeSpecHttpCors `json:"cors,omitempty"`

	// The port which is the server listening on.
	Port *int32 `json:"port,omitempty"`
}

// A map of -XX options to the JVM.
//type KafkaBridgeSpecJvmOptionsXX map[string]interface{}

type KafkaBridgeSpecJvmOptionsJavaSystemPropertiesElem struct {
	// The system property name.
	Name *string `json:"name,omitempty"`

	// The system property value.
	Value *string `json:"value,omitempty"`
}

// **Currently not supported** JVM Options for pods.
type KafkaBridgeSpecJvmOptions struct {
	// A map of -XX options to the JVM.
	XX *apiextensions.JSON `json:"-XX,omitempty"`

	// -Xms option to to the JVM.
	Xms *string `json:"-Xms,omitempty"`

	// -Xmx option to to the JVM.
	Xmx *string `json:"-Xmx,omitempty"`

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	GcLoggingEnabled *bool `json:"gcLoggingEnabled,omitempty"`

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	JavaSystemProperties []KafkaBridgeSpecJvmOptionsJavaSystemPropertiesElem `json:"javaSystemProperties,omitempty"`
}

// Pod liveness checking.
type KafkaBridgeSpecLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// A Map from logger name to logger level.
//type KafkaBridgeSpecLoggingLoggers map[string]interface{}

type KafkaBridgeSpecLoggingType string

// The specification of the Kafka Bridge.
type KafkaBridgeSpec struct {
	// Kafka AdminClient related configuration.
	AdminClient *KafkaBridgeSpecAdminClient `json:"adminClient,omitempty"`

	// Authentication configuration for connecting to the cluster.
	Authentication *KafkaBridgeSpecAuthentication `json:"authentication,omitempty"`

	// A list of host:port pairs for establishing the initial connection to the Kafka
	// cluster.
	BootstrapServers string `json:"bootstrapServers"`

	// Kafka consumer related configuration.
	Consumer *KafkaBridgeSpecConsumer `json:"consumer,omitempty"`

	// Enable the metrics for the Kafka Bridge. Default is false.
	EnableMetrics *bool `json:"enableMetrics,omitempty"`

	// The HTTP related configuration.
	Http *KafkaBridgeSpecHttp `json:"http,omitempty"`

	// The docker image for the pods.
	Image *string `json:"image,omitempty"`

	// **Currently not supported** JVM Options for pods.
	JvmOptions *KafkaBridgeSpecJvmOptions `json:"jvmOptions,omitempty"`

	// Pod liveness checking.
	LivenessProbe *KafkaBridgeSpecLivenessProbe `json:"livenessProbe,omitempty"`

	// Logging configuration for Kafka Bridge.
	Logging *KafkaBridgeSpecLogging `json:"logging,omitempty"`

	// Kafka producer related configuration.
	Producer *KafkaBridgeSpecProducer `json:"producer,omitempty"`

	// Pod readiness checking.
	ReadinessProbe *KafkaBridgeSpecReadinessProbe `json:"readinessProbe,omitempty"`

	// The number of pods in the `Deployment`.
	Replicas *int32 `json:"replicas,omitempty"`

	// CPU and memory resources to reserve.
	Resources *KafkaBridgeSpecResources `json:"resources,omitempty"`

	// Template for Kafka Bridge resources. The template allows users to specify how
	// is the `Deployment` and `Pods` generated.
	Template *KafkaBridgeSpecTemplate `json:"template,omitempty"`

	// TLS configuration for connecting Kafka Bridge to the cluster.
	Tls *KafkaBridgeSpecTls `json:"tls,omitempty"`

	// The configuration of tracing in Kafka Bridge.
	Tracing *KafkaBridgeSpecTracing `json:"tracing,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecLoggingType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaBridgeSpecLoggingType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaBridgeSpecLoggingType, v)
	}
	*j = KafkaBridgeSpecLoggingType(v)
	return nil
}

const KafkaBridgeSpecLoggingTypeInline KafkaBridgeSpecLoggingType = "inline"
const KafkaBridgeSpecLoggingTypeExternal KafkaBridgeSpecLoggingType = "external"

// Reference to the key in the ConfigMap containing the configuration.
type KafkaBridgeSpecLoggingValueFromConfigMapKeyRef struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Optional corresponds to the JSON schema field "optional".
	Optional *bool `json:"optional,omitempty"`
}

// `ConfigMap` entry where the logging configuration is stored.
type KafkaBridgeSpecLoggingValueFrom struct {
	// Reference to the key in the ConfigMap containing the configuration.
	ConfigMapKeyRef *KafkaBridgeSpecLoggingValueFromConfigMapKeyRef `json:"configMapKeyRef,omitempty"`
}

// Logging configuration for Kafka Bridge.
type KafkaBridgeSpecLogging struct {
	// A Map from logger name to logger level.
	Loggers *apiextensions.JSON `json:"loggers,omitempty"`

	// Logging type, must be either 'inline' or 'external'.
	Type KafkaBridgeSpecLoggingType `json:"type"`

	// `ConfigMap` entry where the logging configuration is stored.
	ValueFrom *KafkaBridgeSpecLoggingValueFrom `json:"valueFrom,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecLogging) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain KafkaBridgeSpecLogging
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaBridgeSpecLogging(plain)
	return nil
}

const KafkaBridgeSpecAuthenticationTypeOauth KafkaBridgeSpecAuthenticationType = "oauth"

// Link to Kubernetes Secret containing the refresh token which can be used to
// obtain access token from the authorization server.
type KafkaBridgeSpecAuthenticationRefreshToken struct {
	// The key under which the secret value is stored in the Kubernetes Secret.
	Key string `json:"key"`

	// The name of the Kubernetes Secret containing the secret value.
	SecretName string `json:"secretName"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecTemplateDeploymentDeploymentStrategy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaBridgeSpecTemplateDeploymentDeploymentStrategy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaBridgeSpecTemplateDeploymentDeploymentStrategy, v)
	}
	*j = KafkaBridgeSpecTemplateDeploymentDeploymentStrategy(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecTlsTrustedCertificatesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["certificate"]; !ok || v == nil {
		return fmt.Errorf("field certificate: required")
	}
	if v, ok := raw["secretName"]; !ok || v == nil {
		return fmt.Errorf("field secretName: required")
	}
	type Plain KafkaBridgeSpecTlsTrustedCertificatesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KafkaBridgeSpecTlsTrustedCertificatesElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy, v)
	}
	*j = KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecTracingType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaBridgeSpecTracingType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaBridgeSpecTracingType, v)
	}
	*j = KafkaBridgeSpecTracingType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KafkaBridgeSpecTemplateApiServiceIpFamiliesElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KafkaBridgeSpecTemplateApiServiceIpFamiliesElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KafkaBridgeSpecTemplateApiServiceIpFamiliesElem, v)
	}
	*j = KafkaBridgeSpecTemplateApiServiceIpFamiliesElem(v)
	return nil
}

// Kafka producer related configuration.
type KafkaBridgeSpecProducer struct {
	// The Kafka producer configuration used for producer instances created by the
	// bridge. Properties with the following prefixes cannot be set: ssl.,
	// bootstrap.servers, sasl., security. (with the exception of:
	// ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol,
	// ssl.enabled.protocols).
	Config *apiextensions.JSON `json:"config,omitempty"`
}

// The Kafka producer configuration used for producer instances created by the
// bridge. Properties with the following prefixes cannot be set: ssl.,
// bootstrap.servers, sasl., security. (with the exception of:
// ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol,
// ssl.enabled.protocols).
//type KafkaBridgeSpecProducerConfig map[string]interface{}

// Pod readiness checking.
type KafkaBridgeSpecReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int32 `json:"failureThreshold,omitempty"`

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	InitialDelaySeconds *int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	PeriodSeconds *int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int32 `json:"successThreshold,omitempty"`

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// CPU and memory resources to reserve.
type KafkaBridgeSpecResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits *apiextensions.JSON `json:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests *apiextensions.JSON `json:"requests,omitempty"`
}

//type KafkaBridgeSpecResourcesLimits map[string]interface{}

//type KafkaBridgeSpecResourcesRequests map[string]interface{}

// Template for Kafka Bridge resources. The template allows users to specify how is
// the `Deployment` and `Pods` generated.
type KafkaBridgeSpecTemplate struct {
	// Template for Kafka Bridge API `Service`.
	ApiService *KafkaBridgeSpecTemplateApiService `json:"apiService,omitempty"`

	// Template for the Kafka Bridge container.
	BridgeContainer *KafkaBridgeSpecTemplateBridgeContainer `json:"bridgeContainer,omitempty"`

	// Template for Kafka Bridge `Deployment`.
	Deployment *KafkaBridgeSpecTemplateDeployment `json:"deployment,omitempty"`

	// Template for Kafka Bridge `Pods`.
	Pod *KafkaBridgeSpecTemplatePod `json:"pod,omitempty"`

	// Template for Kafka Bridge `PodDisruptionBudget`.
	PodDisruptionBudget *KafkaBridgeSpecTemplatePodDisruptionBudget `json:"podDisruptionBudget,omitempty"`

	// Template for the Kafka Bridge service account.
	ServiceAccount *KafkaBridgeSpecTemplateServiceAccount `json:"serviceAccount,omitempty"`
}

// Template for Kafka Bridge API `Service`.
type KafkaBridgeSpecTemplateApiService struct {
	// Specifies the IP Families used by the service. Available options are `IPv4` and
	// `IPv6. If unspecified, Kubernetes will choose the default value based on the
	// `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.
	IpFamilies []KafkaBridgeSpecTemplateApiServiceIpFamiliesElem `json:"ipFamilies,omitempty"`

	// Specifies the IP Family Policy used by the service. Available options are
	// `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a
	// single IP family. `PreferDualStack` is for two IP families on dual-stack
	// configured clusters or a single IP family on single-stack clusters.
	// `RequireDualStack` fails unless there are two IP families on dual-stack
	// configured clusters. If unspecified, Kubernetes will choose the default value
	// based on the service type. Available on Kubernetes 1.20 and newer.
	IpFamilyPolicy *KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy `json:"ipFamilyPolicy,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaBridgeSpecTemplateApiServiceMetadata `json:"metadata,omitempty"`
}

type KafkaBridgeSpecTemplateApiServiceIpFamiliesElem string

const KafkaBridgeSpecTemplateApiServiceIpFamiliesElemIPv4 KafkaBridgeSpecTemplateApiServiceIpFamiliesElem = "IPv4"
const KafkaBridgeSpecTemplateApiServiceIpFamiliesElemIPv6 KafkaBridgeSpecTemplateApiServiceIpFamiliesElem = "IPv6"

type KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy string

const KafkaBridgeSpecTemplateApiServiceIpFamilyPolicyPreferDualStack KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy = "PreferDualStack"
const KafkaBridgeSpecTemplateApiServiceIpFamilyPolicyRequireDualStack KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy = "RequireDualStack"
const KafkaBridgeSpecTemplateApiServiceIpFamilyPolicySingleStack KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy = "SingleStack"

// Metadata applied to the resource.
type KafkaBridgeSpecTemplateApiServiceMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaBridgeSpecTemplateApiServiceMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaBridgeSpecTemplateApiServiceMetadataLabels map[string]interface{}

// Template for the Kafka Bridge container.
type KafkaBridgeSpecTemplateBridgeContainer struct {
	// Environment variables which should be applied to the container.
	Env []KafkaBridgeSpecTemplateBridgeContainerEnvElem `json:"env,omitempty"`

	// Security context for the container.
	SecurityContext *KafkaBridgeSpecTemplateBridgeContainerSecurityContext `json:"securityContext,omitempty"`
}

type KafkaBridgeSpecTemplateBridgeContainerEnvElem struct {
	// The environment variable key.
	Name *string `json:"name,omitempty"`

	// The environment variable value.
	Value *string `json:"value,omitempty"`
}

// Security context for the container.
type KafkaBridgeSpecTemplateBridgeContainerSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *KafkaBridgeSpecTemplateBridgeContainerSecurityContextCapabilities `json:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty"`

	// ProcMount corresponds to the JSON schema field "procMount".
	ProcMount *string `json:"procMount,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaBridgeSpecTemplateBridgeContainerSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaBridgeSpecTemplateBridgeContainerSecurityContextCapabilities struct {
	// Add corresponds to the JSON schema field "add".
	Add []string `json:"add,omitempty"`

	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty"`
}

type KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaBridgeSpecTemplateBridgeContainerSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

// Template for Kafka Bridge `Deployment`.
type KafkaBridgeSpecTemplateDeployment struct {
	// DeploymentStrategy which will be used for this Deployment. Valid values are
	// `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`.
	DeploymentStrategy *KafkaBridgeSpecTemplateDeploymentDeploymentStrategy `json:"deploymentStrategy,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaBridgeSpecTemplateDeploymentMetadata `json:"metadata,omitempty"`
}

type KafkaBridgeSpecTemplateDeploymentDeploymentStrategy string

const KafkaBridgeSpecTemplateDeploymentDeploymentStrategyRecreate KafkaBridgeSpecTemplateDeploymentDeploymentStrategy = "Recreate"
const KafkaBridgeSpecTemplateDeploymentDeploymentStrategyRollingUpdate KafkaBridgeSpecTemplateDeploymentDeploymentStrategy = "RollingUpdate"

// Metadata applied to the resource.
type KafkaBridgeSpecTemplateDeploymentMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaBridgeSpecTemplateDeploymentMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaBridgeSpecTemplateDeploymentMetadataLabels map[string]interface{}

// Template for Kafka Bridge `Pods`.
type KafkaBridgeSpecTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaBridgeSpecTemplatePodAffinity `json:"affinity,omitempty"`

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	EnableServiceLinks *bool `json:"enableServiceLinks,omitempty"`

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	HostAliases []KafkaBridgeSpecTemplatePodHostAliasesElem `json:"hostAliases,omitempty"`

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets []KafkaBridgeSpecTemplatePodImagePullSecretsElem `json:"imagePullSecrets,omitempty"`

	// Metadata applied to the resource.
	Metadata *KafkaBridgeSpecTemplatePodMetadata `json:"metadata,omitempty"`

	// The name of the priority class used to assign priority to the pods. For more
	// information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `json:"priorityClassName,omitempty"`

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	SchedulerName *string `json:"schedulerName,omitempty"`

	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaBridgeSpecTemplatePodSecurityContext `json:"securityContext,omitempty"`

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	TerminationGracePeriodSeconds *int32 `json:"terminationGracePeriodSeconds,omitempty"`

	// The pod's tolerations.
	Tolerations []KafkaBridgeSpecTemplatePodTolerationsElem `json:"tolerations,omitempty"`

	// The pod's topology spread constraints.
	TopologySpreadConstraints []KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElem `json:"topologySpreadConstraints,omitempty"`
}

// The pod's affinity rules.
type KafkaBridgeSpecTemplatePodAffinity struct {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	NodeAffinity *KafkaBridgeSpecTemplatePodAffinityNodeAffinity `json:"nodeAffinity,omitempty"`

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	PodAffinity *KafkaBridgeSpecTemplatePodAffinityPodAffinity `json:"podAffinity,omitempty"`

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	PodAntiAffinity *KafkaBridgeSpecTemplatePodAffinityPodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityNodeAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// Preference corresponds to the JSON schema field "preference".
	Preference *KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference `json:"preference,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	NodeSelectorTerms []KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem `json:"nodeSelectorTerms,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchFields corresponds to the JSON schema field "matchFields".
	MatchFields []KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem `json:"matchFields,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]interface{}

type KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels map[string]interface{}

type KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector `json:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]interface{}

type KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels map[string]interface{}

type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinity struct {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	PreferredDuringSchedulingIgnoredDuringExecution []KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	RequiredDuringSchedulingIgnoredDuringExecution []KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem struct {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	PodAffinityTerm *KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm `json:"podAffinityTerm,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *int32 `json:"weight,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector `json:"labelSelector,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector `json:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels map[string]interface{}

type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels map[string]interface{}

type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector `json:"labelSelector,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector *KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector `json:"namespaceSelector,omitempty"`

	// Namespaces corresponds to the JSON schema field "namespaces".
	Namespaces []string `json:"namespaces,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels map[string]interface{}

type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels map[string]interface{}

// Template for Kafka Bridge `PodDisruptionBudget`.
type KafkaBridgeSpecTemplatePodDisruptionBudget struct {
	// Maximum number of unavailable pods to allow automatic Pod eviction. A Pod
	// eviction is allowed when the `maxUnavailable` number of pods or fewer are
	// unavailable after the eviction. Setting this value to 0 prevents all voluntary
	// evictions, so the pods must be evicted manually. Defaults to 1.
	MaxUnavailable *int32 `json:"maxUnavailable,omitempty"`

	// Metadata to apply to the `PodDistruptionBugetTemplate` resource.
	Metadata *KafkaBridgeSpecTemplatePodDisruptionBudgetMetadata `json:"metadata,omitempty"`
}

// Metadata to apply to the `PodDistruptionBugetTemplate` resource.
type KafkaBridgeSpecTemplatePodDisruptionBudgetMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaBridgeSpecTemplatePodDisruptionBudgetMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaBridgeSpecTemplatePodDisruptionBudgetMetadataLabels map[string]interface{}

type KafkaBridgeSpecTemplatePodHostAliasesElem struct {
	// Hostnames corresponds to the JSON schema field "hostnames".
	Hostnames []string `json:"hostnames,omitempty"`

	// Ip corresponds to the JSON schema field "ip".
	Ip *string `json:"ip,omitempty"`
}

type KafkaBridgeSpecTemplatePodImagePullSecretsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`
}

// Metadata applied to the resource.
type KafkaBridgeSpecTemplatePodMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaBridgeSpecTemplatePodMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaBridgeSpecTemplatePodMetadataLabels map[string]interface{}

// Configures pod-level security attributes and common container settings.
type KafkaBridgeSpecTemplatePodSecurityContext struct {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	FsGroup *int32 `json:"fsGroup,omitempty"`

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	FsGroupChangePolicy *string `json:"fsGroupChangePolicy,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int32 `json:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int32 `json:"runAsUser,omitempty"`

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	SeLinuxOptions *KafkaBridgeSpecTemplatePodSecurityContextSeLinuxOptions `json:"seLinuxOptions,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *KafkaBridgeSpecTemplatePodSecurityContextSeccompProfile `json:"seccompProfile,omitempty"`

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	SupplementalGroups []int32 `json:"supplementalGroups,omitempty"`

	// Sysctls corresponds to the JSON schema field "sysctls".
	Sysctls []KafkaBridgeSpecTemplatePodSecurityContextSysctlsElem `json:"sysctls,omitempty"`

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	WindowsOptions *KafkaBridgeSpecTemplatePodSecurityContextWindowsOptions `json:"windowsOptions,omitempty"`
}

type KafkaBridgeSpecTemplatePodSecurityContextSeLinuxOptions struct {
	// Level corresponds to the JSON schema field "level".
	Level *string `json:"level,omitempty"`

	// Role corresponds to the JSON schema field "role".
	Role *string `json:"role,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *string `json:"user,omitempty"`
}

type KafkaBridgeSpecTemplatePodSecurityContextSeccompProfile struct {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	LocalhostProfile *string `json:"localhostProfile,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`
}

type KafkaBridgeSpecTemplatePodSecurityContextSysctlsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaBridgeSpecTemplatePodSecurityContextWindowsOptions struct {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	GmsaCredentialSpec *string `json:"gmsaCredentialSpec,omitempty"`

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	GmsaCredentialSpecName *string `json:"gmsaCredentialSpecName,omitempty"`

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	RunAsUserName *string `json:"runAsUserName,omitempty"`
}

type KafkaBridgeSpecTemplatePodTolerationsElem struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect *string `json:"effect,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	TolerationSeconds *int32 `json:"tolerationSeconds,omitempty"`

	// Value corresponds to the JSON schema field "value".
	Value *string `json:"value,omitempty"`
}

type KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElem struct {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	LabelSelector *KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElemLabelSelector `json:"labelSelector,omitempty"`

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	MaxSkew *int32 `json:"maxSkew,omitempty"`

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	TopologyKey *string `json:"topologyKey,omitempty"`

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	WhenUnsatisfiable *string `json:"whenUnsatisfiable,omitempty"`
}

type KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElemLabelSelector struct {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	MatchExpressions []KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem `json:"matchExpressions,omitempty"`

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	MatchLabels *apiextensions.JSON `json:"matchLabels,omitempty"`
}

type KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem struct {
	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Operator corresponds to the JSON schema field "operator".
	Operator *string `json:"operator,omitempty"`

	// Values corresponds to the JSON schema field "values".
	Values []string `json:"values,omitempty"`
}

//type KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels map[string]interface{}

// Template for the Kafka Bridge service account.
type KafkaBridgeSpecTemplateServiceAccount struct {
	// Metadata applied to the resource.
	Metadata *KafkaBridgeSpecTemplateServiceAccountMetadata `json:"metadata,omitempty"`
}

// Metadata applied to the resource.
type KafkaBridgeSpecTemplateServiceAccountMetadata struct {
	// Annotations added to the resource template. Can be applied to different
	// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations *apiextensions.JSON `json:"annotations,omitempty"`

	// Labels added to the resource template. Can be applied to different resources
	// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels *apiextensions.JSON `json:"labels,omitempty"`
}

// Annotations added to the resource template. Can be applied to different
// resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaBridgeSpecTemplateServiceAccountMetadataAnnotations map[string]interface{}

// Labels added to the resource template. Can be applied to different resources
// such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
//type KafkaBridgeSpecTemplateServiceAccountMetadataLabels map[string]interface{}

// TLS configuration for connecting Kafka Bridge to the cluster.
type KafkaBridgeSpecTls struct {
	// Trusted certificates for TLS connection.
	TrustedCertificates []KafkaBridgeSpecTlsTrustedCertificatesElem `json:"trustedCertificates,omitempty"`
}

type KafkaBridgeSpecTlsTrustedCertificatesElem struct {
	// The name of the file certificate in the Secret.
	Certificate string `json:"certificate"`

	// The name of the Secret containing the certificate.
	SecretName string `json:"secretName"`
}

// The configuration of tracing in Kafka Bridge.
type KafkaBridgeSpecTracing struct {
	// Type of the tracing used. Currently the only supported type is `jaeger` for
	// Jaeger tracing.
	Type KafkaBridgeSpecTracingType `json:"type"`
}

type KafkaBridgeSpecTracingType string

const KafkaBridgeSpecTracingTypeJaeger KafkaBridgeSpecTracingType = "jaeger"

// The status of the Kafka Bridge.
type KafkaBridgeStatus struct {
	// List of status conditions.
	Conditions []KafkaBridgeStatusConditionsElem `json:"conditions,omitempty"`

	// Label selector for pods providing this resource.
	LabelSelector *string `json:"labelSelector,omitempty"`

	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration *int32 `json:"observedGeneration,omitempty"`

	// The current number of pods being used to provide this resource.
	Replicas *int32 `json:"replicas,omitempty"`

	// The URL at which external client applications can access the Kafka Bridge.
	Url *string `json:"url,omitempty"`
}

type KafkaBridgeStatusConditionsElem struct {
	// Last time the condition of a type changed from one status to another. The
	// required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`

	// Human-readable message indicating details about the condition's last
	// transition.
	Message *string `json:"message,omitempty"`

	// The reason for the condition's last transition (a single word in CamelCase).
	Reason *string `json:"reason,omitempty"`

	// The status of the condition, either True, False or Unknown.
	Status *string `json:"status,omitempty"`

	// The unique identifier of a condition, used to distinguish between other
	// conditions in the resource.
	Type *string `json:"type,omitempty"`
}

var enumValues_KafkaBridgeSpecAuthenticationType = []interface{}{
	"tls",
	"scram-sha-512",
	"plain",
	"oauth",
}
var enumValues_KafkaBridgeSpecLoggingType = []interface{}{
	"inline",
	"external",
}
var enumValues_KafkaBridgeSpecTemplateApiServiceIpFamiliesElem = []interface{}{
	"IPv4",
	"IPv6",
}
var enumValues_KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy = []interface{}{
	"SingleStack",
	"PreferDualStack",
	"RequireDualStack",
}
var enumValues_KafkaBridgeSpecTemplateDeploymentDeploymentStrategy = []interface{}{
	"RollingUpdate",
	"Recreate",
}
var enumValues_KafkaBridgeSpecTracingType = []interface{}{
	"jaeger",
}
