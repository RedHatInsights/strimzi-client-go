// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package v1beta2

import "encoding/json"
import "fmt"
import v1 "k8s.io/api/core/v1"
import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// manual type changes were made to StrimziPodSetSpec below after running crd-codegen

// The specification of the StrimziPodSet.
type StrimziPodSetSpec struct {
	// The Pods managed by this StrimziPodSet.
	Pods []v1.Pod `json:"pods" yaml:"pods" mapstructure:"pods"`

	// Selector is a label query which matches all the pods managed by this
	// `StrimziPodSet`. Only `matchLabels` is supported. If `matchExpressions` is set,
	// it will be ignored.
	Selector metav1.LabelSelector `json:"selector" yaml:"selector" mapstructure:"selector"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StrimziPodSetSpec) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["pods"]; !ok || v == nil {
		return fmt.Errorf("field pods in StrimziPodSetSpec: required")
	}
	if v, ok := raw["selector"]; !ok || v == nil {
		return fmt.Errorf("field selector in StrimziPodSetSpec: required")
	}
	type Plain StrimziPodSetSpec
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = StrimziPodSetSpec(plain)
	return nil
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// StrimziPodSet
type StrimziPodSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// The specification of the StrimziPodSet.
	Spec *StrimziPodSetSpec `json:"spec,omitempty" yaml:"spec,omitempty" mapstructure:"spec,omitempty"`

	// The status of the StrimziPodSet.
	Status *StrimziPodSetStatus `json:"status,omitempty" yaml:"status,omitempty" mapstructure:"status,omitempty"`
}

// +kubebuilder:object:root=true
// StrimziPodSetList contains a list of instances.
type KafkaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`

	// A list of StrimziPodSet objects.
	Items []StrimziPodSet `json:"items,omitempty"`
}

// The status of the StrimziPodSet.
type StrimziPodSetStatus struct {
	// List of status conditions.
	Conditions []StrimziPodSetStatusConditionsElem `json:"conditions,omitempty" yaml:"conditions,omitempty" mapstructure:"conditions,omitempty"`

	// Number of pods managed by this `StrimziPodSet` resource that have the current
	// revision.
	CurrentPods *int32 `json:"currentPods,omitempty" yaml:"currentPods,omitempty" mapstructure:"currentPods,omitempty"`

	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration *int32 `json:"observedGeneration,omitempty" yaml:"observedGeneration,omitempty" mapstructure:"observedGeneration,omitempty"`

	// Number of pods managed by this `StrimziPodSet` resource.
	Pods *int32 `json:"pods,omitempty" yaml:"pods,omitempty" mapstructure:"pods,omitempty"`

	// Number of pods managed by this `StrimziPodSet` resource that are ready.
	ReadyPods *int32 `json:"readyPods,omitempty" yaml:"readyPods,omitempty" mapstructure:"readyPods,omitempty"`
}

type StrimziPodSetStatusConditionsElem struct {
	// Last time the condition of a type changed from one status to another. The
	// required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" yaml:"lastTransitionTime,omitempty" mapstructure:"lastTransitionTime,omitempty"`

	// Human-readable message indicating details about the condition's last
	// transition.
	Message *string `json:"message,omitempty" yaml:"message,omitempty" mapstructure:"message,omitempty"`

	// The reason for the condition's last transition (a single word in CamelCase).
	Reason *string `json:"reason,omitempty" yaml:"reason,omitempty" mapstructure:"reason,omitempty"`

	// The status of the condition, either True, False or Unknown.
	Status *string `json:"status,omitempty" yaml:"status,omitempty" mapstructure:"status,omitempty"`

	// The unique identifier of a condition, used to distinguish between other
	// conditions in the resource.
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}
