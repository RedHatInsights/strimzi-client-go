{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "KafkaUser",
  "properties": {
    "spec": {
      "description": "The specification of the user.",
      "type": "object",
      "properties": {
        "authentication": {
          "description": "Authentication mechanism enabled for this Kafka user.",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "description": "Authentication type.",
              "type": "string",
              "enum": [
                "tls",
                "scram-sha-512"
              ]
            }
          }
        },
        "authorization": {
          "description": "Authorization rules for this Kafka user.",
          "type": "object",
          "required": [
            "acls",
            "type"
          ],
          "properties": {
            "acls": {
              "description": "List of ACL rules which should be applied to this user.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "operation",
                  "resource"
                ],
                "properties": {
                  "host": {
                    "description": "The host from which the action described in the ACL rule is allowed or denied.",
                    "type": "string"
                  },
                  "operation": {
                    "description": "Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.",
                    "type": "string",
                    "enum": [
                      "Read",
                      "Write",
                      "Create",
                      "Delete",
                      "Alter",
                      "Describe",
                      "ClusterAction",
                      "AlterConfigs",
                      "DescribeConfigs",
                      "IdempotentWrite",
                      "All"
                    ]
                  },
                  "resource": {
                    "description": "Indicates the resource for which given ACL rule applies.",
                    "type": "object",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.",
                        "type": "string"
                      },
                      "patternType": {
                        "description": "Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.",
                        "type": "string",
                        "enum": [
                          "literal",
                          "prefix"
                        ]
                      },
                      "type": {
                        "description": "Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.",
                        "type": "string",
                        "enum": [
                          "topic",
                          "group",
                          "cluster",
                          "transactionalId"
                        ]
                      }
                    }
                  },
                  "type": {
                    "description": "The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.",
                    "type": "string",
                    "enum": [
                      "allow",
                      "deny"
                    ]
                  }
                }
              }
            },
            "type": {
              "description": "Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization.",
              "type": "string",
              "enum": [
                "simple"
              ]
            }
          }
        },
        "quotas": {
          "description": "Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.",
          "type": "object",
          "properties": {
            "consumerByteRate": {
              "description": "A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.",
              "type": "integer",
              "minimum": 0
            },
            "producerByteRate": {
              "description": "A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.",
              "type": "integer",
              "minimum": 0
            },
            "requestPercentage": {
              "description": "A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.",
              "type": "integer",
              "minimum": 0
            }
          }
        },
        "template": {
          "description": "Template to specify how Kafka User `Secrets` are generated.",
          "type": "object",
          "properties": {
            "secret": {
              "description": "Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.",
              "type": "object",
              "properties": {
                "metadata": {
                  "description": "Metadata applied to the resource.",
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "description": "Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.",
                      "type": "object"
                    },
                    "labels": {
                      "description": "Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "status": {
      "description": "The status of the Kafka User.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "List of status conditions.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.",
                "type": "string"
              },
              "message": {
                "description": "Human-readable message indicating details about the condition's last transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition (a single word in CamelCase).",
                "type": "string"
              },
              "status": {
                "description": "The status of the condition, either True, False or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "The unique identifier of a condition, used to distinguish between other conditions in the resource.",
                "type": "string"
              }
            }
          }
        },
        "observedGeneration": {
          "description": "The generation of the CRD that was last reconciled by the operator.",
          "type": "integer"
        },
        "secret": {
          "description": "The name of `Secret` where the credentials are stored.",
          "type": "string"
        },
        "username": {
          "description": "Username.",
          "type": "string"
        }
      }
    }
  }
}